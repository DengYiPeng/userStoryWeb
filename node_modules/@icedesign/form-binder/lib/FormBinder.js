'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2; /* eslint react/require-default-props:0, react/no-unused-prop-types:0, react/no-find-dom-node:0 */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultSetFieldValue = function defaultSetFieldValue() {
  return arguments.length <= 0 ? undefined : arguments[0];
};

var defaultGetFieldValue = function defaultGetFieldValue(value) {
  return value;
};

var FormBinder = (_temp2 = _class = function (_Component) {
  _inherits(FormBinder, _Component);

  function FormBinder() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FormBinder);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FormBinder.__proto__ || Object.getPrototypeOf(FormBinder)).call.apply(_ref, [this].concat(args))), _this), _this.rules = [], _this.getRules = function (props) {
      // rules 优先级最高
      if (props.rules && Array.isArray(props.rules)) {
        return props.rules;
      }

      var rules = []; // [{required: true, max: 10, ...}]
      var ruleKeys = ['required', 'pattern', 'min', 'max', 'len', 'enum', 'whitespace', 'fields', 'transform', 'message', 'validator', 'type', 'range'];

      ruleKeys.forEach(function (ruleKey) {
        var ruleValue = void 0;
        if (ruleKey in props) {
          ruleValue = props[ruleKey];
        }

        if (ruleValue !== undefined && ruleValue !== null) {
          if (rules[0]) {
            rules[0][ruleKey] = ruleValue;
          } else {
            rules.push(_defineProperty({}, ruleKey, ruleValue));
          }
        }
      });

      return rules;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FormBinder, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.rules = this.getRules(this.props);
      if (this.rules.length) {
        this.context.addValidate(this.props.name, this.rules, _reactDom2.default.findDOMNode(this));
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var nextRules = this.getRules(nextProps);
      if (nextRules.length > 0 && JSON.stringify(nextRules) !== JSON.stringify(this.rules)) {
        this.rules = nextRules;
        this.context.addValidate(this.props.name, this.rules, _reactDom2.default.findDOMNode(this));
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.rules = this.getRules(this.props);
      if (this.rules.length) {
        this.context.removeValidate(this.props.name);
      }
    }

    /**
     * 从 FormBinder 收集表单的校验规则
     */

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this,
          _React$cloneElement;

      var FormItem = _react2.default.Children.only(this.props.children);
      var FormItemProps = FormItem.props;
      var name = this.props.name;

      // 提供受控属性 value 或其它与 valuePropName 的值同名的属性，如 Switch 的是 'checked'
      var valuePropName = this.props.valuePropName || 'value';

      // 自定义验证触发时机
      var validateTriggerType = this.props.triggerType || 'onChange';

      // 设置单个表单域的值
      var setFieldValue = this.props.setFieldValue || defaultSetFieldValue;

      // 获取单个表单域的值
      var getFieldValue = this.props.getFieldValue || defaultGetFieldValue;

      var NewFormItem = _react2.default.cloneElement(FormItem, (_React$cloneElement = {}, _defineProperty(_React$cloneElement, valuePropName, function () {
        var value = _this2.context.getter(name);
        return setFieldValue(value);
      }()), _defineProperty(_React$cloneElement, validateTriggerType, function () {
        if (_this2.rules.length > 0) {
          _this2.context.validate(name, _this2.rules);
        }
      }), _defineProperty(_React$cloneElement, 'onChange', function onChange() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (FormItemProps.onChange) {
          FormItemProps.onChange.apply(_this2, args);
        }

        var newValue = getFieldValue.apply(undefined, args);
        _this2.context.setter(name, newValue);

        if (validateTriggerType === 'onChange' && _this2.rules.length > 0) {
          _this2.context.validate(name, _this2.rules);
        }
      }), _React$cloneElement));

      return NewFormItem;
    }
  }]);

  return FormBinder;
}(_react.Component), _class.displayName = 'FormBinder', _class.propTypes = {
  /**
   * 当前表单绑定的数据层级
   */
  name: _propTypes2.default.string,
  /**
   * 数据格式化方法，表单组件 onChange 之后，支持对数据做一层转换再进行后续操作
   */
  setFieldValue: _propTypes2.default.func,
  /**
   * 数据转换方法，表单组件接收值时可将其转换为其他类型
   */
  getFieldValue: _propTypes2.default.func,
  /**
   * 触发校验的事件，对于高频触发校验的 Input 可以设置为 'onBlur' 减少校验调用次数
   */
  triggerType: _propTypes2.default.string,
  /**
   * value 属性的 key, 默认 `value`
   */
  valuePropName: _propTypes2.default.string,
  /**
   * 当前表单项是否必须有值
   */
  required: _propTypes2.default.bool,
  /**
   * 当前表单值正则表单校验
   */
  pattern: _propTypes2.default.object,
  /**
   * 当前表单值最小数（对字符串、数组、数值类型数据有效）
   */
  min: _propTypes2.default.number,
  /**
   * 当前表单值最大数（对字符串、数组、数值类型数据有效）
   */
  max: _propTypes2.default.number,
  /**
   * 当前表单值固定长度（对字符串、数组、数值类型数据有效）
   */
  len: _propTypes2.default.number,
  /**
   * 当前表单值枚举值
   */
  enum: _propTypes2.default.array,
  /**
   * 当前表单值是否允许纯空格（对字符串类型有效）
   */
  whitespace: _propTypes2.default.bool,
  /**
   * 声明当前表单项下层表单数据校验规则
   */
  fields: _propTypes2.default.object,
  /**
   * 当前表单值校验前的自定义数据转换方法
   */
  transform: _propTypes2.default.func,
  /**
   * 当前表单校验规则失败时的提示文案
   */
  message: _propTypes2.default.node,
  /**
   * 自定义表单校验方法，支持异步请求等校验
   */
  validator: _propTypes2.default.func,
  /**
   * 当前表单值的数据类型，支持配置 string、number、boolean、method、regexp、integer、float、array、object、enum、date、url、hex、email
   */
  type: _propTypes2.default.string,
  /**
   * 数组的方式配置当前表单校验规则，用于对一个表单执行多条校验规则
   */
  rules: _propTypes2.default.array
}, _class.defaultProps = {}, _class.contextTypes = {
  setter: _propTypes2.default.func,
  getter: _propTypes2.default.func,
  validate: _propTypes2.default.func,
  addValidate: _propTypes2.default.func,
  removeValidate: _propTypes2.default.func,
  getError: _propTypes2.default.func
}, _temp2);
exports.default = FormBinder;