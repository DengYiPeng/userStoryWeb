{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { log } from '../../util';\nimport Row from '../base/row';\nvar GroupListRow = (_temp = _class = function (_Row) {\n  _inherits(GroupListRow, _Row);\n\n  function GroupListRow() {\n    _classCallCheck(this, GroupListRow);\n\n    return _possibleConstructorReturn(this, _Row.apply(this, arguments));\n  }\n\n  GroupListRow.prototype.render = function render() {\n    var _classnames;\n    /* eslint-disable no-unused-vars*/\n\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        className = _props.className,\n        onClick = _props.onClick,\n        onMouseEnter = _props.onMouseEnter,\n        onMouseLeave = _props.onMouseLeave,\n        columns = _props.columns,\n        Cell = _props.Cell,\n        rowIndex = _props.rowIndex,\n        record = _props.record,\n        children = _props.children,\n        primaryKey = _props.primaryKey,\n        colGroup = _props.colGroup,\n        cellRef = _props.cellRef,\n        getCellProps = _props.getCellProps,\n        others = _objectWithoutProperties(_props, ['prefix', 'className', 'onClick', 'onMouseEnter', 'onMouseLeave', 'columns', 'Cell', 'rowIndex', 'record', 'children', 'primaryKey', 'colGroup', 'cellRef', 'getCellProps']);\n\n    var cls = classnames((_classnames = {}, _classnames[prefix + 'table-row'] = true, _classnames[className] = className, _classnames));\n    return React.createElement('table', _extends({\n      className: cls,\n      role: 'row'\n    }, others, {\n      onClick: this.onClick,\n      onMouseEnter: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave\n    }), colGroup, React.createElement('tbody', null, this.renderContent('header'), this.renderChildren(), this.renderContent('footer')));\n  };\n\n  GroupListRow.prototype.isChildrenSelection = function isChildrenSelection() {\n    return this.context.listHeader && this.context.listHeader.hasChildrenSelection;\n  };\n\n  GroupListRow.prototype.isSelection = function isSelection() {\n    return this.context.listHeader && this.context.listHeader.hasSelection;\n  };\n\n  GroupListRow.prototype.renderChildren = function renderChildren() {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        record = _props2.record,\n        primaryKey = _props2.primaryKey;\n    var children = record.children;\n\n    if (children) {\n      return children.map(function (child, index) {\n        var cells = _this2.renderCells(child);\n\n        if (_this2.isChildrenSelection()) {\n          if (!child[primaryKey]) {\n            log.warning('record.children should contains primaryKey when childrenSelection is true.');\n          }\n\n          return React.createElement('tr', {\n            key: child[primaryKey]\n          }, cells);\n        }\n\n        if (_this2.context.rowSelection) {\n          cells.shift();\n          cells[0] = React.cloneElement(cells[0], _extends({\n            colSpan: 2\n          }, cells[0].props));\n        }\n\n        return React.createElement('tr', {\n          key: index\n        }, cells);\n      });\n    }\n\n    return null;\n  };\n\n  GroupListRow.prototype.renderContent = function renderContent(type) {\n    var _props3 = this.props,\n        columns = _props3.columns,\n        prefix = _props3.prefix,\n        record = _props3.record,\n        rowIndex = _props3.rowIndex;\n    var cameType = type.charAt(0).toUpperCase() + type.substr(1);\n    var list = this.context['list' + cameType];\n    var listNode = void 0;\n\n    if (list) {\n      if (React.isValidElement(list.cell)) {\n        listNode = React.cloneElement(list.cell, {\n          record: record,\n          index: rowIndex\n        });\n      } else if (typeof list.cell === 'function') {\n        listNode = list.cell(record, rowIndex);\n      }\n\n      if (listNode) {\n        var cells = this.renderCells(record);\n\n        if (type === 'header' && this.context.rowSelection && this.isSelection()) {\n          cells = cells.slice(0, 1);\n          cells.push(React.createElement('td', {\n            colSpan: columns.length - 1,\n            key: 'listNode'\n          }, React.createElement('div', {\n            className: prefix + 'table-cell-wrapper'\n          }, listNode)));\n          listNode = React.createElement('tr', {\n            className: prefix + 'table-group-' + type\n          }, cells);\n        } else {\n          listNode = React.createElement('tr', {\n            className: prefix + 'table-group-' + type\n          }, React.createElement('td', {\n            colSpan: columns.length\n          }, React.createElement('div', {\n            className: prefix + 'table-cell-wrapper'\n          }, listNode)));\n        }\n      }\n    }\n\n    return listNode;\n  };\n\n  return GroupListRow;\n}(Row), _class.contextTypes = {\n  listHeader: PropTypes.any,\n  listFooter: PropTypes.any,\n  rowSelection: PropTypes.object,\n  notRenderCellIndex: PropTypes.array,\n  lockType: PropTypes.oneOf(['left', 'right'])\n}, _temp);\nexport { GroupListRow as default };","map":null,"metadata":{},"sourceType":"module"}