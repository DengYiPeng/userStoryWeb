{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Animate from '../../animate';\nimport Icon from '../../icon';\nimport Button from '../../button';\nimport { obj } from '../../util';\nvar Expand = Animate.Expand;\n/*Timeline.Item */\n\nvar TimelineItem = (_temp2 = _class = function (_Component) {\n  _inherits(TimelineItem, _Component);\n\n  function TimelineItem() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TimelineItem);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.beforeEnter = function () {\n      _this['timeline-item'].style['min-height'] = 'auto';\n    }, _this.beforeLeave = function () {\n      _this['timeline-item'].style['min-height'] = '48px'; // timeleft 节点最小高度\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  TimelineItem.prototype.toggleFold = function toggleFold(folderIndex) {\n    this.props.toggleFold(folderIndex);\n  };\n\n  TimelineItem.prototype.render = function render() {\n    var _classNames,\n        _classNames2,\n        _classNames3,\n        _classNames4,\n        _this2 = this;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        className = _props.className,\n        state = _props.state,\n        icon = _props.icon,\n        dot = _props.dot,\n        time = _props.time,\n        title = _props.title,\n        timeLeft = _props.timeLeft,\n        content = _props.content,\n        index = _props.index,\n        total = _props.total,\n        folderIndex = _props.folderIndex,\n        foldShow = _props.foldShow,\n        locale = _props.locale,\n        animation = _props.animation,\n        others = _objectWithoutProperties(_props, ['prefix', 'className', 'state', 'icon', 'dot', 'time', 'title', 'timeLeft', 'content', 'index', 'total', 'folderIndex', 'foldShow', 'locale', 'animation']);\n\n    var finalItemNode = dot ? dot : icon ? React.createElement('span', {\n      className: prefix + 'timeline-item-icon'\n    }, React.createElement(Icon, {\n      type: icon,\n      size: 'xs'\n    })) : React.createElement('span', {\n      className: prefix + 'timeline-item-dot'\n    });\n    var itemCls = classNames((_classNames = {}, _classNames[prefix + 'timeline-item'] = true, _classNames[prefix + 'timeline-item-first'] = index === 0, _classNames[prefix + 'timeline-item-last'] = index === total - 1, _classNames[prefix + 'timeline-item-' + state] = state, _classNames[prefix + 'timeline-item-folded'] = folderIndex, _classNames[prefix + 'timeline-item-unfolded'] = foldShow, _classNames[prefix + 'timeline-item-has-left-content'] = timeLeft, _classNames[className] = className, _classNames));\n    var folderCls = classNames((_classNames2 = {}, _classNames2[prefix + 'timeline-item-folder'] = true, _classNames2[prefix + 'timeline-item-has-left-content'] = timeLeft, _classNames2));\n    var itemNodeCls = classNames((_classNames3 = {}, _classNames3[prefix + 'timeline-item-node'] = true, _classNames3[prefix + 'timeline-item-node-custom'] = dot, _classNames3));\n    var dotTailCls = classNames((_classNames4 = {}, _classNames4[prefix + 'timeline-item-dot-tail'] = true, _classNames4[prefix + 'timeline-item-dot-tail-solid'] = foldShow, _classNames4[prefix + 'timeline-hide'] = index === total - 1 && foldShow, _classNames4));\n    var buttonProps = {\n      text: true,\n      size: 'small',\n      type: 'primary',\n      onClick: this.toggleFold.bind(this, folderIndex, total)\n    };\n    var timelineNode = folderIndex && foldShow || !folderIndex ? React.createElement('div', _extends({}, obj.pickOthers(TimelineItem.propTypes, others), {\n      className: itemCls,\n      ref: function ref(e) {\n        _this2['timeline-item'] = e;\n      }\n    }), React.createElement('div', {\n      className: prefix + 'timeline-item-left-content'\n    }, React.createElement('p', {\n      className: prefix + 'timeline-item-body'\n    }, timeLeft)), React.createElement('div', {\n      className: prefix + 'timeline-item-timeline'\n    }, React.createElement('div', {\n      className: prefix + 'timeline-item-tail'\n    }, React.createElement('i', null)), React.createElement('div', {\n      className: itemNodeCls\n    }, finalItemNode)), React.createElement('div', {\n      className: prefix + 'timeline-item-content'\n    }, React.createElement('div', {\n      className: prefix + 'timeline-item-title'\n    }, title), React.createElement('div', {\n      className: prefix + 'timeline-item-body'\n    }, content), React.createElement('div', {\n      className: prefix + 'timeline-item-time'\n    }, time))) : null;\n    return React.createElement('li', null, animation && folderIndex ? React.createElement(Expand, {\n      animationAppear: false,\n      beforeEnter: this.beforeEnter,\n      beforeLeave: this.beforeEnter,\n      afterEnter: this.beforeLeave\n    }, timelineNode) : timelineNode, folderIndex === index ? React.createElement('div', {\n      className: folderCls\n    }, React.createElement('div', {\n      className: dotTailCls\n    }), foldShow ? React.createElement(Button, buttonProps, locale.fold, React.createElement(Icon, {\n      type: 'arrow-up'\n    })) : React.createElement(Button, buttonProps, locale.expand, React.createElement(Icon, {\n      type: 'arrow-down'\n    }))) : null);\n  };\n\n  return TimelineItem;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  index: PropTypes.number,\n  total: PropTypes.number,\n  folderIndex: PropTypes.number,\n  foldShow: PropTypes.bool,\n\n  /**\n   * 节点状态\n   */\n  state: PropTypes.oneOf(['done', 'process', 'error', 'success']),\n\n  /**\n   * 图标\n   */\n  icon: PropTypes.string,\n\n  /**\n   * 自定义时间轴节点\n   */\n  dot: PropTypes.node,\n\n  /**\n   * 格式化后的时间\n   */\n  time: PropTypes.node,\n\n  /**\n   * 标题\n   */\n  title: PropTypes.node,\n\n  /**\n   * 左侧时间\n   */\n  timeLeft: PropTypes.node,\n\n  /**\n   * 右侧内容\n   */\n  content: PropTypes.node,\n  toggleFold: PropTypes.func,\n  className: PropTypes.string,\n  locale: PropTypes.object,\n\n  /**\n   * 动画\n   */\n  animation: PropTypes.bool\n}, _class.defaultProps = {\n  prefix: 'next-',\n  state: 'done',\n  toggleFold: function toggleFold() {},\n  animation: true\n}, _temp2);\nTimelineItem.displayName = 'TimelineItem';\nexport default TimelineItem;","map":null,"metadata":{},"sourceType":"module"}