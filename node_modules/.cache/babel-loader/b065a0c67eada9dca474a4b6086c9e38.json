{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Icon from '../icon';\nimport Button from '../button';\nimport Overlay from '../overlay';\nimport Menu from '../menu';\nimport ConfigProvider from '../config-provider';\nimport { dom, obj, func } from '../util';\nvar Popup = Overlay.Popup;\n/**\n * SplitButton\n */\n\nvar SplitButton = (_temp = _class = function (_React$Component) {\n  _inherits(SplitButton, _React$Component);\n\n  function SplitButton(props, context) {\n    _classCallCheck(this, SplitButton);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.selectMenuItem = function (keys) {\n      var _this$props;\n\n      for (var _len = arguments.length, others = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        others[_key - 1] = arguments[_key];\n      }\n\n      if (!('selectedKeys' in _this.props)) {\n        _this.setState({\n          selectedKeys: keys\n        });\n      }\n\n      (_this$props = _this.props).onSelect.apply(_this$props, [keys].concat(others));\n    };\n\n    _this.clickMenuItem = function (key) {\n      var _this$props2;\n\n      for (var _len2 = arguments.length, others = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        others[_key2 - 1] = arguments[_key2];\n      }\n\n      (_this$props2 = _this.props).onItemClick.apply(_this$props2, [key].concat(others));\n\n      _this.onVisibleChange(false, 'menuSelect');\n    };\n\n    _this.onPopupOpen = function () {\n      if (_this.props.autoWidth && _this.wrapper && _this.menu) {\n        dom.setStyle(_this.menu, {\n          width: _this.wrapper.offsetWidth\n        });\n      }\n    };\n\n    _this.onVisibleChange = function (visible, reason) {\n      if (!('visible' in _this.props)) {\n        _this.setState({\n          visible: visible\n        });\n      }\n\n      _this.props.onVisibleChange(visible, reason);\n    };\n\n    _this._menuRefHandler = function (ref) {\n      _this.menu = findDOMNode(ref);\n      var refFn = _this.props.menuProps.ref;\n\n      if (typeof refFn === 'function') {\n        refFn(ref);\n      }\n    };\n\n    _this._wrapperRefHandler = function (ref) {\n      _this.wrapper = findDOMNode(ref);\n    };\n\n    _this.state = {\n      selectedKeys: props.selectedKeys || props.defaultSelectedKeys,\n      visible: props.visible || props.defaultVisible\n    };\n    return _this;\n  }\n\n  SplitButton.prototype.componentDidMount = function componentDidMount() {\n    // 由于定位目标是 wrapper，如果弹层默认展开，wrapper 还未渲染，didMount 后强制再渲染一次，弹层重新定位\n    if (this.state.visible) {\n      this.forceUpdate();\n    }\n  };\n\n  SplitButton.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('visible' in nextProps) {\n      this.setState({\n        visible: nextProps.visible\n      });\n    }\n\n    if ('selectedKeys' in nextProps) {\n      this.setState({\n        selectedKeys: nextProps.selectedKeys\n      });\n    }\n  };\n\n  SplitButton.prototype.render = function render() {\n    var _classnames,\n        _classnames2,\n        _this2 = this;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        label = _props.label,\n        size = _props.size,\n        type = _props.type,\n        component = _props.component,\n        ghost = _props.ghost,\n        className = _props.className,\n        style = _props.style,\n        children = _props.children,\n        triggerProps = _props.triggerProps,\n        popupAlign = _props.popupAlign,\n        popupTriggerType = _props.popupTriggerType,\n        popupStyle = _props.popupStyle,\n        popupClassName = _props.popupClassName,\n        popupProps = _props.popupProps,\n        selectMode = _props.selectMode,\n        menuProps = _props.menuProps,\n        disabled = _props.disabled,\n        others = _objectWithoutProperties(_props, ['prefix', 'label', 'size', 'type', 'component', 'ghost', 'className', 'style', 'children', 'triggerProps', 'popupAlign', 'popupTriggerType', 'popupStyle', 'popupClassName', 'popupProps', 'selectMode', 'menuProps', 'disabled']);\n\n    var state = this.state;\n    var classNames = classnames((_classnames = {}, _classnames[prefix + 'split-btn'] = true, _classnames), className);\n    var sharedBtnProps = {\n      type: type,\n      size: size,\n      component: component,\n      ghost: ghost,\n      disabled: disabled\n    };\n    var triggerClassNames = classnames((_classnames2 = {}, _classnames2[prefix + 'split-btn-trigger'] = true, _classnames2[prefix + 'expand'] = state.visible, _classnames2.opened = state.visible, _classnames2));\n    var trigger = React.createElement(Button, _extends({}, triggerProps, sharedBtnProps, {\n      className: triggerClassNames\n    }), React.createElement(Icon, {\n      type: 'arrow-down'\n    }));\n    return React.createElement(Button.Group, _extends({}, obj.pickOthers(SplitButton.propTypes, others), {\n      className: classNames,\n      style: style,\n      size: size,\n      ref: this._wrapperRefHandler\n    }), React.createElement(Button, sharedBtnProps, label), React.createElement(Popup, _extends({}, popupProps, {\n      visible: state.visible,\n      onVisibleChange: this.onVisibleChange,\n      trigger: trigger,\n      triggerType: popupTriggerType,\n      align: popupAlign,\n      target: function target() {\n        return _this2.wrapper;\n      },\n      style: popupStyle,\n      shouldUpdatePosition: true,\n      className: popupClassName,\n      onOpen: this.onPopupOpen\n    }), React.createElement(Menu, _extends({}, menuProps, {\n      selectMode: selectMode,\n      selectedKeys: state.selectedKeys,\n      onSelect: this.selectMenuItem,\n      onItemClick: this.clickMenuItem,\n      ref: this._menuRefHandler\n    }), children)));\n  };\n\n  return SplitButton;\n}(React.Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  style: PropTypes.object,\n\n  /**\n   * 按钮的类型\n   */\n  type: PropTypes.oneOf(['normal', 'primary', 'secondary']),\n\n  /**\n   * 按钮组的尺寸\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 主按钮的文案\n   */\n  label: PropTypes.node,\n\n  /**\n   * 设置标签类型\n   */\n  component: PropTypes.oneOf(['button', 'a']),\n\n  /**\n   * 是否为幽灵按钮\n   */\n  ghost: PropTypes.oneOf(['light', 'dark', false, true]),\n\n  /**\n   * 默认激活的菜单项（用法同 Menu 非受控）\n   */\n  defaultSelectedKeys: PropTypes.array,\n\n  /**\n   * 激活的菜单项（用法同 Menu 受控）\n   */\n  selectedKeys: PropTypes.array,\n\n  /**\n   * 菜单的选择模式\n   */\n  selectMode: PropTypes.oneOf(['single', 'multiple']),\n\n  /**\n   * 选择菜单项时的回调，参考 Menu\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * 点击菜单项时的回调，参考 Menu\n   */\n  onItemClick: PropTypes.func,\n\n  /**\n   * 触发按钮的属性（支持 Button 的所有属性透传）\n   */\n  triggerProps: PropTypes.object,\n\n  /**\n   * 弹层菜单的宽度是否与按钮组一致\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * 弹层是否显示\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 弹层默认是否显示\n   */\n  defaultVisible: PropTypes.bool,\n\n  /**\n   * 弹层显示状态变化时的回调函数\n   * @param {Boolean} visible 弹层显示状态\n   * @param {String} reason 触发弹层显示和隐藏的来源\n   */\n  onVisibleChange: PropTypes.func,\n\n  /**\n   * 弹层的触发方式\n   */\n  popupTriggerType: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * 弹层对齐方式, 详情见Overlay align\n   */\n  popupAlign: PropTypes.string,\n\n  /**\n   * 弹层自定义样式\n   */\n  popupStyle: PropTypes.object,\n\n  /**\n   * 弹层自定义样式类\n   */\n  popupClassName: PropTypes.string,\n\n  /**\n   * 透传给弹层的属性\n   */\n  popupProps: PropTypes.object,\n\n  /**\n   * 透传给 Menu 的属性\n   */\n  menuProps: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.any\n}, _class.defaultProps = {\n  prefix: 'next-',\n  type: 'normal',\n  size: 'medium',\n  autoWidth: true,\n  popupTriggerType: 'click',\n  onVisibleChange: func.noop,\n  onItemClick: func.noop,\n  onSelect: func.noop,\n  defaultSelectedKeys: [],\n  menuProps: {}\n}, _temp);\nSplitButton.displayName = 'SplitButton';\nSplitButton.Item = Menu.Item;\nSplitButton.Divider = Menu.Divider;\nSplitButton.Group = Menu.Group;\nexport default ConfigProvider.config(SplitButton);","map":null,"metadata":{},"sourceType":"module"}