{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport RowComponent from './row';\nimport CellComponent from './cell';\n\nvar noop = function noop() {};\n\nvar Body = (_temp2 = _class = function (_React$Component) {\n  _inherits(Body, _React$Component);\n\n  function Body() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Body);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.getRowRef = function (i, row) {\n      _this.props.rowRef(i, row);\n    }, _this.onRowClick = function (record, index, e) {\n      _this.props.onRowClick(record, index, e);\n    }, _this.onRowMouseEnter = function (record, index, e) {\n      _this.props.onRowMouseEnter(record, index, e);\n    }, _this.onRowMouseLeave = function (record, index, e) {\n      _this.props.onRowMouseLeave(record, index, e);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Body.prototype.render = function render() {\n    var _this2 = this;\n    /*eslint-disable no-unused-vars */\n\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        className = _props.className,\n        children = _props.children,\n        Tag = _props.component,\n        colGroup = _props.colGroup,\n        loading = _props.loading,\n        emptyContent = _props.emptyContent,\n        components = _props.components,\n        getCellProps = _props.getCellProps,\n        primaryKey = _props.primaryKey,\n        getRowProps = _props.getRowProps,\n        dataSource = _props.dataSource,\n        cellRef = _props.cellRef,\n        columns = _props.columns,\n        rowRef = _props.rowRef,\n        onRowClick = _props.onRowClick,\n        onRowMouseEnter = _props.onRowMouseEnter,\n        onRowMouseLeave = _props.onRowMouseLeave,\n        locale = _props.locale,\n        pure = _props.pure,\n        others = _objectWithoutProperties(_props, ['prefix', 'className', 'children', 'component', 'colGroup', 'loading', 'emptyContent', 'components', 'getCellProps', 'primaryKey', 'getRowProps', 'dataSource', 'cellRef', 'columns', 'rowRef', 'onRowClick', 'onRowMouseEnter', 'onRowMouseLeave', 'locale', 'pure']);\n\n    var _components$Row = components.Row,\n        Row = _components$Row === undefined ? RowComponent : _components$Row,\n        _components$Cell = components.Cell,\n        Cell = _components$Cell === undefined ? CellComponent : _components$Cell;\n    var empty = loading ? React.createElement('span', null, '\\xA0') : emptyContent || locale.empty;\n    var rows = React.createElement('tr', null, React.createElement('td', {\n      colSpan: columns.length\n    }, React.createElement('div', {\n      className: prefix + 'table-empty'\n    }, empty)));\n\n    if (Tag === 'div') {\n      rows = React.createElement('table', {\n        role: 'table'\n      }, React.createElement('tbody', null, rows));\n    }\n\n    if (dataSource.length) {\n      rows = dataSource.map(function (record, index) {\n        var _classnames;\n\n        var rowProps = getRowProps(record, index) || {};\n        var rowClass = rowProps.className;\n        var className = classnames((_classnames = {\n          first: index === 0,\n          last: index === dataSource.length - 1\n        }, _classnames[rowClass] = rowClass, _classnames));\n        var expanded = record.__expanded ? 'expanded' : '';\n        return React.createElement(Row, _extends({\n          key: '' + (record[primaryKey] || index) + expanded\n        }, rowProps, {\n          ref: _this2.getRowRef.bind(_this2, index),\n          colGroup: colGroup,\n          columns: columns,\n          primaryKey: primaryKey,\n          record: record,\n          rowIndex: index,\n          prefix: prefix,\n          pure: pure,\n          cellRef: cellRef,\n          getCellProps: getCellProps,\n          className: className,\n          Cell: Cell,\n          onClick: _this2.onRowClick,\n          locale: locale,\n          onMouseEnter: _this2.onRowMouseEnter,\n          onMouseLeave: _this2.onRowMouseLeave\n        }));\n      });\n    }\n\n    return React.createElement(Tag, _extends({\n      className: className\n    }, others), rows, children);\n  };\n\n  return Body;\n}(React.Component), _class.propTypes = {\n  loading: PropTypes.bool,\n  emptyContent: PropTypes.any,\n  prefix: PropTypes.string,\n  pure: PropTypes.bool,\n  components: PropTypes.object,\n  getCellProps: PropTypes.func,\n  cellRef: PropTypes.func,\n  primaryKey: PropTypes.string,\n  getRowProps: PropTypes.func,\n  rowRef: PropTypes.func,\n  dataSource: PropTypes.array,\n  children: PropTypes.any,\n  className: PropTypes.string,\n  component: PropTypes.string,\n  colGroup: PropTypes.object,\n  columns: PropTypes.array,\n  onRowClick: PropTypes.func,\n  onRowMouseEnter: PropTypes.func,\n  onRowMouseLeave: PropTypes.func,\n  locale: PropTypes.object\n}, _class.defaultProps = {\n  loading: false,\n  prefix: 'next-',\n  components: {},\n  getCellProps: noop,\n  cellRef: noop,\n  primaryKey: 'id',\n  getRowProps: noop,\n  rowRef: noop,\n  dataSource: [],\n  component: 'tbody',\n  columns: []\n}, _temp2);\nBody.displayName = 'Body';\nexport { Body as default };","map":null,"metadata":{},"sourceType":"module"}