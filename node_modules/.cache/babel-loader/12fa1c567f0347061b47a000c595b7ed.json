{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Button from '../../button';\nimport Icon from '../../icon';\nimport ConfigProvider from '../../config-provider';\nimport zhCN from '../../locale/zh-cn';\nimport { func, obj } from '../../util';\nimport TransferPanel from '../view/transfer-panel';\nvar config = ConfigProvider.config;\nvar bindCtx = func.bindCtx;\nvar pickOthers = obj.pickOthers;\n/**\n * Transfer\n */\n\nvar Transfer = (_temp = _class = function (_Component) {\n  _inherits(Transfer, _Component);\n\n  function Transfer(props, context) {\n    _classCallCheck(this, Transfer);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    var value = props.value,\n        defaultValue = props.defaultValue,\n        defaultLeftChecked = props.defaultLeftChecked,\n        defaultRightChecked = props.defaultRightChecked,\n        dataSource = props.dataSource;\n\n    var _this$filterCheckedVa = _this.filterCheckedValue(_this.normalizeValue(defaultLeftChecked), _this.normalizeValue(defaultRightChecked), dataSource),\n        left = _this$filterCheckedVa.left,\n        right = _this$filterCheckedVa.right;\n\n    _this.state = {\n      value: _this.normalizeValue('value' in props ? value : defaultValue),\n      leftCheckedValue: left,\n      rightCheckedValue: right\n    };\n    _this.leftValue = _this.getLeftValue(dataSource, _this.state.value);\n    bindCtx(_this, ['handlePanelChange', 'handlePanelSort', 'handleMoveItem', 'handleSimpleMove', 'handleSimpleMoveAll']);\n    return _this;\n  }\n\n  Transfer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var st = {};\n    var newValue = void 0;\n\n    if ('value' in nextProps) {\n      var value = this.normalizeValue(nextProps.value);\n      st.value = value;\n      newValue = value;\n    } else {\n      newValue = this.state.value;\n    }\n\n    this.leftValue = this.getLeftValue(nextProps.dataSource, newValue);\n\n    var _filterCheckedValue = this.filterCheckedValue(this.state.leftCheckedValue, this.state.rightCheckedValue, nextProps.dataSource),\n        left = _filterCheckedValue.left,\n        right = _filterCheckedValue.right;\n\n    st.leftCheckedValue = left;\n    st.rightCheckedValue = right;\n    this.setState(st);\n  };\n\n  Transfer.prototype.normalizeValue = function normalizeValue(value) {\n    if (value) {\n      if (Array.isArray(value)) {\n        return value;\n      }\n\n      return [value];\n    }\n\n    return [];\n  };\n\n  Transfer.prototype.filterCheckedValue = function filterCheckedValue(left, right, dataSource) {\n    var result = {\n      left: [],\n      right: []\n    };\n\n    if (left.length || right.length) {\n      var value = dataSource.map(function (item) {\n        return item.value;\n      });\n      value.forEach(function (itemValue) {\n        if (left.indexOf(itemValue) > -1) {\n          result.left.push(itemValue);\n        } else if (right.indexOf(itemValue) > -1) {\n          result.right.push(itemValue);\n        }\n      });\n    }\n\n    return result;\n  };\n\n  Transfer.prototype.getLeftValue = function getLeftValue(dataSource, rightValue) {\n    return dataSource.map(function (item) {\n      return item.value;\n    }).filter(function (itemValue) {\n      return rightValue.indexOf(itemValue) === -1;\n    });\n  };\n\n  Transfer.prototype.groupDatasource = function groupDatasource(value, itemValues, dataSource) {\n    return value.reduce(function (ret, itemValue) {\n      var index = itemValues.indexOf(itemValue);\n\n      if (index > -1) {\n        ret.push(dataSource[index]);\n      }\n\n      return ret;\n    }, []);\n  };\n\n  Transfer.prototype.handlePanelChange = function handlePanelChange(position, value) {\n    var _setState;\n\n    var valuePropName = position === 'left' ? 'leftCheckedValue' : 'rightCheckedValue';\n    this.setState((_setState = {}, _setState[valuePropName] = value, _setState));\n  };\n\n  Transfer.prototype.handlePanelSort = function handlePanelSort(position, dragValue, referenceValue, dragGap) {\n    var _this2 = this;\n\n    var value = position === 'right' ? this.state.value : this.leftValue;\n    var currentIndex = value.indexOf(dragValue);\n    var referenceIndex = value.indexOf(referenceValue);\n    var expectIndex = dragGap === 'before' ? referenceIndex : referenceIndex + 1;\n\n    if (currentIndex === expectIndex) {\n      return;\n    }\n\n    value.splice(currentIndex, 1);\n\n    if (currentIndex < expectIndex) {\n      expectIndex = expectIndex - 1;\n    }\n\n    value.splice(expectIndex, 0, dragValue);\n    this.setState({\n      value: this.state.value\n    }, function () {\n      _this2.props.onSort(value, position);\n    });\n  };\n\n  Transfer.prototype.handleMoveItem = function handleMoveItem(direction) {\n    var _st;\n\n    var rightValue = void 0;\n    var leftValue = void 0;\n    var movedValue = void 0;\n    var valuePropName = void 0;\n    var _state = this.state,\n        value = _state.value,\n        leftCheckedValue = _state.leftCheckedValue,\n        rightCheckedValue = _state.rightCheckedValue;\n\n    if (direction === 'right') {\n      rightValue = leftCheckedValue.concat(value);\n      leftValue = this.leftValue.filter(function (itemValue) {\n        return leftCheckedValue.indexOf(itemValue) === -1;\n      });\n      movedValue = leftCheckedValue;\n      valuePropName = 'leftCheckedValue';\n    } else {\n      rightValue = value.filter(function (itemValue) {\n        return rightCheckedValue.indexOf(itemValue) === -1;\n      });\n      leftValue = rightCheckedValue.concat(this.leftValue);\n      movedValue = rightCheckedValue;\n      valuePropName = 'rightCheckedValue';\n    }\n\n    var st = (_st = {}, _st[valuePropName] = [], _st);\n    this.setValueState(st, rightValue, leftValue, movedValue, direction);\n  };\n\n  Transfer.prototype.handleSimpleMove = function handleSimpleMove(direction, v) {\n    var rightValue = void 0;\n    var leftValue = void 0;\n    var value = this.state.value;\n\n    if (direction === 'right') {\n      rightValue = [v].concat(value);\n      leftValue = this.leftValue.filter(function (itemValue) {\n        return itemValue !== v;\n      });\n    } else {\n      rightValue = value.filter(function (itemValue) {\n        return itemValue !== v;\n      });\n      leftValue = [v].concat(this.leftValue);\n    }\n\n    this.setValueState({}, rightValue, leftValue, [v], direction);\n  };\n\n  Transfer.prototype.handleSimpleMoveAll = function handleSimpleMoveAll(direction) {\n    var rightValue = void 0;\n    var leftValue = void 0;\n    var movedValue = void 0;\n    var dataSource = this.props.dataSource;\n    var value = this.state.value;\n    var disabledValue = dataSource.reduce(function (ret, item) {\n      if (item.disabled) {\n        ret.push(item.value);\n      }\n\n      return ret;\n    }, []);\n\n    if (direction === 'right') {\n      movedValue = this.leftValue.filter(function (itemValue) {\n        return disabledValue.indexOf(itemValue) === -1;\n      });\n      rightValue = movedValue.concat(value);\n      leftValue = this.leftValue.filter(function (itemValue) {\n        return disabledValue.indexOf(itemValue) > -1;\n      });\n    } else {\n      movedValue = value.filter(function (itemValue) {\n        return disabledValue.indexOf(itemValue) === -1;\n      });\n      rightValue = value.filter(function (itemValue) {\n        return disabledValue.indexOf(itemValue) > -1;\n      });\n      leftValue = movedValue.concat(this.leftValue);\n    }\n\n    this.setValueState({}, rightValue, leftValue, movedValue, direction);\n  };\n\n  Transfer.prototype.setValueState = function setValueState(st, rightValue, leftValue, movedValue, direction) {\n    var _this3 = this;\n\n    var dataSource = this.props.dataSource;\n\n    var callback = function callback() {\n      if ('onChange' in _this3.props) {\n        var itemValues = dataSource.map(function (item) {\n          return item.value;\n        });\n\n        var rightData = _this3.groupDatasource(rightValue, itemValues, dataSource);\n\n        var leftData = _this3.groupDatasource(leftValue, itemValues, dataSource);\n\n        var movedData = _this3.groupDatasource(movedValue, itemValues, dataSource);\n\n        _this3.props.onChange(rightValue, rightData, {\n          leftValue: leftValue,\n          leftData: leftData,\n          movedValue: movedValue,\n          movedData: movedData,\n          direction: direction\n        });\n      }\n    };\n\n    if (!('value' in this.props)) {\n      st.value = rightValue;\n      this.leftValue = leftValue;\n    }\n\n    if (Object.keys(st).length) {\n      this.setState(st, callback);\n    } else {\n      callback();\n    }\n  };\n\n  Transfer.prototype.renderCenter = function renderCenter() {\n    var _props = this.props,\n        prefix = _props.prefix,\n        mode = _props.mode,\n        operations = _props.operations,\n        disabled = _props.disabled,\n        leftDisabled = _props.leftDisabled,\n        rightDisabled = _props.rightDisabled;\n    var _state2 = this.state,\n        leftCheckedValue = _state2.leftCheckedValue,\n        rightCheckedValue = _state2.rightCheckedValue;\n    return React.createElement('div', {\n      className: prefix + 'transfer-operations'\n    }, mode === 'simple' ? React.createElement(Icon, {\n      className: prefix + 'transfer-move',\n      size: 'large',\n      type: 'switch'\n    }) : [React.createElement(Button, {\n      key: 'l2r',\n      className: prefix + 'transfer-operation',\n      type: leftCheckedValue.length ? 'primary' : 'normal',\n      disabled: leftDisabled || disabled || !leftCheckedValue.length,\n      onClick: this.handleMoveItem.bind(this, 'right')\n    }, operations[0]), React.createElement(Button, {\n      key: 'r2l',\n      className: prefix + 'transfer-operation',\n      type: rightCheckedValue.length ? 'primary' : 'normal',\n      disabled: rightDisabled || disabled || !rightCheckedValue.length,\n      onClick: this.handleMoveItem.bind(this, 'left')\n    }, operations[1])]);\n  };\n\n  Transfer.prototype.render = function render() {\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        mode = _props2.mode,\n        disabled = _props2.disabled,\n        className = _props2.className,\n        dataSource = _props2.dataSource,\n        locale = _props2.locale,\n        showSearch = _props2.showSearch,\n        filter = _props2.filter,\n        onSearch = _props2.onSearch,\n        leftDisabled = _props2.leftDisabled,\n        rightDisabled = _props2.rightDisabled,\n        searchPlaceholder = _props2.searchPlaceholder,\n        notFoundContent = _props2.notFoundContent,\n        titles = _props2.titles,\n        listClassName = _props2.listClassName,\n        listStyle = _props2.listStyle,\n        itemRender = _props2.itemRender,\n        sortable = _props2.sortable;\n    var _state3 = this.state,\n        value = _state3.value,\n        leftCheckedValue = _state3.leftCheckedValue,\n        rightCheckedValue = _state3.rightCheckedValue;\n    var itemValues = dataSource.map(function (item) {\n      return item.value;\n    });\n    var leftDatasource = this.groupDatasource(this.leftValue, itemValues, dataSource);\n    var rightDatasource = this.groupDatasource(value, itemValues, dataSource);\n    var panelProps = {\n      prefix: prefix,\n      mode: mode,\n      locale: locale,\n      showSearch: showSearch,\n      filter: filter,\n      onSearch: onSearch,\n      searchPlaceholder: searchPlaceholder,\n      notFoundContent: notFoundContent,\n      listClassName: listClassName,\n      listStyle: listStyle,\n      itemRender: itemRender,\n      onMove: this.handleSimpleMove,\n      onMoveAll: this.handleSimpleMoveAll,\n      onChange: this.handlePanelChange,\n      sortable: sortable,\n      onSort: this.handlePanelSort\n    };\n    var others = pickOthers(Object.keys(Transfer.propTypes), this.props);\n    return React.createElement('div', _extends({\n      className: cx(prefix + 'transfer', className)\n    }, others), React.createElement(TransferPanel, _extends({}, panelProps, {\n      position: 'left',\n      dataSource: leftDatasource,\n      disabled: leftDisabled || disabled,\n      value: leftCheckedValue,\n      title: titles[0]\n    })), this.renderCenter(), React.createElement(TransferPanel, _extends({}, panelProps, {\n      position: 'right',\n      dataSource: rightDatasource,\n      disabled: rightDisabled || disabled,\n      value: rightCheckedValue,\n      title: titles[1]\n    })));\n  };\n\n  return Transfer;\n}(Component), _class.contextTypes = {\n  prefix: PropTypes.string\n}, _class.propTypes = {\n  prefix: PropTypes.string,\n  pure: PropTypes.bool,\n  rtl: PropTypes.bool,\n  className: PropTypes.string,\n\n  /**\n   * 移动选项模式\n   */\n  mode: PropTypes.oneOf(['normal', 'simple']),\n\n  /**\n   * 数据源\n   */\n  dataSource: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * （用于受控）当前值\n   */\n  value: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * （用于非受控）初始值\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * 值发生改变的时候触发的回调函数\n   * @param {Array} value 右面板值\n   * @param {Array} data 右面板数据\n   * @param {Object} extra 额外参数\n   * @param {Array} extra.leftValue 左面板值\n   * @param {Array} extra.leftData 左面板数据\n   * @param {Array} extra.movedValue 发生移动的值\n   * @param {Object} extra.movedData 发生移动的数据\n   * @param {String} extra.direction 移动的方向，值为'left'或'right'\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 是否禁用左侧面板\n   */\n  leftDisabled: PropTypes.bool,\n\n  /**\n   * 是否禁用右侧面板\n   */\n  rightDisabled: PropTypes.bool,\n\n  /**\n   * 列表项渲染函数\n   * @param {Object} data 数据\n   * @return {ReactNode} 列表项内容\n   */\n  itemRender: PropTypes.func,\n\n  /**\n   * 是否显示搜索框\n   */\n  showSearch: PropTypes.bool,\n\n  /**\n   * 自定义搜索函数\n   * @param {String} searchedValue 搜索的内容\n   * @param {Object} data 数据\n   * @return {Boolean} 是否匹配到\n   * @default 根据 label 属性匹配\n   */\n  filter: PropTypes.func,\n\n  /**\n   * 搜索框输入时触发的回调函数\n   * @param {String} searchedValue 搜索的内容\n   * @param {String} position 搜索面板的位置\n   */\n  onSearch: PropTypes.func,\n\n  /**\n   * 搜索框占位符\n   */\n  searchPlaceholder: PropTypes.string,\n\n  /**\n   * 列表为空显示内容\n   */\n  notFoundContent: PropTypes.node,\n\n  /**\n   * 左右面板标题\n   */\n  titles: PropTypes.arrayOf(PropTypes.node),\n\n  /**\n   * 向右向左移动按钮显示内容\n   */\n  operations: PropTypes.arrayOf(PropTypes.node),\n\n  /**\n   * 左面板默认选中值\n   */\n  defaultLeftChecked: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * 右面板默认选中值\n   */\n  defaultRightChecked: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * 左右面板列表自定义样式类名\n   */\n  listClassName: PropTypes.string,\n\n  /**\n   * 左右面板列表自定义样式对象\n   */\n  listStyle: PropTypes.object,\n\n  /**\n   * 是否允许拖拽排序\n   */\n  sortable: PropTypes.bool,\n\n  /**\n   * 拖拽排序时触发的回调函数\n   * @param {Array} value 排序后的值\n   * @param {String} position 拖拽的面板位置，值为：left 或 right\n   */\n  onSort: PropTypes.func,\n\n  /**\n   * 自定义国际化文案对象\n   */\n  locale: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  pure: false,\n  mode: 'normal',\n  dataSource: [],\n  defaultValue: [],\n  disabled: false,\n  leftDisabled: false,\n  rightDisabled: false,\n  itemRender: function itemRender(data) {\n    return data.label;\n  },\n  showSearch: false,\n  filter: function filter(searchedValue, data) {\n    var labelString = '';\n\n    var loop = function loop(arg) {\n      if (React.isValidElement(arg) && arg.props.children) {\n        React.Children.forEach(arg.props.children, loop);\n      } else if (typeof arg === 'string') {\n        labelString += arg;\n      }\n    };\n\n    loop(data.label);\n\n    if (labelString.length >= searchedValue.length && labelString.indexOf(searchedValue) > -1) {\n      return true;\n    }\n\n    return false;\n  },\n  onSearch: function onSearch() {},\n  notFoundContent: 'Not Found',\n  titles: [],\n  // eslint-disable-next-line\n  operations: [React.createElement(Icon, {\n    type: 'arrow-right'\n  }), React.createElement(Icon, {\n    type: 'arrow-left'\n  })],\n  defaultLeftChecked: [],\n  defaultRightChecked: [],\n  sortable: false,\n  onSort: function onSort() {},\n  locale: zhCN.Transfer\n}, _temp);\nTransfer.displayName = 'Transfer';\nexport default config(Transfer);","map":null,"metadata":{},"sourceType":"module"}