{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { func, obj, KEYCODE } from '../util';\nimport Input from '../input';\nimport Base from './base';\nvar bindCtx = func.bindCtx,\n    noop = func.noop;\n/**\n * Select.AutoComplete\n */\n\nvar AutoComplete = (_temp = _class = function (_Base) {\n  _inherits(AutoComplete, _Base);\n\n  function AutoComplete(props) {\n    _classCallCheck(this, AutoComplete);\n\n    var _this = _possibleConstructorReturn(this, _Base.call(this, props));\n\n    _this.handleChange = function (value, proxy, item) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          readOnly = _this$props.readOnly,\n          filterLocal = _this$props.filterLocal;\n\n      if (disabled || readOnly) {\n        return false;\n      }\n\n      var actionType = typeof proxy === 'string' ? proxy : 'change';\n      _this.isInputing = actionType === 'change';\n\n      if (filterLocal) {\n        _this.setState({\n          dataSource: _this.dataStore.updateByKey(value)\n        });\n\n        _this.shouldControlPopup(_this.props, actionType);\n\n        _this.setFirstHightLightKeyForMenu();\n      } // 非受控模式清空内部数据\n\n\n      if (!('value' in _this.props)) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      _this.props.onChange(value, actionType, item);\n\n      if (actionType === 'itemClick' || actionType === 'enter') {\n        // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理\n        _this.setVisible(false, actionType);\n      }\n    };\n\n    _this.isAutoComplete = true;\n    _this.isInputing = false;\n    bindCtx(_this, ['handleTriggerKeyDown', 'handleMenuSelect', 'handleItemClick']);\n    return _this;\n  }\n\n  AutoComplete.prototype.componentWillMount = function componentWillMount() {\n    this.dataStore.setOptions({\n      key: this.state.value\n    });\n\n    _Base.prototype.componentWillMount.call(this);\n  };\n\n  AutoComplete.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      this.dataStore.setOptions({\n        key: nextProps.value\n      });\n    }\n\n    _Base.prototype.componentWillReceiveProps.call(this, nextProps); // remote dataSource and focused\n    // 因为autoComplete没有下拉数据不展示，搜索并且有数据了需要自动展示下拉\n\n\n    if (!nextProps.filterLocal && this.isInputing) {\n      this.shouldControlPopup(nextProps, 'update');\n    }\n\n    if (!nextProps.filterLocal && !nextProps.popupContent) {\n      this.setFirstHightLightKeyForMenu();\n    }\n  };\n\n  AutoComplete.prototype.componentWillUpdate = function componentWillUpdate() {\n    if (this.hasClear()) {\n      var inputNode = ReactDOM.findDOMNode(this.inputRef);\n\n      if (inputNode) {\n        this.clearNode = inputNode.querySelector('.' + this.props.prefix + 'input-control');\n      }\n    }\n  };\n\n  AutoComplete.prototype.shouldControlPopup = function shouldControlPopup() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    var type = arguments[1];\n    var hasPopup = props.popupContent || this.dataStore.getMenuDS().length;\n\n    if (hasPopup) {\n      this.setVisible(true, type);\n    } else {\n      this.setVisible(false, type);\n    }\n  };\n\n  AutoComplete.prototype.handleMenuSelect = function handleMenuSelect(keys) {\n    var key = keys[0];\n\n    if (this.state.value === keys[0]) {\n      return this.setVisible(false, 'itemClick');\n    }\n\n    var mapDS = this.dataStore.getMapDS();\n\n    if (key in mapDS) {\n      var item = mapDS[key];\n      this.handleSelectEvent(key, item, 'itemClick');\n    }\n  };\n\n  AutoComplete.prototype.handleItemClick = function handleItemClick() {\n    this.setVisible(false, 'itemClick');\n  };\n\n  AutoComplete.prototype.handleSelectEvent = function handleSelectEvent(key, item, triggerType) {\n    var value = item && item[this.props.fillProps] || key;\n\n    if (triggerType === 'itemClick' || triggerType === 'enter') {\n      // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理\n      this.setVisible(false, triggerType);\n    }\n\n    this.handleChange(value, triggerType, item);\n  };\n\n  AutoComplete.prototype.handleVisibleChange = function handleVisibleChange(visible, type) {\n    if (!('visible' in this.props) && visible && !this.props.popupContent && !this.dataStore.getMenuDS().length) {\n      return;\n    }\n\n    this.setVisible(visible, type);\n  };\n\n  AutoComplete.prototype.beforeClose = function beforeClose() {\n    this.isInputing = false;\n  };\n  /**\n   * Handle trigger keydown event\n   * @param {Event} e\n   */\n\n\n  AutoComplete.prototype.handleTriggerKeyDown = function handleTriggerKeyDown(e) {\n    var _props = this.props,\n        popupContent = _props.popupContent,\n        onToggleHighlightItem = _props.onToggleHighlightItem,\n        onKeyDown = _props.onKeyDown;\n\n    if (popupContent) {\n      return onKeyDown(e);\n    }\n\n    switch (e.keyCode) {\n      case KEYCODE.UP:\n        e.preventDefault();\n        onToggleHighlightItem(this.toggleHighlightItem(-1, e), 'up');\n        break;\n\n      case KEYCODE.DOWN:\n        e.preventDefault();\n        onToggleHighlightItem(this.toggleHighlightItem(1, e), 'down');\n        break;\n\n      case KEYCODE.ENTER:\n        e.preventDefault();\n        this.chooseHighlightItem(e);\n        break;\n\n      case KEYCODE.SPACE:\n        // 防止 Popup 监听到 space key 触发 onVisibleChange\n        e.stopPropagation();\n        break;\n\n      case KEYCODE.ESC:\n        e.preventDefault();\n        this.state.visible && this.setVisible(false, 'esc');\n        break;\n\n      default:\n        break;\n    }\n\n    onKeyDown(e);\n  }; // 回车 选择高亮的 item\n\n\n  AutoComplete.prototype.chooseHighlightItem = function chooseHighlightItem() {\n    if (!this.state.visible) {\n      return false;\n    }\n\n    var highlightKey = this.state.highlightKey;\n    var highlightItem = this.dataStore.getEnableDS().find(function (item) {\n      return highlightKey === '' + item.value;\n    });\n\n    if (highlightItem) {\n      this.handleSelectEvent(highlightKey, highlightItem, 'enter');\n    }\n  };\n\n  AutoComplete.prototype.hasClear = function hasClear() {\n    var _props2 = this.props,\n        hasClear = _props2.hasClear,\n        readOnly = _props2.readOnly,\n        disabled = _props2.disabled;\n    var value = this.state.value;\n    return value && hasClear && !readOnly && !disabled;\n  };\n  /**\n   * 选择器\n   * @override\n   * @param {object} props\n   */\n\n\n  AutoComplete.prototype.renderSelect = function renderSelect() {\n    var _classNames;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    var placeholder = props.placeholder,\n        size = props.size,\n        prefix = props.prefix,\n        className = props.className,\n        style = props.style,\n        label = props.label,\n        readOnly = props.readOnly,\n        disabled = props.disabled,\n        highlightHolder = props.highlightHolder,\n        locale = props.locale,\n        hasClear = props.hasClear,\n        state = props.state,\n        rtl = props.rtl;\n    var others = obj.pickOthers(AutoComplete.propTypes, props);\n    var othersData = obj.pickAttrsWith(others, 'data-');\n    var value = this.state.value;\n    var visible = this.state.visible; // // 下拉箭头\n    // const arrowNode = this.renderArrowNode(props, () => {\n    //     this.focusInput();\n    //     this.setVisible(!this.state.visible);\n    // });\n    // trigger className\n\n    var triggerClazz = classNames([prefix + 'select', prefix + 'select-auto-complete', prefix + 'size-' + size, className], (_classNames = {}, _classNames[prefix + 'active'] = visible, _classNames[prefix + 'disabled'] = disabled, _classNames)); // highlightKey into placeholder\n    // compatible with selectPlaceHolder. TODO: removed in 2.0 version\n\n    var _placeholder = placeholder || locale.autoCompletePlaceholder || locale.autoCompletePlaceHolder;\n\n    if (highlightHolder && visible) {\n      _placeholder = this.state.highlightKey || _placeholder;\n    } // Input props\n\n\n    var _inputProps = _extends({}, obj.pickOthers(othersData, others), {\n      state: state,\n      ref: this.saveInputRef,\n      hasClear: hasClear,\n      value: value || '',\n      size: size,\n      disabled: disabled,\n      readOnly: readOnly,\n      placeholder: _placeholder,\n      label: label,\n      // extra: arrowNode,\n      onChange: this.handleChange,\n      onKeyDown: this.handleTriggerKeyDown\n    });\n\n    return React.createElement('span', _extends({}, othersData, {\n      className: triggerClazz,\n      style: style,\n      dir: rtl ? 'rtl' : undefined,\n      ref: this.saveSelectRef,\n      onClick: this.focusInput\n    }), React.createElement(Input, _extends({}, _inputProps, {\n      role: 'combobox',\n      'aria-autocomplete': 'list',\n      'aria-disabled': disabled,\n      'aria-expanded': this.state.visible\n    })));\n  };\n\n  AutoComplete.prototype.render = function render() {\n    var _this2 = this;\n\n    if (this.hasClear()) {\n      // clear 按钮点击后，会在 dom 结构中被删除掉，需要将其额外设置为安全节点，防止触发弹层的显示或隐藏\n      var safeNode = this.props.popupProps.safeNode || [];\n      var safeNodes = Array.isArray(safeNode) ? safeNode : [safeNode];\n      safeNodes.push(function () {\n        return _this2.clearNode;\n      });\n      this.props.popupProps.safeNode = safeNodes;\n    }\n\n    return _Base.prototype.render.call(this, _extends({}, this.props, {\n      canCloseByTrigger: false\n    }));\n  };\n\n  return AutoComplete;\n}(Base), _class.propTypes = _extends({}, Base.propTypes, {\n  /**\n   * 当前值，用于受控模式\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * 初始化的默认值\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Select发生改变时触发的回调\n   * @param {*} value 选中的值\n   * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'change'\n   * @param {*} item 选中的值的对象数据\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 传入的数据源，可以动态渲染子项\n   */\n  dataSource: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.any,\n    disabled: PropTypes.bool,\n    children: PropTypes.array\n  }), PropTypes.string])),\n\n  /**\n   * 填充到选择框里的值的 key\b\b，默认是 value\n   */\n  fillProps: PropTypes.string,\n\n  /**\n   * 渲染 MenuItem 内容的方法\n   * @param {Object} item 渲染节点的 item\n   * @return {ReactNode} item node\n   */\n  itemRender: PropTypes.func,\n  // input keydown\n  onKeyDown: PropTypes.func,\n  // 是否将当前高亮的选项作为 placeholder\n  highlightHolder: PropTypes.bool,\n  style: PropTypes.object\n}), _class.defaultProps = _extends({}, Base.defaultProps, {\n  onKeyDown: noop,\n  fillProps: 'value'\n}), _temp);\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}