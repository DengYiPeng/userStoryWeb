{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _initialiseProps;\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { obj, env } from '../util';\nimport Base from './base';\n\nfunction onNextFrame(cb) {\n  if (window.requestAnimationFrame) {\n    return window.requestAnimationFrame(cb);\n  }\n\n  return window.setTimeout(cb, 1);\n}\n\nfunction clearNextFrameAction(nextFrameId) {\n  if (window.cancelAnimationFrame) {\n    window.cancelAnimationFrame(nextFrameId);\n  } else {\n    window.clearTimeout(nextFrameId);\n  }\n}\n\nvar hiddenStyle = {\n  visibility: 'hidden',\n  position: 'absolute',\n  zIndex: '-1000',\n  top: '-1000px',\n  overflowY: 'hidden',\n  left: 0,\n  right: 0\n};\n/**\n * Input.TextArea\n * @order 2\n */\n\nvar TextArea = (_temp = _class = function (_Base) {\n  _inherits(TextArea, _Base);\n\n  function TextArea(props) {\n    _classCallCheck(this, TextArea);\n\n    var _this = _possibleConstructorReturn(this, _Base.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var value = void 0;\n\n    if ('value' in props) {\n      value = props.value;\n    } else {\n      value = props.defaultValue;\n    }\n\n    _this.state = {\n      value: typeof value === 'undefined' ? '' : value\n    };\n    return _this;\n  }\n\n  TextArea.prototype.componentDidMount = function componentDidMount() {\n    var autoHeight = this.props.autoHeight;\n\n    if (autoHeight) {\n      if ((typeof autoHeight === 'undefined' ? 'undefined' : _typeof(autoHeight)) === 'object') {\n        /* eslint-disable react/no-did-mount-set-state */\n        this.setState(this._getMinMaxHeight(autoHeight, this.state.value));\n      } else {\n        this.setState({\n          height: this._getHeight(this.state.value),\n          overflowY: 'hidden'\n        });\n      }\n    }\n  };\n\n  TextArea.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    _Base.prototype.componentWillReceiveProps.call(this, nextProps);\n\n    if (this.props.autoHeight && this.props.value !== nextProps.value) {\n      this._resizeTextArea(nextProps.value);\n    }\n  };\n\n  TextArea.prototype._getMinMaxHeight = function _getMinMaxHeight(_ref, value) {\n    var minRows = _ref.minRows,\n        maxRows = _ref.maxRows;\n    var node = ReactDOM.findDOMNode(this.helpRef);\n    node.setAttribute('rows', minRows);\n    var minHeight = node.clientHeight;\n    node.setAttribute('rows', maxRows);\n    var maxHeight = node.clientHeight;\n    node.setAttribute('rows', '1');\n\n    var height = this._getHeight(value);\n\n    return {\n      minHeight: minHeight,\n      maxHeight: maxHeight,\n      height: height,\n      overflowY: height <= maxHeight ? 'hidden' : undefined\n    };\n  };\n\n  TextArea.prototype._getHeight = function _getHeight(value) {\n    var node = ReactDOM.findDOMNode(this.helpRef);\n    node.value = value;\n    return node.scrollHeight;\n  };\n\n  TextArea.prototype.ieHack = function ieHack(value) {\n    // Fix: textarea dit not support maxLength in ie9\n\n    /* istanbul ignore if */\n    if (env.ieVersion && this.props.maxLength && this.props.multiple) {\n      var maxLength = parseInt(this.props.maxLength);\n      var len = this.getValueLength(value, true);\n\n      if (len > maxLength && this.props.cutString) {\n        value = value.replace(/\\n/g, '\\n\\n');\n        value = value.substr(0, maxLength);\n        value = value.replace(/\\n\\n/g, '\\n');\n      }\n    }\n\n    this.props.autoHeight && this._resizeTextArea(value);\n    return value;\n  }; // `Enter` was considered to be two chars in chrome , but one char in ie.\n  // so we make all `Enter` to be two chars\n\n\n  TextArea.prototype.getValueLength = function getValueLength(value) {\n    var nv = '' + value;\n    var strLen = this.props.getValueLength(nv);\n\n    if (typeof strLen !== 'number') {\n      strLen = nv.length;\n    }\n    /* istanbul ignore if */\n\n\n    if (env.ieVersion) {\n      return strLen + nv.split('\\n').length - 1;\n    }\n\n    return strLen;\n  };\n\n  TextArea.prototype.saveTextAreaRef = function saveTextAreaRef(textArea) {\n    this.inputRef = textArea;\n  };\n\n  TextArea.prototype.saveHelpRef = function saveHelpRef(ref) {\n    this.helpRef = ref;\n  };\n\n  TextArea.prototype.render = function render() {\n    var _classNames;\n\n    var _props = this.props,\n        rows = _props.rows,\n        style = _props.style,\n        className = _props.className,\n        autoHeight = _props.autoHeight,\n        prefix = _props.prefix,\n        rtl = _props.rtl;\n    var cls = classNames(this.getClass(), (_classNames = {}, _classNames[prefix + 'input-textarea'] = true, _classNames[className] = !!className, _classNames));\n    var props = this.getProps(); // custom data attributes are assigned to the top parent node\n    // data-类自定义数据属性分配到顶层node节点\n\n    var dataProps = obj.pickAttrsWith(this.props, 'data-'); // Custom props are transparently transmitted to the core input node by default\n    // 自定义属性默认透传到核心node节点：input\n\n    var others = obj.pickOthers(_extends({}, dataProps, TextArea.propTypes), this.props);\n\n    var textareStyle = _extends({}, props.style, {\n      height: this.state.height,\n      minHeight: this.state.minHeight,\n      maxHeight: this.state.maxHeight,\n      overflowY: this.state.overflowY\n    });\n\n    var wrapStyle = autoHeight ? _extends({}, style, {\n      position: 'relative'\n    }) : style;\n    return React.createElement('span', _extends({\n      className: cls,\n      style: wrapStyle,\n      dir: rtl ? 'rtl' : undefined\n    }, dataProps), React.createElement('textarea', _extends({}, others, props, {\n      'data-real': true,\n      rows: rows,\n      style: textareStyle,\n      ref: this.saveRef.bind(this),\n      onKeyDown: this.onKeyDown.bind(this)\n    })), autoHeight ? React.createElement('textarea', {\n      'data-fake': true,\n      ref: this.saveHelpRef.bind(this),\n      style: _extends({}, props.style, hiddenStyle),\n      rows: '1'\n    }) : null, this.renderControl());\n  };\n\n  return TextArea;\n}(Base), _class.propTypes = _extends({}, Base.propTypes, {\n  /**\n   * 状态\n   * @enumdesc 错误\n   */\n  state: PropTypes.oneOf(['error']),\n\n  /**\n   * 自动高度 true / {minRows: 2, maxRows: 4}\n   */\n  autoHeight: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n\n  /**\n   * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)\n   */\n  rows: PropTypes.number\n}), _class.defaultProps = _extends({}, Base.defaultProps, {\n  rows: 4,\n  autoHeight: false\n}), _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this._resizeTextArea = function (value) {\n    if (_this2.nextFrameActionId) {\n      clearNextFrameAction(_this2.nextFrameActionId);\n    }\n\n    _this2.nextFrameActionId = onNextFrame(function () {\n      var height = _this2._getHeight(value);\n\n      var maxHeight = _this2.state.maxHeight ? _this2.state.maxHeight : Infinity;\n\n      _this2.setState({\n        height: _this2._getHeight(value),\n        overflowY: height <= maxHeight ? 'hidden' : undefined\n      });\n    });\n  };\n}, _temp);\nexport { TextArea as default };","map":null,"metadata":{},"sourceType":"module"}