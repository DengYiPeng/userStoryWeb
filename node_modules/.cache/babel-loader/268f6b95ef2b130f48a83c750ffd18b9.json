{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport { Component, Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { func, dom, events } from '../util';\nimport position from './utils/position';\nimport findNode from './utils/find-node';\nvar noop = func.noop,\n    bindCtx = func.bindCtx;\nvar getStyle = dom.getStyle;\nvar place = position.place;\nvar Position = (_temp = _class = function (_Component) {\n  _inherits(Position, _Component);\n\n  function Position(props) {\n    _classCallCheck(this, Position);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    bindCtx(_this, ['handleResize']);\n    return _this;\n  }\n\n  Position.prototype.componentDidMount = function componentDidMount() {\n    this.setPosition();\n\n    if (this.props.needListenResize) {\n      events.on(window, 'resize', this.handleResize);\n    }\n  };\n\n  Position.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('align' in nextProps && nextProps.align !== this.props.align || nextProps.shouldUpdatePosition) {\n      this.shouldUpdatePosition = true;\n    }\n  };\n\n  Position.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.shouldUpdatePosition) {\n      this.setPosition();\n      this.shouldUpdatePosition = false;\n    }\n  };\n\n  Position.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.needListenResize) {\n      events.off(window, 'resize', this.handleResize);\n    }\n\n    clearTimeout(this.resizeTimeout);\n  };\n\n  Position.prototype.setPosition = function setPosition() {\n    var _props = this.props,\n        align = _props.align,\n        offset = _props.offset,\n        beforePosition = _props.beforePosition,\n        onPosition = _props.onPosition,\n        needAdjust = _props.needAdjust,\n        rtl = _props.rtl;\n    beforePosition();\n    var contentNode = this.getContentNode();\n    var targetNode = this.getTargetNode();\n\n    if (contentNode && targetNode) {\n      var resultAlign = place({\n        pinElement: contentNode,\n        baseElement: targetNode,\n        align: align,\n        offset: offset,\n        needAdjust: needAdjust,\n        isRtl: rtl\n      });\n      var top = getStyle(contentNode, 'top');\n      var left = getStyle(contentNode, 'left');\n      onPosition({\n        align: resultAlign.split(' '),\n        top: top,\n        left: left\n      }, contentNode);\n    }\n  };\n\n  Position.prototype.getContentNode = function getContentNode() {\n    return findDOMNode(this);\n  };\n\n  Position.prototype.getTargetNode = function getTargetNode() {\n    var target = this.props.target;\n    return target === position.VIEWPORT ? position.VIEWPORT : findNode(target, this.props);\n  };\n\n  Position.prototype.handleResize = function handleResize() {\n    var _this2 = this;\n\n    clearTimeout(this.resizeTimeout);\n    this.resizeTimeout = setTimeout(function () {\n      _this2.setPosition();\n    }, 200);\n  };\n\n  Position.prototype.render = function render() {\n    return Children.only(this.props.children);\n  };\n\n  return Position;\n}(Component), _class.VIEWPORT = position.VIEWPORT, _class.propTypes = {\n  children: PropTypes.node,\n  target: PropTypes.any,\n  align: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  offset: PropTypes.array,\n  beforePosition: PropTypes.func,\n  onPosition: PropTypes.func,\n  needAdjust: PropTypes.bool,\n  needListenResize: PropTypes.bool,\n  shouldUpdatePosition: PropTypes.bool,\n  rtl: PropTypes.bool\n}, _class.defaultProps = {\n  align: 'tl bl',\n  offset: [0, 0],\n  beforePosition: noop,\n  onPosition: noop,\n  needAdjust: true,\n  needListenResize: true,\n  shouldUpdatePosition: false,\n  rtl: false\n}, _temp);\nPosition.displayName = 'Position';\nexport { Position as default };","map":null,"metadata":{},"sourceType":"module"}