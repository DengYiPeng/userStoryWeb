{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport classnames from 'classnames';\nimport { obj, events, func } from '../util';\nimport ConfigProvider from '../config-provider';\nimport { getScroll, getRect, getNodeHeight } from './util';\n/** Affix */\n\nvar Affix = (_temp = _class = function (_React$Component) {\n  _inherits(Affix, _React$Component);\n\n  function Affix(props, context) {\n    _classCallCheck(this, Affix);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.updatePosition = function () {\n      _this._updateNodePosition();\n    };\n\n    _this._updateNodePosition = function () {\n      var _this$props = _this.props,\n          container = _this$props.container,\n          useAbsolute = _this$props.useAbsolute;\n      var affixContainer = container();\n\n      if (!affixContainer) {\n        return false;\n      }\n\n      var containerScrollTop = getScroll(affixContainer, true); // 容器在垂直位置上的滚动 offset\n\n      var affixOffset = _this._getOffset(_this.affixNode, affixContainer); // 目标节点当前相对于容器的 offset\n\n\n      var containerHeight = getNodeHeight(affixContainer); // 容器的高度\n\n      var affixHeight = _this.affixNode.offsetHeight;\n      var containerRect = getRect(affixContainer);\n      var affixChildHeight = _this.affixChildNode.offsetHeight;\n      var affixMode = _this.affixMode;\n      var affixStyle = {\n        width: affixOffset.width\n      };\n      var containerStyle = {\n        width: affixOffset.width,\n        height: affixChildHeight\n      };\n\n      if (affixMode.top && containerScrollTop > affixOffset.top - affixMode.offset) {\n        // affix top\n        if (useAbsolute) {\n          affixStyle.position = 'absolute';\n          affixStyle.top = containerScrollTop - (affixOffset.top - affixMode.offset);\n          containerStyle.position = 'relative';\n        } else {\n          affixStyle.position = 'fixed';\n          affixStyle.top = affixMode.offset + containerRect.top;\n        }\n\n        _this._setAffixStyle(affixStyle, true);\n\n        _this._setContainerStyle(containerStyle);\n      } else if (affixMode.bottom && containerScrollTop < affixOffset.top + affixHeight + affixMode.offset - containerHeight) {\n        // affix bottom\n        affixStyle.height = affixHeight;\n\n        if (useAbsolute) {\n          affixStyle.position = 'absolute';\n          affixStyle.top = containerScrollTop - (affixOffset.top + affixHeight + affixMode.offset - containerHeight);\n          containerStyle.position = 'relative';\n        } else {\n          affixStyle.position = 'fixed';\n          affixStyle.bottom = affixMode.offset;\n        }\n\n        _this._setAffixStyle(affixStyle, true);\n\n        _this._setContainerStyle(containerStyle);\n      } else {\n        _this._setAffixStyle(null);\n\n        _this._setContainerStyle(null);\n      }\n    };\n\n    _this._affixNodeRefHandler = function (ref) {\n      _this.affixNode = findDOMNode(ref);\n    };\n\n    _this._affixChildNodeRefHandler = function (ref) {\n      _this.affixChildNode = findDOMNode(ref);\n    };\n\n    _this.state = {\n      style: null,\n      containerStyle: null\n    };\n    _this.affixMode = _this._getAffixMode(props);\n    return _this;\n  }\n\n  Affix.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var container = this.props.container;\n\n    this._updateNodePosition(); // wait for parent rendered\n\n\n    this.timeout = setTimeout(function () {\n      _this2._setEventHandlerForContainer(container);\n    });\n  };\n\n  Affix.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n\n    var container = this.props.container;\n\n    this._removeEventHandlerForContainer(container);\n  };\n\n  Affix.prototype._setEventHandlerForContainer = function _setEventHandlerForContainer(getContainer) {\n    var container = getContainer();\n\n    if (!container) {\n      return;\n    }\n\n    events.on(container, 'scroll', this._updateNodePosition, false);\n    events.on(container, 'resize', this._updateNodePosition, false);\n  };\n\n  Affix.prototype._removeEventHandlerForContainer = function _removeEventHandlerForContainer(getContainer) {\n    var container = getContainer();\n\n    if (container) {\n      events.off(container, 'scroll', this._updateNodePosition);\n      events.off(container, 'resize', this._updateNodePosition);\n    }\n  };\n\n  Affix.prototype._getAffixMode = function _getAffixMode() {\n    var _props = this.props,\n        offsetTop = _props.offsetTop,\n        offsetBottom = _props.offsetBottom;\n    var affixMode = {\n      top: false,\n      bottom: false,\n      offset: 0\n    };\n\n    if (typeof offsetTop !== 'number' && typeof offsetBottom !== 'number') {\n      // set default\n      affixMode.top = true;\n    } else if (typeof offsetTop === 'number') {\n      affixMode.top = true;\n      affixMode.offset = offsetTop;\n    } else if (typeof offsetBottom === 'number') {\n      affixMode.bottom = true;\n      affixMode.offset = offsetBottom;\n    }\n\n    return affixMode;\n  };\n\n  Affix.prototype._setAffixStyle = function _setAffixStyle(affixStyle) {\n    var affixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (obj.shallowEqual(affixStyle, this.state.style)) {\n      return;\n    }\n\n    this.setState({\n      style: affixStyle\n    });\n    var onAffix = this.props.onAffix;\n\n    if (affixed) {\n      onAffix(true);\n    } else if (!affixStyle) {\n      onAffix(false);\n    }\n  };\n\n  Affix.prototype._setContainerStyle = function _setContainerStyle(containerStyle) {\n    if (obj.shallowEqual(containerStyle, this.state.containerStyle)) {\n      return;\n    }\n\n    this.setState({\n      containerStyle: containerStyle\n    });\n  };\n\n  Affix.prototype._getOffset = function _getOffset(affixNode, affixContainer) {\n    var affixRect = affixNode.getBoundingClientRect(); // affix 元素 相对浏览器窗口的位置\n\n    var containerRect = getRect(affixContainer); // affix 容器 相对浏览器窗口的位置\n\n    var containerScrollTop = getScroll(affixContainer, true);\n    var containerScrollLeft = getScroll(affixContainer, false);\n    return {\n      top: affixRect.top - containerRect.top + containerScrollTop,\n      left: affixRect.left - containerRect.left + containerScrollLeft,\n      width: affixRect.width,\n      height: affixRect.height\n    };\n  };\n\n  Affix.prototype.render = function render() {\n    var _classnames;\n\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        className = _props2.className,\n        style = _props2.style,\n        children = _props2.children;\n    var state = this.state;\n    var classNames = classnames((_classnames = {}, _classnames[prefix + 'affix'] = state.style, _classnames[prefix + 'affix-top'] = !state.style && this.affixMode.top, _classnames[prefix + 'affix-bottom'] = !state.style && this.affixMode.bottom, _classnames[className] = className, _classnames));\n\n    var combinedStyle = _extends({}, state.containerStyle, style);\n\n    return React.createElement('div', {\n      ref: this._affixNodeRefHandler,\n      style: combinedStyle\n    }, React.createElement('div', {\n      ref: this._affixChildNodeRefHandler,\n      className: classNames,\n      style: state.style\n    }, children));\n  };\n\n  return Affix;\n}(React.Component), _class.propTypes = {\n  prefix: PropTypes.string,\n\n  /**\n   * 设置 Affix 需要监听滚动事件的容器元素\n   * @return {ReactElement} 目标容器元素的实例\n   */\n  container: PropTypes.func,\n\n  /**\n   * 距离窗口顶部达到指定偏移量后触发\n   */\n  offsetTop: PropTypes.number,\n\n  /**\n   * 距离窗口底部达到制定偏移量后触发\n   */\n  offsetBottom: PropTypes.number,\n\n  /**\n   * 当元素的样式发生固钉样式变化时触发的回调函数\n   * @param {Boolean} 元素是否被固钉\n   */\n  onAffix: PropTypes.func,\n\n  /**\n   * 是否启用绝对布局实现 affix\n   * @param {Boolean} 是否启用绝对布局\n   */\n  useAbsolute: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.any\n}, _class.defaultProps = {\n  prefix: 'next-',\n  container: function container() {\n    return window;\n  },\n  onAffix: func.noop\n}, _temp);\nAffix.displayName = 'Affix';\nexport default ConfigProvider.config(Affix);","map":null,"metadata":{},"sourceType":"module"}