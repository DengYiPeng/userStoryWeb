{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Animate from '../animate';\nimport { support, dom } from '../util';\n/**\n * badge sup component\n */\n// util::getDigitArray\n\nvar getDigitArray = function getDigitArray(num) {\n  return num.toString().split('').reverse().map(function (i) {\n    return parseInt(i, 10);\n  });\n};\n\nvar Sup = (_temp = _class = function (_Component) {\n  _inherits(Sup, _Component); // 单排可滚动的数字列表\n\n\n  Sup.renderDigit = function renderDigit(prefix, digit, key) {\n    var children = [];\n\n    for (var i = 0; i < 30; i++) {\n      children.push(React.createElement('span', {\n        key: i\n      }, i % 10));\n    }\n\n    return React.createElement('span', {\n      className: prefix + 'badge-scroll-number-only',\n      key: key\n    }, children);\n  }; // 可滚动数字组\n\n\n  Sup.renderNumber = function renderNumber(prefix, count) {\n    return getDigitArray(count).map(function (digit, i) {\n      return Sup.renderDigit(prefix, digit, i);\n    }).reverse();\n  };\n\n  function Sup(props) {\n    _classCallCheck(this, Sup); // 记录最后一次显示的数字\n\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.lastCount = 0;\n    return _this;\n  }\n\n  Sup.prototype.componentDidMount = function componentDidMount() {\n    this.computeStyle(true);\n  };\n\n  Sup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('count' in nextProps) {\n      if (nextProps.count !== this.props.count) {\n        this.lastCount = this.props.count;\n      }\n    }\n  };\n\n  Sup.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    if (prevProps.count !== this.props.count) {\n      this.computeStyle(false); // NOTE why called `computeStyle` again after 300ms ?\n\n      setTimeout(function () {\n        _this2.computeStyle(true, true);\n      }, 300);\n    }\n  };\n\n  Sup.prototype.computeStyle = function computeStyle(removeTransition, revert) {\n    var _this3 = this;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        count = _props.count,\n        overflowCount = _props.overflowCount;\n    var supNode = this.refs.sup;\n\n    if (supNode && dom.hasClass(supNode, prefix + 'badge-count')) {\n      var scrollNums = supNode.querySelectorAll('.' + prefix + 'badge-scroll-number-only');\n\n      if (scrollNums.length) {\n        var height = window.getComputedStyle(supNode).height;\n        scrollNums = [].slice.call(scrollNums, 0).reverse();\n        getDigitArray(count).forEach(function (digit, i) {\n          var position = _this3.getPositionByDigit(digit, i, revert);\n\n          var transformTo = -position * parseInt(height, 10);\n          removeTransition = removeTransition || typeof getDigitArray(_this3.lastCount)[i] === 'undefined' || _this3.lastCount > overflowCount || _this3.lastCount <= 0;\n          var scrollStyle = support.animation ? {\n            transition: removeTransition ? 'none' : 'transform .3s cubic-bezier(.645, .045, .355, 1), -webkit-transform .3s cubic-bezier(.645, .045, .355, 1)',\n            WebkitTransform: 'translateY(' + transformTo + 'px)',\n            transform: 'translateY(' + transformTo + 'px)',\n            height: height,\n            lineHeight: height\n          } : {\n            top: transformTo + 'px',\n            height: height,\n            lineHeight: height\n          };\n          Object.keys(scrollStyle).forEach(function (key) {\n            scrollNums[i].style[key] = scrollStyle[key];\n          });\n        });\n      }\n    }\n  };\n\n  Sup.prototype.getPositionByDigit = function getPositionByDigit(digit, i, revert) {\n    if (revert) {\n      return 10 + digit;\n    }\n\n    var lastDigit = getDigitArray(this.lastCount)[i] || 0;\n\n    if (this.props.count > this.lastCount) {\n      return (digit >= lastDigit ? 10 : 20) + digit;\n    }\n\n    if (digit <= lastDigit) {\n      return 10 + digit;\n    }\n\n    return digit;\n  };\n\n  Sup.prototype.render = function render() {\n    var _classNames;\n\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        count = _props2.count,\n        overflowCount = _props2.overflowCount,\n        dot = _props2.dot,\n        style = _props2.style,\n        content = _props2.content;\n    var supClasses = classNames(prefix + 'badge-scroll-number', (_classNames = {}, _classNames[prefix + 'badge-count'] = !!count, _classNames[prefix + 'badge-dot'] = dot, _classNames[prefix + 'badge-custom'] = !!content, _classNames));\n    var children = null;\n    var show = dot || count > 0 || content;\n\n    if (count > 0) {\n      var realCount = overflowCount > 0 && count > overflowCount ? overflowCount + '+' : count;\n      children = isNaN(realCount) ? realCount : Sup.renderNumber(prefix, count);\n    } else if (content) {\n      children = content;\n    }\n\n    var animation = {\n      appear: 'zoomIn',\n      enter: 'zoomIn',\n      leave: 'zoomOut'\n    };\n    var wrapper = support.animation ? React.createElement(Animate, {\n      animation: animation\n    }) : React.createElement('span', null);\n    var element = show ? React.createElement('sup', {\n      ref: 'sup',\n      className: supClasses,\n      style: style\n    }, children) : null;\n    return React.cloneElement(wrapper, {}, element);\n  };\n\n  return Sup;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  count: PropTypes.number,\n  overflowCount: PropTypes.number,\n  content: PropTypes.node,\n  dot: PropTypes.bool,\n  style: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  count: 0,\n  overflowCount: 99,\n  dot: false\n}, _temp);\nSup.displayName = 'Sup';\nexport { Sup as default };","map":null,"metadata":{},"sourceType":"module"}