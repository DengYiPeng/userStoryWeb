{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Icon from '../../icon';\nimport Overlay from '../../overlay';\nimport Menu from '../../menu';\nimport Animate from '../../animate';\nimport { events } from '../../util';\nimport { triggerEvents, getOffsetLT, getOffsetWH, isTransformSupported } from './utils';\n\nvar noop = function noop() {};\n\nvar floatRight = {\n  float: 'right',\n  position: 'relative',\n  zIndex: 1\n};\nvar Popup = Overlay.Popup;\nvar Nav = (_temp = _class = function (_React$Component) {\n  _inherits(Nav, _React$Component);\n\n  function Nav(props, context) {\n    _classCallCheck(this, Nav);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.removeTab = function (key, e) {\n      e && e.stopPropagation(); // stop bubble, so that it won't trigger upstream listener\n\n      _this.props.onClose(key);\n    };\n\n    _this.defaultTabTemplateRender = function (key, _ref) {\n      var prefix = _ref.prefix,\n          title = _ref.title,\n          closeable = _ref.closeable;\n      var tail = closeable ? React.createElement(Icon, {\n        type: 'close',\n        onClick: function onClick(e) {\n          return _this.removeTab(key, e);\n        },\n        className: prefix + 'tabs-tab-close'\n      }) : null;\n      return React.createElement('div', {\n        className: _this.props.prefix + 'tabs-tab-inner'\n      }, title, tail);\n    };\n\n    _this.scrollToActiveTab = function () {\n      if (!_this.activeTab || _this.props.excessMode !== 'slide') {\n        return;\n      }\n\n      var activeTabWH = getOffsetWH(_this.activeTab);\n      var wrapperWH = getOffsetWH(_this.wrapper);\n      var activeTabOffset = getOffsetLT(_this.activeTab);\n      var wrapperOffset = getOffsetLT(_this.wrapper);\n      var target = _this.offset;\n\n      if (activeTabOffset >= wrapperOffset + wrapperWH || activeTabOffset + activeTabWH <= wrapperOffset) {\n        return;\n      } // if (activeTabOffset < wrapperOffset) {\n      //     target += wrapperOffset - activeTabOffset;\n      //     this.setOffset(target);\n      // }\n\n\n      if (wrapperOffset + wrapperWH < activeTabOffset + activeTabWH) {\n        target -= activeTabOffset + activeTabWH - (wrapperOffset + wrapperWH);\n\n        _this.setOffset(target, true, false);\n      }\n    };\n\n    _this.onPrevClick = function () {\n      var wrapperWH = getOffsetWH(_this.wrapper);\n\n      _this.setOffset(_this.offset + wrapperWH);\n    };\n\n    _this.onNextClick = function () {\n      var wrapperWH = getOffsetWH(_this.wrapper);\n\n      _this.setOffset(_this.offset - wrapperWH);\n    };\n\n    _this.onSelectMenuItem = function (keys) {\n      var _this$props = _this.props,\n          onTriggerEvent = _this$props.onTriggerEvent,\n          triggerType = _this$props.triggerType;\n      onTriggerEvent(triggerType, keys[0]);\n    };\n\n    _this.onWindowResized = function () {\n      if (_this.updateTimer) {\n        clearTimeout(_this.updateTimer);\n      }\n\n      _this.updateTimer = setTimeout(function () {\n        _this.setSlideBtn();\n\n        _this.getDropdownItems(_this.props);\n      }, 100);\n    };\n\n    _this.navRefHandler = function (ref) {\n      _this.nav = findDOMNode(ref);\n    };\n\n    _this.wrapperRefHandler = function (ref) {\n      _this.wrapper = ref;\n    };\n\n    _this.navbarRefHandler = function (ref) {\n      _this.navbar = ref;\n    };\n\n    _this.activeTabRefHandler = function (ref) {\n      _this.activeTab = ref;\n    };\n\n    _this.state = {\n      next: false,\n      prev: false,\n      dropdownTabs: []\n    };\n    _this.offset = 0;\n    return _this;\n  }\n\n  Nav.prototype.componentDidMount = function componentDidMount() {\n    this.setSlideBtn();\n    this.getDropdownItems(this.props);\n    events.on(window, 'resize', this.onWindowResized);\n  };\n\n  Nav.prototype.componentDidUpdate = function componentDidUpdate() {\n    var ctx = this; // 此处通过延时处理，屏蔽动画带来的定位不准确问题（由于要支持ie9，因此无法使用transitionend）\n\n    clearTimeout(ctx.scrollTimer);\n    ctx.scrollTimer = setTimeout(function () {\n      ctx.scrollToActiveTab();\n    }, 400);\n    clearTimeout(ctx.slideTimer);\n    ctx.slideTimer = setTimeout(function () {\n      ctx.setSlideBtn();\n    }, 200);\n  };\n\n  Nav.prototype.componentWillUnmount = function componentWillUnmount() {\n    events.off(window, 'resize', this.onWindowResized);\n  };\n  /**\n   * The key method about move\n   * @param {number} target position to slide to\n   * @param {bool} checkSlideBtn need to check the slide button status or not\n   * @param {bool} setActive need to check the active status or not\n   */\n\n\n  Nav.prototype.setOffset = function setOffset(target) {\n    var checkSlideBtn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var setActive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var tabPosition = this.props.tabPosition;\n    var navWH = getOffsetWH(this.nav, tabPosition);\n    var wrapperWH = getOffsetWH(this.wrapper); // target should not be great than 0, i.e. should not over slide to left-most\n\n    target = target >= 0 ? 0 : target; // when need to slide, should not slide to exceed right-most\n\n    target = target <= wrapperWH - navWH && wrapperWH - navWH < 0 ? wrapperWH - navWH : target;\n    var relativeOffset = target - this.offset;\n\n    if (this.activeTab && this.props.excessMode === 'slide' && setActive) {\n      var activeTabWH = getOffsetWH(this.activeTab);\n      var activeTabOffset = getOffsetLT(this.activeTab) + relativeOffset;\n      var wrapperOffset = getOffsetLT(this.wrapper);\n\n      if (wrapperOffset + wrapperWH < activeTabOffset + activeTabWH && activeTabOffset < wrapperOffset + wrapperWH) {\n        target -= activeTabOffset + activeTabWH - (wrapperOffset + wrapperWH);\n      }\n    }\n\n    if (this.offset !== target) {\n      this.offset = target;\n      var navOffset = {};\n      var navStyle = this.nav.style;\n      var canTransform = isTransformSupported(navStyle);\n\n      if (tabPosition === 'left' || tabPosition === 'right') {\n        navOffset = canTransform ? {\n          value: 'translate3d(0, ' + target + 'px, 0)'\n        } : {\n          name: 'top',\n          value: target + 'px'\n        };\n      } else {\n        navOffset = canTransform ? {\n          value: 'translate3d(' + target + 'px, 0, 0)'\n        } : {\n          name: 'left',\n          value: target + 'px'\n        };\n      }\n\n      if (canTransform) {\n        _extends(navStyle, {\n          transform: navOffset.value,\n          webkitTransform: navOffset.value,\n          mozTransform: navOffset.value\n        });\n      } else {\n        navStyle[navOffset.name] = navOffset.value;\n      }\n\n      if (checkSlideBtn) {\n        this.setSlideBtn();\n      }\n    }\n  };\n\n  Nav.prototype.setSlideBtn = function setSlideBtn() {\n    var tabPosition = this.props.tabPosition; // TEMP: 这里会受 Animate 影响，re-render 过程中 this.nav 实际上指向的是上次的 tabList 元素，建议暂时关闭 animation 解决\n\n    var navWH = getOffsetWH(this.nav, tabPosition);\n    var wrapperWH = getOffsetWH(this.wrapper, tabPosition);\n    var navbarWH = getOffsetWH(this.navbar, tabPosition);\n    var minOffset = wrapperWH - navWH;\n    var next = void 0;\n    var prev = void 0;\n\n    if (minOffset >= 0 || navWH <= navbarWH) {\n      next = false;\n      prev = false;\n      this.setOffset(0, false); // no need to check slide again since this call is invoked from inside setSlideBtn\n    } else if (this.offset < 0 && this.offset <= minOffset) {\n      prev = true;\n      next = false;\n    } else if (this.offset >= 0) {\n      prev = false;\n      next = true;\n    } else {\n      prev = true;\n      next = true;\n    }\n\n    if (next !== this.state.next || prev !== this.state.prev) {\n      this.setState({\n        next: next,\n        prev: prev\n      });\n    }\n  };\n\n  Nav.prototype.getDropdownItems = function getDropdownItems(_ref2) {\n    var excessMode = _ref2.excessMode,\n        tabs = _ref2.tabs;\n\n    if (excessMode !== 'dropdown') {\n      return;\n    }\n\n    var wrapperWidth = this.wrapper.offsetWidth;\n    var childNodes = this.nav.childNodes;\n    var index = void 0;\n    var tabsWidth = 0;\n\n    for (index = 0; index < tabs.length; index++) {\n      tabsWidth += childNodes[index].offsetWidth;\n\n      if (tabsWidth > wrapperWidth) {\n        break;\n      }\n    }\n\n    if (index > 1) {\n      index = index - 1;\n      this.setState({\n        dropdownTabs: tabs.slice(index)\n      });\n    }\n  };\n\n  Nav.prototype.renderTabList = function renderTabList(props) {\n    var _this2 = this;\n\n    var prefix = props.prefix,\n        tabs = props.tabs,\n        activeKey = props.activeKey,\n        tabRender = props.tabRender;\n    var tabTemplateFn = tabRender || this.defaultTabTemplateRender;\n    var rst = [];\n    React.Children.forEach(tabs, function (child) {\n      var _classnames;\n\n      var _child$props = child.props,\n          disabled = _child$props.disabled,\n          className = _child$props.className,\n          onClick = _child$props.onClick,\n          onMouseEnter = _child$props.onMouseEnter,\n          onMouseLeave = _child$props.onMouseLeave,\n          style = _child$props.style;\n      /*eslint-disable eqeqeq*/\n\n      var active = activeKey == child.key;\n      var cls = classnames((_classnames = {}, _classnames[prefix + 'tabs-tab'] = true, _classnames.disabled = disabled, _classnames.active = active, _classnames), className);\n      var events = {};\n\n      if (!disabled) {\n        events = {\n          onClick: _this2.onNavItemClick.bind(_this2, child.key, onClick),\n          onMouseEnter: _this2.onNavItemMouseEnter.bind(_this2, child.key, onMouseEnter),\n          onMouseLeave: _this2.onNavItemMouseLeave.bind(_this2, child.key, onMouseLeave)\n        };\n      }\n\n      rst.push(React.createElement('div', _extends({\n        role: 'tab',\n        key: child.key,\n        ref: active ? _this2.activeTabRefHandler : null,\n        'aria-disabled': disabled ? 'true' : 'false',\n        'aria-selected': active ? 'true' : 'false',\n        className: cls,\n        style: style\n      }, events), tabTemplateFn(child.key, child.props)));\n    });\n    return rst;\n  };\n\n  Nav.prototype.onNavItemClick = function onNavItemClick(key, callback, e) {\n    this.props.onTriggerEvent(triggerEvents.CLICK, key);\n\n    if (callback) {\n      callback(key, e);\n    }\n  };\n\n  Nav.prototype.onNavItemMouseEnter = function onNavItemMouseEnter(key, callback, e) {\n    this.props.onTriggerEvent(triggerEvents.HOVER, key);\n\n    if (callback) {\n      callback(key, e);\n    }\n  };\n\n  Nav.prototype.onNavItemMouseLeave = function onNavItemMouseLeave(key, callback, e) {\n    if (callback) {\n      callback(key, e);\n    }\n  };\n\n  Nav.prototype.renderDropdownTabs = function renderDropdownTabs() {\n    var _this3 = this;\n\n    var tabs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    if (!tabs.length) {\n      return null;\n    }\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        activeKey = _props.activeKey,\n        triggerType = _props.triggerType,\n        popupProps = _props.popupProps;\n    var trigger = React.createElement('button', {\n      className: prefix + 'tabs-btn-down'\n    }, React.createElement(Icon, {\n      type: 'arrow-down'\n    }));\n    return React.createElement(Popup, _extends({\n      triggerType: triggerType,\n      trigger: trigger,\n      container: function container(target) {\n        return target.parentNode;\n      }\n    }, popupProps), React.createElement(Menu, {\n      selectedKeys: [activeKey],\n      onSelect: this.onSelectMenuItem,\n      selectMode: 'single'\n    }, tabs.map(function (tab) {\n      var _tab$props = tab.props,\n          disabled = _tab$props.disabled,\n          onClick = _tab$props.onClick,\n          onMouseEnter = _tab$props.onMouseEnter,\n          onMouseLeave = _tab$props.onMouseLeave;\n      var events = {};\n\n      if (!disabled) {\n        events = {\n          onClick: _this3.onNavItemClick.bind(_this3, tab.key, onClick),\n          onMouseEnter: _this3.onNavItemMouseEnter.bind(_this3, tab.key, onMouseEnter),\n          onMouseLeave: _this3.onNavItemMouseLeave.bind(_this3, tab.key, onMouseLeave)\n        };\n      }\n\n      return React.createElement(Menu.Item, _extends({\n        key: tab.key\n      }, events), tab.props.title);\n    })));\n  };\n\n  Nav.prototype.render = function render() {\n    var _classnames4, _classnames5;\n\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        tabPosition = _props2.tabPosition,\n        excessMode = _props2.excessMode,\n        extra = _props2.extra,\n        onKeyDown = _props2.onKeyDown,\n        animation = _props2.animation,\n        style = _props2.style,\n        className = _props2.className;\n    var state = this.state;\n    var nextButton = void 0;\n    var prevButton = void 0;\n    var restButton = void 0;\n    var showNextPrev = state.prev || state.next;\n\n    if (excessMode === 'dropdown' && state.next && state.dropdownTabs.length) {\n      restButton = this.renderDropdownTabs(state.dropdownTabs);\n      prevButton = null;\n      nextButton = null;\n    } else if (showNextPrev) {\n      var _classnames2, _classnames3;\n\n      var prevBtnCls = classnames((_classnames2 = {}, _classnames2[prefix + 'tabs-btn-prev'] = 1, _classnames2.disabled = !state.prev, _classnames2));\n      var nextBtnCls = classnames((_classnames3 = {}, _classnames3[prefix + 'tabs-btn-next'] = 1, _classnames3.disabled = !state.next, _classnames3));\n      prevButton = React.createElement('button', {\n        onClick: state.prev ? this.onPrevClick : noop,\n        className: prevBtnCls\n      }, React.createElement(Icon, {\n        type: 'arrow-left'\n      }));\n      nextButton = React.createElement('button', {\n        onClick: state.next ? this.onNextClick : noop,\n        className: nextBtnCls\n      }, React.createElement(Icon, {\n        type: 'arrow-right'\n      }));\n      restButton = null;\n    } else {\n      nextButton = null;\n      prevButton = null;\n      restButton = null;\n    }\n\n    var containerCls = classnames((_classnames4 = {}, _classnames4[prefix + 'tabs-nav-container'] = true, _classnames4[prefix + 'tabs-nav-container-scrolling'] = showNextPrev, _classnames4));\n    var navCls = prefix + 'tabs-nav';\n    var tabList = this.renderTabList(this.props);\n    var container = React.createElement('div', {\n      className: containerCls,\n      key: 'nav-container'\n    }, React.createElement('div', {\n      className: prefix + 'tabs-nav-wrap',\n      ref: this.wrapperRefHandler\n    }, React.createElement('div', {\n      className: prefix + 'tabs-nav-scroll'\n    }, animation ? React.createElement(Animate, {\n      className: navCls,\n      animation: navCls,\n      singleMode: false,\n      ref: this.navRefHandler\n    }, tabList) : React.createElement('div', {\n      className: navCls,\n      ref: this.navRefHandler\n    }, tabList))), prevButton, nextButton, restButton);\n    var navChildren = [container];\n\n    if (extra) {\n      var extraProps = {\n        className: prefix + 'tabs-nav-extra',\n        key: 'nav-extra'\n      };\n\n      if (tabPosition === 'top' || tabPosition === 'bottom') {\n        navChildren.unshift(React.createElement('div', _extends({}, extraProps, {\n          style: floatRight\n        }), extra));\n      } else {\n        navChildren.push(React.createElement('div', extraProps, extra));\n      }\n    }\n\n    var navbarCls = classnames((_classnames5 = {}, _classnames5[prefix + 'tabs-bar'] = true, _classnames5), className);\n    return React.createElement('div', {\n      role: 'tablist',\n      className: navbarCls,\n      style: style,\n      onKeyDown: onKeyDown,\n      tabIndex: '0',\n      ref: this.navbarRefHandler\n    }, navChildren);\n  };\n\n  return Nav;\n}(React.Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  animation: PropTypes.bool,\n  activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  excessMode: PropTypes.string,\n  extra: PropTypes.any,\n  tabs: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  tabPosition: PropTypes.string,\n  tabRender: PropTypes.func,\n  triggerType: PropTypes.string,\n  popupProps: PropTypes.object,\n  onTriggerEvent: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onClose: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string\n}, _temp);\nNav.displayName = 'Nav';\nexport default Nav;","map":null,"metadata":{},"sourceType":"module"}