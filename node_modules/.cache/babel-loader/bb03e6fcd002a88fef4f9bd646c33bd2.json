{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Overlay from '../overlay';\nimport BalloonInner from './inner';\nimport { normalMap as alignMap } from './alignMap';\nvar Popup = Overlay.Popup;\n/** Balloon.Tooltip */\n\nvar Tooltip = (_temp = _class = function (_React$Component) {\n  _inherits(Tooltip, _React$Component);\n\n  function Tooltip(props, context) {\n    _classCallCheck(this, Tooltip);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this._contentId = props.id;\n    return _this;\n  }\n\n  Tooltip.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        align = _props.align,\n        style = _props.style,\n        prefix = _props.prefix,\n        trigger = _props.trigger,\n        children = _props.children,\n        popupContainer = _props.popupContainer,\n        popupProps = _props.popupProps,\n        popupClassName = _props.popupClassName,\n        popupStyle = _props.popupStyle,\n        triggerType = _props.triggerType,\n        rtl = _props.rtl,\n        others = _objectWithoutProperties(_props, ['className', 'align', 'style', 'prefix', 'trigger', 'children', 'popupContainer', 'popupProps', 'popupClassName', 'popupStyle', 'triggerType', 'rtl']);\n\n    var trOrigin = 'trOrigin';\n\n    if (rtl) {\n      others.rtl = true;\n      trOrigin = 'rtlTrOrigin';\n    }\n\n    var transformOrigin = alignMap[align][trOrigin];\n    var _offset = alignMap[align].offset;\n\n    var _style = _extends({\n      transformOrigin: transformOrigin\n    }, style);\n\n    var content = React.createElement(BalloonInner, _extends({}, others, {\n      id: this._contentId,\n      prefix: prefix,\n      closable: false,\n      isTooltip: true,\n      className: className,\n      style: _style,\n      align: align,\n      rtl: rtl\n    }), children);\n    var triggerProps = {};\n    triggerProps['aria-describedby'] = this._contentId;\n    triggerProps.tabIndex = '0';\n    var newTrigger = React.cloneElement(trigger, triggerProps);\n    return React.createElement(Popup, _extends({}, popupProps, {\n      container: popupContainer,\n      trigger: this._contentId ? newTrigger : trigger,\n      triggerType: triggerType,\n      align: alignMap[align].align,\n      offset: _offset,\n      delay: 0,\n      className: popupClassName,\n      style: popupStyle,\n      rtl: rtl,\n      shouldUpdatePosition: true\n    }), content);\n  };\n\n  return Tooltip;\n}(React.Component), _class.propTypes = {\n  /**\n   * 样式类名的品牌前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 自定义类名\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * tooltip的内容\n   */\n  children: PropTypes.any,\n\n  /**\n   * 弹出层位置\n   * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下 及其 两两组合\n   */\n  align: PropTypes.oneOf(['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb']),\n\n  /**\n   * 触发元素\n   */\n  trigger: PropTypes.any,\n\n  /**\n   * 触发行为\n   * 鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']\n   */\n  triggerType: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * 弹层组件style，透传给Popup\n   */\n  popupStyle: PropTypes.object,\n\n  /**\n   * 弹层组件className，透传给Popup\n   */\n  popupClassName: PropTypes.string,\n\n  /**\n   * 弹层组件属性，透传给Popup\n   */\n  popupProps: PropTypes.object,\n\n  /**\n   * 是否pure render\n   */\n  pure: PropTypes.bool,\n\n  /**\n   * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。\n   */\n  popupContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\n   * 弹层id, 传入值才会支持无障碍\n   */\n  id: PropTypes.string\n}, _class.defaultProps = {\n  triggerType: 'hover',\n  prefix: 'next-',\n  align: 'b',\n  trigger: React.createElement('span', null)\n}, _temp);\nTooltip.displayName = 'Tooltip';\nexport { Tooltip as default };","map":null,"metadata":{},"sourceType":"module"}