{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from '../../icon';\nimport { func, obj, KEYCODE } from '../../util';\nimport Item from './item';\nvar bindCtx = func.bindCtx;\nvar pickOthers = obj.pickOthers;\n/**\n * Menu.Item\n * @order 0\n */\n\nvar SelectableItem = (_temp = _class = function (_Component) {\n  _inherits(SelectableItem, _Component);\n\n  function SelectableItem(props) {\n    _classCallCheck(this, SelectableItem);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    bindCtx(_this, ['handleKeyDown', 'handleClick']);\n    return _this;\n  }\n\n  SelectableItem.prototype.getSelected = function getSelected() {\n    var _props = this.props,\n        _key = _props._key,\n        root = _props.root,\n        selected = _props.selected;\n    var selectMode = root.props.selectMode;\n    var selectedKeys = root.state.selectedKeys;\n    return selected || !!selectMode && selectedKeys.indexOf(_key) > -1;\n  };\n\n  SelectableItem.prototype.handleSelect = function handleSelect(e) {\n    var _props2 = this.props,\n        _key = _props2._key,\n        root = _props2.root,\n        onSelect = _props2.onSelect;\n\n    if (onSelect) {\n      onSelect(!this.getSelected(), this, e);\n    } else {\n      root.handleSelect(_key, !this.getSelected(), this);\n    }\n  };\n\n  SelectableItem.prototype.handleKeyDown = function handleKeyDown(e) {\n    if (e.keyCode === KEYCODE.SPACE) {\n      this.handleSelect(e);\n    }\n\n    this.props.onKeyDown && this.props.onKeyDown(e);\n  };\n\n  SelectableItem.prototype.handleClick = function handleClick(e) {\n    this.handleSelect(e);\n    this.props.onClick && this.props.onClick(e);\n  };\n\n  SelectableItem.prototype.renderSelectedIcon = function renderSelectedIcon(selected) {\n    var _props3 = this.props,\n        root = _props3.root,\n        inlineIndent = _props3.inlineIndent,\n        needIndent = _props3.needIndent,\n        hasSelectedIcon = _props3.hasSelectedIcon;\n    var _root$props = root.props,\n        prefix = _root$props.prefix,\n        rootSelectedIcon = _root$props.hasSelectedIcon;\n    return ('hasSelectedIcon' in this.props ? hasSelectedIcon : rootSelectedIcon) && selected ? React.createElement(Icon, {\n      style: needIndent && inlineIndent > 0 ? {\n        left: inlineIndent + 'px'\n      } : null,\n      className: prefix + 'menu-icon-selected',\n      type: 'select'\n    }) : null;\n  };\n\n  SelectableItem.prototype.render = function render() {\n    var _cx;\n\n    var _props4 = this.props,\n        _key = _props4._key,\n        root = _props4.root,\n        className = _props4.className,\n        disabled = _props4.disabled,\n        helper = _props4.helper,\n        children = _props4.children,\n        needIndent = _props4.needIndent;\n    var prefix = root.props.prefix;\n    var others = pickOthers(Object.keys(SelectableItem.propTypes), this.props);\n    var selected = this.getSelected();\n\n    var newProps = _extends({\n      _key: _key,\n      root: root,\n      disabled: disabled,\n      type: 'item',\n      className: cx((_cx = {}, _cx[prefix + 'selected'] = selected, _cx[className] = !!className, _cx)),\n      onKeyDown: this.handleKeyDown,\n      onClick: !disabled ? this.handleClick : this.props.onClick,\n      needIndent: needIndent,\n      'aria-selected': selected\n    }, others);\n\n    return React.createElement(Item, newProps, this.renderSelectedIcon(selected), React.createElement('span', {\n      className: prefix + 'menu-item-text'\n    }, children), helper ? React.createElement('div', {\n      className: prefix + 'menu-item-helper'\n    }, helper) : null);\n  };\n\n  return SelectableItem;\n}(Component), _class.menuChildType = 'item', _class.propTypes = {\n  _key: PropTypes.string,\n  root: PropTypes.object,\n  selected: PropTypes.bool,\n  onSelect: PropTypes.func,\n  inlineIndent: PropTypes.number,\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 帮助文本\n   */\n  helper: PropTypes.node,\n\n  /**\n   * 菜单项标签内容\n   */\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onKeyDown: PropTypes.func,\n  onClick: PropTypes.func,\n  needIndent: PropTypes.bool,\n  hasSelectedIcon: PropTypes.bool\n}, _class.defaultProps = {\n  disabled: false,\n  needIndent: true\n}, _temp);\nSelectableItem.displayName = 'SelectableItem';\nexport { SelectableItem as default };","map":null,"metadata":{},"sourceType":"module"}