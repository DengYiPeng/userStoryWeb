{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../../icon';\nimport Progress from '../../progress';\nimport ConfigProvider from '../../config-provider';\nimport { support, events, dom } from '../../util';\n/** Step.Item */\n\nvar StepItem = (_temp = _class = function (_Component) {\n  _inherits(StepItem, _Component);\n\n  function StepItem(props) {\n    _classCallCheck(this, StepItem);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.onClick = function () {\n      var _this$props = _this.props,\n          index = _this$props.index,\n          disabled = _this$props.disabled,\n          readOnly = _this$props.readOnly,\n          animation = _this$props.animation;\n\n      if (disabled || readOnly) {\n        return false;\n      }\n\n      if (animation && _this.stepNode) {\n        dom.hasClass(_this.stepNode, 'clicked') ? dom.removeClass(_this.stepNode, 'clicked') : dom.addClass(_this.stepNode, 'clicked');\n      }\n\n      _this.props.onClick(index);\n    };\n\n    _this.removeClickedCls = _this.removeClickedCls.bind(_this);\n    _this._refHandlerCreator = _this._refHandlerCreator.bind(_this);\n    _this.resize = _this.resize.bind(_this);\n    return _this;\n  }\n\n  StepItem.prototype.componentDidMount = function componentDidMount() {\n    var _props = this.props,\n        shape = _props.shape,\n        direction = _props.direction,\n        labelPlacement = _props.labelPlacement,\n        index = _props.index,\n        total = _props.total;\n\n    if (shape === 'arrow') {\n      return;\n    }\n\n    if (direction === 'vertical') {\n      this.resize();\n      this.forceUpdate(); // 解决Step嵌套的情况下，嵌套节点宽度为0的问题\n\n      this.eventHandler = events.on(window, 'resize', this.resize); // 调整垂直Step\n    } else if (direction === 'horizontal' && labelPlacement === 'horizontal' && index !== total - 1) {\n      // 调整横向Content\n      this.adjustTail();\n    }\n  };\n\n  StepItem.prototype.componentDidUpdate = function componentDidUpdate() {\n    var _props2 = this.props,\n        shape = _props2.shape,\n        direction = _props2.direction,\n        labelPlacement = _props2.labelPlacement,\n        index = _props2.index,\n        total = _props2.total,\n        rtl = _props2.rtl;\n\n    if (shape === 'arrow') {\n      return;\n    }\n\n    if (direction === 'vertical') {\n      this.resize();\n    } else if (direction === 'horizontal') {\n      var _dom$setStyle;\n\n      var pos = rtl ? 'right' : 'left';\n      dom.setStyle(this.body, (_dom$setStyle = {\n        width: ''\n      }, _dom$setStyle[pos] = '', _dom$setStyle));\n    } else if (shape === 'circle' && labelPlacement === 'horizontal' && index !== total - 1) {\n      // 调整横向Content\n      this.adjustTail();\n    } else if (index !== total - 1) {\n      dom.setStyle(this.tail, {\n        width: '',\n        // eslint-disable-next-line\n        'top': ''\n      });\n    }\n  };\n\n  StepItem.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.eventHandler && this.eventHandler.off();\n  };\n\n  StepItem.prototype.adjustTail = function adjustTail() {\n    var width = this.container.offsetWidth + this.title.offsetWidth;\n    dom.setStyle(this.tail, {\n      width: 'calc(100% - ' + width + 'px)',\n      top: dom.getStyle(this.container, 'height') / 2 + 'px'\n    });\n  };\n\n  StepItem.prototype.resize = function resize() {\n    var stepWidth = dom.getStyle(this.step, 'width');\n    var rtl = this.props.rtl;\n    rtl ? this.body.style.right = stepWidth + 'px' : this.body.style.left = stepWidth + 'px';\n    dom.setStyle(this.body, {\n      width: dom.getStyle(this.step.parentNode.parentNode, 'width') - stepWidth\n    });\n    dom.setStyle(this.tail, 'height', dom.getStyle(this.body, 'height') - dom.getStyle(this.container, 'height'));\n  };\n\n  StepItem.prototype._getNode = function _getNode() {\n    var _props3 = this.props,\n        prefix = _props3.prefix,\n        index = _props3.index,\n        status = _props3.status,\n        icon = _props3.icon,\n        shape = _props3.shape,\n        percent = _props3.percent,\n        itemRender = _props3.itemRender;\n    var nodeElement = icon;\n\n    if (shape === 'dot') {\n      nodeElement = icon ? React.createElement(Icon, {\n        type: icon\n      }) : React.createElement('div', {\n        className: prefix + 'step-item-node-circle'\n      }, ' ');\n    } else if (shape === 'circle' && percent) {\n      nodeElement = React.createElement(Progress, {\n        shape: 'circle',\n        percent: percent,\n        className: prefix + 'step-item-progress'\n      });\n    } else if (shape === 'circle' && !!itemRender && typeof itemRender === 'function') {\n      nodeElement = null; // 如果是需要自定义节点，则不处理，返回空\n    } else {\n      nodeElement = React.createElement('div', {\n        className: prefix + 'step-item-node-circle'\n      }, icon ? React.createElement(Icon, {\n        type: icon\n      }) : this._itemRender(index, status));\n    }\n\n    return nodeElement;\n  };\n\n  StepItem.prototype.getNode = function getNode(args) {\n    var _props4 = this.props,\n        prefix = _props4.prefix,\n        itemRender = _props4.itemRender,\n        index = _props4.index,\n        status = _props4.status,\n        title = _props4.title,\n        content = _props4.content;\n    var others = args.others,\n        stepCls = args.stepCls,\n        overlayCls = args.overlayCls;\n\n    var nodeElement = this._getNode();\n\n    var finalNodeElement = React.createElement('div', {\n      className: prefix + 'step-item-container',\n      ref: this._refHandlerCreator('container')\n    }, React.createElement('div', {\n      className: prefix + 'step-item-node-placeholder',\n      onClick: this.onClick\n    }, React.createElement('div', {\n      className: prefix + 'step-item-node',\n      ref: this._refHandlerCreator('stepNode'),\n      onTransitionEnd: this.removeClickedCls\n    }, nodeElement)));\n\n    if (!nodeElement) {\n      // 需要自定义子节点\n      finalNodeElement = React.createElement('div', {\n        className: prefix + 'step-item-container'\n      }, React.createElement('div', {\n        className: prefix + 'step-item-node-placeholder',\n        onClick: this.onClick\n      }, itemRender(index, status, title, content)));\n    }\n\n    return React.createElement('div', _extends({}, others, {\n      style: this.getStyle(),\n      className: stepCls,\n      ref: this._refHandlerCreator('step')\n    }), finalNodeElement, React.createElement('div', {\n      className: prefix + 'step-item-body',\n      ref: this._refHandlerCreator('body')\n    }, React.createElement('div', {\n      className: prefix + 'step-item-title',\n      ref: this._refHandlerCreator('title')\n    }, title), React.createElement('div', {\n      className: prefix + 'step-item-content'\n    }, content)), React.createElement('div', {\n      className: prefix + 'step-item-tail',\n      ref: this._refHandlerCreator('tail')\n    }, React.createElement('div', {\n      className: prefix + 'step-item-tail-underlay'\n    }, React.createElement('div', {\n      className: prefix + 'step-item-tail-overlay',\n      style: overlayCls\n    }))));\n  };\n\n  StepItem.prototype.getStyle = function getStyle() {\n    var _props5 = this.props,\n        parentWidth = _props5.parentWidth,\n        parentHeight = _props5.parentHeight,\n        direction = _props5.direction,\n        total = _props5.total,\n        index = _props5.index,\n        shape = _props5.shape;\n    var width = 'auto';\n\n    if (Number(parentWidth) && Number(parentHeight)) {\n      if (!support.flex && shape === 'arrow') {\n        width = Math.floor(parentWidth / total - parentHeight / 2 - parentHeight / 8);\n      }\n    }\n\n    if (shape !== 'arrow' && direction === 'horizontal') {\n      width = total - 1 !== index ? Math.floor(100 / total) + '%' : 'auto';\n    }\n\n    return {\n      width: width\n    };\n  };\n\n  StepItem.prototype.removeClickedCls = function removeClickedCls() {\n    var animation = this.props.animation;\n\n    if (animation && this.stepNode && dom.hasClass(this.stepNode, 'clicked')) {\n      dom.removeClass(this.stepNode, 'clicked');\n    }\n  }; // 节点的渲染方法\n\n\n  StepItem.prototype._itemRender = function _itemRender(index, status) {\n    var itemRender = this.props.itemRender;\n\n    if (itemRender) {\n      return itemRender(index, status);\n    }\n\n    return status === 'finish' ? React.createElement(Icon, {\n      type: 'select'\n    }) : index + 1;\n  };\n\n  StepItem.prototype._refHandlerCreator = function _refHandlerCreator(refName) {\n    var self = this;\n    return function (ref) {\n      self[refName] = ref;\n    };\n  };\n\n  StepItem.prototype.render = function render() {\n    var _classNames; // eslint-disable-next-line\n\n\n    var _props6 = this.props,\n        prefix = _props6.prefix,\n        locale = _props6.locale,\n        className = _props6.className,\n        status = _props6.status,\n        title = _props6.title,\n        icon = _props6.icon,\n        index = _props6.index,\n        total = _props6.total,\n        shape = _props6.shape,\n        content = _props6.content,\n        direction = _props6.direction,\n        disabled = _props6.disabled,\n        onClick = _props6.onClick,\n        readOnly = _props6.readOnly,\n        animation = _props6.animation,\n        parentHeight = _props6.parentHeight,\n        itemRender = _props6.itemRender,\n        parentWidth = _props6.parentWidth,\n        labelPlacement = _props6.labelPlacement,\n        rtl = _props6.rtl,\n        others = _objectWithoutProperties(_props6, ['prefix', 'locale', 'className', 'status', 'title', 'icon', 'index', 'total', 'shape', 'content', 'direction', 'disabled', 'onClick', 'readOnly', 'animation', 'parentHeight', 'itemRender', 'parentWidth', 'labelPlacement', 'rtl']);\n\n    var stepCls = classNames((_classNames = {}, _classNames[prefix + 'step-item'] = true, _classNames[prefix + 'step-item-' + status] = status, _classNames[prefix + 'step-item-first'] = index === 0, _classNames[prefix + 'step-item-last'] = index === total - 1, _classNames[prefix + 'step-item-disabled'] = disabled, _classNames[prefix + 'step-item-read-only'] = readOnly, _classNames[className] = className, _classNames));\n    var overlayCls = status === 'finish' ? {\n      width: '100%'\n    } : null;\n    var arrowElement = React.createElement('div', _extends({}, others, {\n      style: this.getStyle(),\n      className: stepCls,\n      onClick: this.onClick\n    }), React.createElement('div', {\n      className: prefix + 'step-item-container'\n    }, React.createElement('div', {\n      className: prefix + 'step-item-title'\n    }, title)));\n    var otherElement = this.getNode({\n      others: others,\n      stepCls: stepCls,\n      overlayCls: overlayCls\n    });\n    return shape === 'arrow' ? arrowElement : otherElement;\n  };\n\n  return StepItem;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`\n   */\n  status: PropTypes.oneOf(['wait', 'process', 'finish']),\n\n  /**\n   * 标题\n   */\n  title: PropTypes.node,\n  direction: PropTypes.oneOf(['horizontal', 'vertical']),\n  labelPlacement: PropTypes.oneOf(['horizontal', 'vertical']),\n  shape: PropTypes.oneOf(['circle', 'arrow', 'dot']),\n\n  /**\n   * 图标\n   */\n  icon: PropTypes.string,\n\n  /**\n   * 内容，用于垂直状态下的内容填充\n   */\n  content: PropTypes.node,\n\n  /**\n   * StepItem 的自定义渲染, 会覆盖父节点设置的itemRender\n   * @param {Number} index   节点索引\n   * @param {String} status  节点状态\n   * @returns {Node} 节点的渲染结果\n   */\n  itemRender: PropTypes.func,\n\n  /**\n  * 百分比\n  */\n  percent: PropTypes.number,\n  index: PropTypes.number,\n  total: PropTypes.number,\n  animation: PropTypes.bool,\n  // 是否开启动效，由父级传入\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n  parentWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  parentHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * 点击步骤时的回调\n   * @param {Number} index 节点索引\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * 自定义样式\n   */\n  className: PropTypes.string,\n  readOnly: PropTypes.bool\n}, _class.defaultProps = {\n  shape: 'circle',\n  index: 0,\n  total: 1,\n  onClick: function onClick() {}\n}, _temp);\nStepItem.displayName = 'StepItem';\nexport default ConfigProvider.config(StepItem);","map":null,"metadata":{},"sourceType":"module"}