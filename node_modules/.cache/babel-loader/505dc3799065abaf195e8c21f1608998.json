{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport moment from 'moment';\nimport Overlay from '../overlay';\nimport Input from '../input';\nimport RangeCalendar from '../calendar/range-calendar';\nimport TimePickerPanel from '../time-picker/panel';\nimport nextLocale from '../locale/zh-cn';\nimport { func, obj } from '../util';\nimport { PANEL, resetValueTime, formatDateValue, extend, getDateTimeFormat, isFunction } from './util';\nimport PanelFooter from './module/panel-footer';\nvar Popup = Overlay.Popup;\n\nfunction mapInputStateName(name) {\n  return {\n    startValue: 'startDateInputStr',\n    endValue: 'endDateInputStr',\n    startTime: 'startTimeInputStr',\n    endTime: 'endTimeInputStr'\n  }[name];\n}\n\nfunction mapTimeToValue(name) {\n  return {\n    startTime: 'startValue',\n    endTime: 'endValue'\n  }[name];\n}\n\nfunction getFormatValues(values, format) {\n  if (!Array.isArray(values)) {\n    return [null, null];\n  }\n\n  return [formatDateValue(values[0], format), formatDateValue(values[1], format)];\n}\n/**\n * DatePicker.RangePicker\n*/\n\n\nvar RangePicker = (_temp = _class = function (_Component) {\n  _inherits(RangePicker, _Component);\n\n  function RangePicker(props, context) {\n    _classCallCheck(this, RangePicker);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.onSelectCalendarPanel = function (value) {\n      var _this$props = _this.props,\n          showTime = _this$props.showTime,\n          resetTime = _this$props.resetTime;\n      var _this$state = _this.state,\n          prevActiveDateInput = _this$state.activeDateInput,\n          prevStartValue = _this$state.startValue,\n          prevEndValue = _this$state.endValue;\n      var newState = {\n        activeDateInput: prevActiveDateInput,\n        inputing: false\n      };\n      var newValue = value;\n\n      switch (prevActiveDateInput) {\n        case 'startValue':\n          {\n            if (!prevEndValue || value.valueOf() <= prevEndValue.valueOf()) {\n              newState.activeDateInput = 'endValue';\n            }\n\n            if (showTime) {\n              if (!prevStartValue) {\n                // 第一次选择，如果设置了时间默认值，则使用该默认时间\n                if (showTime.defaultValue) {\n                  var defaultTimeValue = formatDateValue(showTime.defaultValue, _this.timeFormat);\n                  newValue = resetValueTime(value, defaultTimeValue);\n                }\n              } else if (!resetTime) {\n                // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值\n                newValue = resetValueTime(value, prevStartValue);\n              }\n            }\n\n            newState.startValue = newValue;\n\n            if (prevEndValue && value.valueOf() > prevEndValue.valueOf()) {\n              newState.endValue = null;\n              newState.activeDateInput = 'endValue';\n            }\n\n            break;\n          }\n\n        case 'endValue':\n          if (!prevStartValue) {\n            newState.activeDateInput = 'startValue';\n          }\n\n          if (showTime) {\n            if (!prevEndValue) {\n              // 第一次选择，如果设置了时间默认值，则使用该默认时间\n              if (showTime.defaultValue) {\n                var _defaultTimeValue = formatDateValue(showTime.defaultValue, _this.timeFormat);\n\n                newValue = resetValueTime(value, _defaultTimeValue);\n              }\n            } else if (!resetTime) {\n              // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值\n              newValue = resetValueTime(value, prevEndValue);\n            }\n          }\n\n          newState.endValue = newValue; // 选择了一个比开始日期更小的结束日期，此时表示用户重新选择了\n\n          if (prevStartValue && value.valueOf() < prevStartValue.valueOf()) {\n            newState.startValue = value;\n            newState.endValue = null;\n          }\n\n          break;\n      }\n\n      var newStartValue = 'startValue' in newState ? newState.startValue : prevStartValue;\n      var newEndValue = 'endValue' in newState ? newState.endValue : prevEndValue; // 受控状态选择不更新值\n\n      if ('value' in _this.props) {\n        delete newState.startValue;\n        delete newState.endValue;\n      }\n\n      _this.setState(newState);\n\n      _this.onValueChange([newStartValue, newEndValue]);\n    };\n\n    _this.clearRange = function () {\n      _this.setState({\n        startDateInputStr: '',\n        endDateInputStr: '',\n        startTimeInputStr: '',\n        endTimeInputStr: ''\n      });\n\n      if (!('value' in _this.props)) {\n        _this.setState({\n          startValue: null,\n          endValue: null\n        });\n      }\n\n      _this.onValueChange([]);\n    };\n\n    _this.onDateInputChange = function (inputStr, e, eventType) {\n      if (eventType === 'clear' || !inputStr) {\n        e.stopPropagation();\n\n        _this.clearRange();\n      } else {\n        var _this$setState;\n\n        var stateName = mapInputStateName(_this.state.activeDateInput);\n\n        _this.setState((_this$setState = {}, _this$setState[stateName] = inputStr, _this$setState.inputing = _this.state.activeDateInput, _this$setState));\n      }\n    };\n\n    _this.onDateInputBlur = function () {\n      var stateName = mapInputStateName(_this.state.activeDateInput);\n      var dateInputStr = _this.state[stateName];\n\n      if (dateInputStr) {\n        var _this$setState2;\n\n        var _this$props2 = _this.props,\n            format = _this$props2.format,\n            disabledDate = _this$props2.disabledDate;\n        var parsed = moment(dateInputStr, format, true);\n\n        _this.setState((_this$setState2 = {}, _this$setState2[stateName] = '', _this$setState2.inputing = false, _this$setState2));\n\n        if (parsed.isValid() && !disabledDate(parsed)) {\n          var valueName = _this.state.activeDateInput;\n          var newValue = parsed;\n\n          _this.handleChange(valueName, newValue);\n        }\n      }\n    };\n\n    _this.onFocusDateInput = function (type) {\n      if (type !== _this.state.activeDateInput) {\n        _this.setState({\n          activeDateInput: type\n        });\n      }\n\n      if (_this.state.panel !== PANEL.DATE) {\n        _this.setState({\n          panel: PANEL.DATE\n        });\n      }\n    };\n\n    _this.onFocusTimeInput = function (type) {\n      if (type !== _this.state.activeDateInput) {\n        _this.setState({\n          activeDateInput: type\n        });\n      }\n\n      if (_this.state.panel !== PANEL.TIME) {\n        _this.setState({\n          panel: PANEL.TIME\n        });\n      }\n    };\n\n    _this.onSelectStartTime = function (value) {\n      if (!('value' in _this.props)) {\n        _this.setState({\n          startValue: value,\n          inputing: false,\n          activeDateInput: 'startTime'\n        });\n      }\n\n      if (value.valueOf() !== _this.state.startValue.valueOf()) {\n        _this.onValueChange([value, _this.state.endValue]);\n      }\n    };\n\n    _this.onSelectEndTime = function (value) {\n      if (!('value' in _this.props)) {\n        _this.setState({\n          endValue: value,\n          inputing: false,\n          activeDateInput: 'endTime'\n        });\n      }\n\n      if (value.valueOf() !== _this.state.endValue.valueOf()) {\n        _this.onValueChange([_this.state.startValue, value]);\n      }\n    };\n\n    _this.onTimeInputChange = function (inputStr) {\n      var _this$setState3;\n\n      var stateName = mapInputStateName(_this.state.activeDateInput);\n\n      _this.setState((_this$setState3 = {}, _this$setState3[stateName] = inputStr, _this$setState3.inputing = _this.state.activeDateInput, _this$setState3));\n    };\n\n    _this.onTimeInputBlur = function () {\n      var stateName = mapInputStateName(_this.state.activeDateInput);\n      var timeInputStr = _this.state[stateName];\n\n      if (timeInputStr) {\n        var _this$setState4;\n\n        var parsed = moment(timeInputStr, _this.timeFormat, true);\n\n        _this.setState((_this$setState4 = {}, _this$setState4[stateName] = '', _this$setState4.inputing = false, _this$setState4));\n\n        if (parsed.isValid()) {\n          var hour = parsed.hour();\n          var minute = parsed.minute();\n          var second = parsed.second();\n          var valueName = mapTimeToValue(_this.state.activeDateInput);\n\n          var newValue = _this.state[valueName].clone().hour(hour).minute(minute).second(second);\n\n          _this.handleChange(valueName, newValue);\n        }\n      }\n    };\n\n    _this.handleChange = function (valueName, newValue) {\n      if (!('value' in _this.props)) {\n        var _this$setState5;\n\n        _this.setState((_this$setState5 = {}, _this$setState5[valueName] = newValue, _this$setState5));\n      }\n\n      var startValue = valueName === 'startValue' ? newValue : _this.state.startValue;\n      var endValue = valueName === 'endValue' ? newValue : _this.state.endValue;\n\n      _this.onValueChange([startValue, endValue]);\n    };\n\n    _this.onVisibleChange = function (visible, reason) {\n      if (!('visible' in _this.props)) {\n        _this.setState({\n          visible: visible\n        });\n      }\n\n      _this.props.onVisibleChange(visible, reason);\n    };\n\n    _this.changePanel = function (panel) {\n      _this.setState({\n        panel: panel,\n        activeDateInput: panel === PANEL.DATE ? 'startValue' : 'startTime'\n      });\n    };\n\n    _this.onOk = function () {\n      _this.onVisibleChange(false, 'okBtnClick');\n\n      _this.onValueChange([_this.state.startValue, _this.state.endValue], 'onOk');\n    };\n\n    _this.getDisabledTime = function (_ref) {\n      var startValue = _ref.startValue,\n          endValue = _ref.endValue;\n\n      var _ref2 = _this.props.showTime || {},\n          disabledHours = _ref2.disabledHours,\n          disabledMinutes = _ref2.disabledMinutes,\n          disabledSeconds = _ref2.disabledSeconds;\n\n      var disabledTime = {};\n\n      if (startValue && endValue) {\n        var isSameDay = startValue.format('L') === endValue.format('L');\n        var newDisabledHours = isFunction(disabledHours) ? disabledHours : function (index) {\n          if (isSameDay && index < startValue.hour()) {\n            return true;\n          }\n        };\n        var newDisabledMinutes = isFunction(disabledMinutes) ? disabledMinutes : function (index) {\n          if (isSameDay && startValue.hour() === endValue.hour() && index < startValue.minute()) {\n            return true;\n          }\n        };\n        var newDisabledSeconds = isFunction(disabledSeconds) ? disabledSeconds : function (index) {\n          if (isSameDay && startValue.hour() === endValue.hour() && startValue.minute() === endValue.minute() && index <= startValue.second()) {\n            return true;\n          }\n        };\n        disabledTime = {\n          disabledHours: newDisabledHours,\n          disabledMinutes: newDisabledMinutes,\n          disabledSeconds: newDisabledSeconds\n        };\n      }\n\n      return disabledTime;\n    };\n\n    var dateTimeFormat = getDateTimeFormat(props.format, props.showTime);\n    extend(dateTimeFormat, _this);\n    var val = props.value || props.defaultValue;\n    var values = getFormatValues(val, _this.dateTimeFormat);\n    _this.inputAsString = val && (typeof val[0] === 'string' || typeof val[1] === 'string');\n    _this.state = {\n      visible: props.visible || props.defaultVisible,\n      startValue: values[0],\n      endValue: values[1],\n      startDateInputStr: '',\n      endDateInputStr: '',\n      activeDateInput: 'startValue',\n      startTimeInputStr: '',\n      endTimeInputStr: '',\n      inputing: false,\n      // 当前是否处于输入状态\n      panel: PANEL.DATE\n    };\n    return _this;\n  }\n\n  RangePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('showTime' in nextProps) {\n      var dateTimeFormat = getDateTimeFormat(nextProps.format || this.props.format, nextProps.showTime);\n      extend(dateTimeFormat, this);\n    }\n\n    if ('value' in nextProps) {\n      var values = getFormatValues(nextProps.value, this.dateTimeFormat);\n      this.setState({\n        startValue: values[0],\n        endValue: values[1]\n      });\n      this.inputAsString = nextProps.value && (typeof nextProps.value[0] === 'string' || typeof nextProps.value[1] === 'string');\n    }\n\n    if ('visible' in nextProps) {\n      this.setState({\n        visible: nextProps.visible\n      });\n    }\n  };\n\n  RangePicker.prototype.onValueChange = function onValueChange(values) {\n    var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'onChange';\n    var ret = void 0;\n\n    if (!values.length || !this.inputAsString) {\n      ret = values;\n    } else {\n      ret = [values[0] ? values[0].format(this.dateTimeFormat) : null, values[1] ? values[1].format(this.dateTimeFormat) : null];\n    }\n\n    this.props[handler](ret);\n  }; // 如果用户没有给定时间禁用逻辑，则给默认到禁用逻辑，即如果是同一天，则时间不能是同样的\n\n\n  RangePicker.prototype.render = function render() {\n    var _classnames,\n        _classnames2,\n        _classnames3,\n        _classnames4,\n        _classnames5,\n        _this2 = this,\n        _PANEL$DATE$PANEL$TIM;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        rtl = _props.rtl,\n        defaultVisibleMonth = _props.defaultVisibleMonth,\n        onVisibleMonthChange = _props.onVisibleMonthChange,\n        showTime = _props.showTime,\n        disabledDate = _props.disabledDate,\n        footerRender = _props.footerRender,\n        label = _props.label,\n        inputState = _props.state,\n        size = _props.size,\n        disabled = _props.disabled,\n        hasClear = _props.hasClear,\n        popupTriggerType = _props.popupTriggerType,\n        popupAlign = _props.popupAlign,\n        popupContainer = _props.popupContainer,\n        popupStyle = _props.popupStyle,\n        popupClassName = _props.popupClassName,\n        popupProps = _props.popupProps,\n        className = _props.className,\n        locale = _props.locale,\n        others = _objectWithoutProperties(_props, ['prefix', 'rtl', 'defaultVisibleMonth', 'onVisibleMonthChange', 'showTime', 'disabledDate', 'footerRender', 'label', 'state', 'size', 'disabled', 'hasClear', 'popupTriggerType', 'popupAlign', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'className', 'locale']);\n\n    var state = this.state;\n    var classNames = classnames((_classnames = {}, _classnames[prefix + 'range-picker'] = true, _classnames['' + prefix + size] = size, _classnames[prefix + 'disabled'] = disabled, _classnames), className);\n    var panelBodyClassName = classnames((_classnames2 = {}, _classnames2[prefix + 'range-picker-body'] = true, _classnames2[prefix + 'range-picker-body-show-time'] = showTime, _classnames2));\n    var triggerCls = classnames((_classnames3 = {}, _classnames3[prefix + 'range-picker-trigger'] = true, _classnames3[prefix + 'error'] = inputState === 'error', _classnames3));\n    var startDateInputCls = classnames((_classnames4 = {}, _classnames4[prefix + 'range-picker-panel-input-start-date'] = true, _classnames4[prefix + 'focus'] = state.activeDateInput === 'startValue', _classnames4));\n    var endDateInputCls = classnames((_classnames5 = {}, _classnames5[prefix + 'range-picker-panel-input-end-date'] = true, _classnames5[prefix + 'focus'] = state.activeDateInput === 'endValue', _classnames5));\n\n    if (rtl) {\n      others.dir = 'rtl';\n    }\n\n    var startDateInputValue = state.inputing === 'startValue' ? state.startDateInputStr : state.startValue && state.startValue.format(this.format) || '';\n    var endDateInputValue = state.inputing === 'endValue' ? state.endDateInputStr : state.endValue && state.endValue.format(this.format) || '';\n    var startTriggerValue = startDateInputValue;\n    var endTriggerValue = endDateInputValue;\n    var sharedInputProps = {\n      size: size,\n      disabled: disabled,\n      onChange: this.onDateInputChange,\n      onBlur: this.onDateInputBlur,\n      onPressEnter: this.onDateInputBlur\n    };\n    var startDateInput = React.createElement(Input, _extends({}, sharedInputProps, {\n      placeholder: this.format,\n      value: startDateInputValue,\n      onFocus: function onFocus() {\n        return _this2.onFocusDateInput('startValue');\n      },\n      className: startDateInputCls\n    }));\n    var endDateInput = React.createElement(Input, _extends({}, sharedInputProps, {\n      placeholder: this.format,\n      value: endDateInputValue,\n      onFocus: function onFocus() {\n        return _this2.onFocusDateInput('endValue');\n      },\n      className: endDateInputCls\n    }));\n    var datePanel = React.createElement(RangeCalendar, {\n      showOtherMonth: true,\n      format: this.format,\n      defaultVisibleMonth: defaultVisibleMonth,\n      onVisibleMonthChange: onVisibleMonthChange,\n      disabledDate: disabledDate,\n      onSelect: this.onSelectCalendarPanel,\n      startValue: state.startValue,\n      endValue: state.endValue\n    });\n    var startTimeInput = null;\n    var endTimeInput = null;\n    var timePanel = null;\n    var panelFooter = footerRender();\n\n    if (showTime) {\n      var _classnames6, _classnames7;\n\n      var startTimeInputValue = state.inputing === 'startTime' ? state.startTimeInputStr : state.startValue && state.startValue.format(this.timeFormat) || '';\n      var endTimeInputValue = state.inputing === 'endTime' ? state.endTimeInputStr : state.endValue && state.endValue.format(this.timeFormat) || '';\n      startTriggerValue = state.startValue && state.startValue.format(this.dateTimeFormat) || '';\n      endTriggerValue = state.endValue && state.endValue.format(this.dateTimeFormat) || '';\n      var sharedTimeInputProps = {\n        size: size,\n        placeholder: this.timeFormat,\n        onFocus: this.onFocusTimeInput,\n        onBlur: this.onTimeInputBlur,\n        onPressEnter: this.onTimeInputBlur,\n        onChange: this.onTimeInputChange\n      };\n      var startTimeInputCls = classnames((_classnames6 = {}, _classnames6[prefix + 'range-picker-panel-input-start-time'] = true, _classnames6[prefix + 'focus'] = state.activeDateInput === 'startTime', _classnames6));\n      startTimeInput = React.createElement(Input, _extends({}, sharedTimeInputProps, {\n        value: startTimeInputValue,\n        disabled: disabled || !state.startValue || !state.endValue,\n        onFocus: function onFocus() {\n          return _this2.onFocusTimeInput('startTime');\n        },\n        className: startTimeInputCls\n      }));\n      var endTimeInputCls = classnames((_classnames7 = {}, _classnames7[prefix + 'range-picker-panel-input-end-time'] = true, _classnames7[prefix + 'focus'] = state.activeDateInput === 'endTime', _classnames7));\n      endTimeInput = React.createElement(Input, _extends({}, sharedTimeInputProps, {\n        value: endTimeInputValue,\n        disabled: disabled || !state.endValue || !state.startValue,\n        onFocus: function onFocus() {\n          return _this2.onFocusTimeInput('endTime');\n        },\n        className: endTimeInputCls\n      }));\n      var showSecond = this.timeFormat.indexOf('s') > -1;\n\n      var sharedTimePickerProps = _extends({}, showTime, {\n        prefix: prefix,\n        locale: locale,\n        disabled: disabled,\n        showSecond: showSecond\n      });\n\n      var disabledTime = this.getDisabledTime(state);\n      timePanel = React.createElement('div', {\n        className: prefix + 'range-picker-panel-time'\n      }, React.createElement(TimePickerPanel, _extends({}, sharedTimePickerProps, {\n        className: prefix + 'range-picker-panel-time-start',\n        value: state.startValue,\n        onSelect: this.onSelectStartTime\n      })), React.createElement(TimePickerPanel, _extends({}, sharedTimePickerProps, disabledTime, {\n        className: prefix + 'range-picker-panel-time-end',\n        value: state.endValue,\n        onSelect: this.onSelectEndTime\n      })));\n    }\n\n    panelFooter = panelFooter || React.createElement(PanelFooter, {\n      prefix: prefix,\n      value: state.startValue && state.endValue,\n      locale: locale,\n      panel: state.panel,\n      onPanelChange: showTime ? this.changePanel : null,\n      onOk: this.onOk\n    });\n    var panelBody = (_PANEL$DATE$PANEL$TIM = {}, _PANEL$DATE$PANEL$TIM[PANEL.DATE] = datePanel, _PANEL$DATE$PANEL$TIM[PANEL.TIME] = timePanel, _PANEL$DATE$PANEL$TIM)[state.panel];\n    var allowClear = state.startValue && state.endValue && hasClear;\n    var trigger = React.createElement('div', {\n      className: triggerCls\n    }, React.createElement(Input, _extends({}, sharedInputProps, {\n      label: label,\n      placeholder: locale.startPlaceholder,\n      value: startTriggerValue,\n      hasBorder: false,\n      className: prefix + 'range-picker-trigger-input',\n      onFocus: function onFocus() {\n        return _this2.onFocusDateInput('startValue');\n      }\n    })), React.createElement('span', {\n      className: prefix + 'range-picker-trigger-separator'\n    }, '-'), React.createElement(Input, _extends({}, sharedInputProps, {\n      placeholder: locale.endPlaceholder,\n      value: endTriggerValue,\n      hasBorder: false,\n      className: prefix + 'range-picker-trigger-input',\n      onFocus: function onFocus() {\n        return _this2.onFocusDateInput('endValue');\n      },\n      hasClear: allowClear,\n      hint: 'calendar'\n    })));\n    return React.createElement('div', _extends({}, obj.pickOthers(RangePicker.propTypes, others), {\n      className: classNames\n    }), React.createElement(Popup, _extends({}, popupProps, {\n      autoFoucs: true,\n      disabled: disabled,\n      visible: state.visible,\n      onVisibleChange: this.onVisibleChange,\n      align: popupAlign,\n      triggerType: popupTriggerType,\n      container: popupContainer,\n      style: popupStyle,\n      className: popupClassName,\n      trigger: trigger\n    }), React.createElement('div', {\n      dir: others.dir,\n      className: panelBodyClassName\n    }, React.createElement('div', {\n      className: prefix + 'range-picker-panel-header'\n    }, React.createElement('div', {\n      className: prefix + 'range-picker-panel-input'\n    }, startDateInput, startTimeInput, React.createElement('span', {\n      className: prefix + 'range-picker-panel-input-separator'\n    }, '-'), endDateInput, endTimeInput)), panelBody, panelFooter)));\n  };\n\n  return RangePicker;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 默认展示的起始月份\n   * @return {MomentObject} 返回包含指定月份的 moment 对象实例\n   */\n  defaultVisibleMonth: PropTypes.func,\n  onVisibleMonthChange: PropTypes.func,\n\n  /**\n   * 日期范围值数组 [moment, moment]\n   */\n  value: PropTypes.array,\n\n  /**\n   * 初始的日期范围值数组 [moment, moment]\n   */\n  defaultValue: PropTypes.array,\n\n  /**\n   * 日期格式\n   */\n  format: PropTypes.string,\n\n  /**\n   * 是否使用时间控件，支持传入 TimePicker 的属性\n   */\n  showTime: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n\n  /**\n   * 每次选择是否重置时间（仅在 showTime 开启时有效）\n   */\n  resetTime: PropTypes.bool,\n\n  /**\n   * 禁用日期函数\n   * @param {MomentObject} 日期值\n   * @return {Boolean} 是否禁用\n   */\n  disabledDate: PropTypes.func,\n\n  /**\n   * 自定义面板页脚\n   * @return {Node} 自定义的面板页脚组件\n   */\n  footerRender: PropTypes.func,\n\n  /**\n   * 日期范围值改变时的回调 [ MomentObject|String, MomentObject|String ]\n   * @param {Array<MomentObject|String>} value 日期值\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 点击确认按钮时的回调 返回开始时间和结束时间`[ MomentObject|String, MomentObject|String ]`\n   * @return {Array} 日期范围\n   */\n  onOk: PropTypes.func,\n\n  /**\n   * 输入框内置标签\n   */\n  label: PropTypes.node,\n\n  /**\n   * 输入框状态\n   */\n  state: PropTypes.oneOf(['error', 'success']),\n\n  /**\n   * 输入框尺寸\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 是否显示清空按钮\n   */\n  hasClear: PropTypes.bool,\n\n  /**\n   * 弹层显示状态\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 弹层默认是否显示\n   */\n  defaultVisible: PropTypes.bool,\n\n  /**\n   * 弹层展示状态变化时的回调\n   * @param {Boolean} visible 弹层是否显示\n   * @param {String} reason 触发弹层显示和隐藏的来源\n   */\n  onVisibleChange: PropTypes.func,\n\n  /**\n   * 弹层触发方式\n   */\n  popupTriggerType: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * 弹层对齐方式, 具体含义见 OverLay文档\n   */\n  popupAlign: PropTypes.string,\n\n  /**\n   * 弹层容器\n   * @param {Element} target 目标元素\n   * @return {Element} 弹层的容器元素\n   */\n  popupContainer: PropTypes.func,\n\n  /**\n   * 弹层自定义样式\n   */\n  popupStyle: PropTypes.object,\n\n  /**\n   * 弹层自定义样式类\n   */\n  popupClassName: PropTypes.string,\n\n  /**\n   * 弹层其他属性\n   */\n  popupProps: PropTypes.object,\n  locale: PropTypes.object,\n  className: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  rtl: false,\n  format: 'YYYY-MM-DD',\n  size: 'medium',\n  showTime: false,\n  resetTime: false,\n  disabledDate: function disabledDate() {\n    return false;\n  },\n  footerRender: function footerRender() {\n    return null;\n  },\n  hasClear: true,\n  popupTriggerType: 'click',\n  popupAlign: 'tl tl',\n  locale: nextLocale.DatePicker,\n  onChange: func.noop,\n  onOk: func.noop,\n  onVisibleChange: func.noop\n}, _temp);\nRangePicker.displayName = 'RangePicker';\nexport { RangePicker as default };","map":null,"metadata":{},"sourceType":"module"}