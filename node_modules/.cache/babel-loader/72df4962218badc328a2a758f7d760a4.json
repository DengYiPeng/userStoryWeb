{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getPercent } from '../utils';\nvar Selected = (_temp = _class = function (_React$Component) {\n  _inherits(Selected, _React$Component);\n\n  function Selected() {\n    _classCallCheck(this, Selected);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Selected.prototype._getStyle = function _getStyle() {\n    var _props = this.props,\n        min = _props.min,\n        max = _props.max,\n        reverse = _props.reverse;\n    var value = this.props.value;\n\n    if (!Array.isArray(value)) {\n      value = [min, value];\n    }\n\n    var width = (value[1] - value[0]) * 100 / (max - min);\n    var style = {\n      width: width + '%',\n      left: getPercent(min, max, value[0]) + '%'\n    };\n\n    if (reverse) {\n      style = {\n        width: 100 - width + '%',\n        left: getPercent(min, max, value[0]) + width + '%'\n      };\n    }\n\n    return style;\n  };\n\n  Selected.prototype._getStyleLeft = function _getStyleLeft() {\n    var _props2 = this.props,\n        min = _props2.min,\n        max = _props2.max;\n    var value = this.props.value;\n\n    if (!Array.isArray(value)) {\n      value = [min, value];\n    }\n\n    var style = {\n      width: getPercent(min, max, value[0]) + '%',\n      left: 0\n    };\n    return style;\n  };\n\n  Selected.prototype._getStyleRight = function _getStyleRight() {\n    var _props3 = this.props,\n        min = _props3.min,\n        max = _props3.max;\n    var value = this.props.value;\n\n    if (!Array.isArray(value)) {\n      value = [min, value];\n    }\n\n    var width = (value[1] - value[0]) * 100 / (max - min);\n    var style = {\n      width: 100 - getPercent(min, max, value[0]) - width + '%',\n      left: getPercent(min, max, value[0]) + width + '%'\n    };\n    return style;\n  };\n\n  Selected.prototype.render = function render() {\n    var _classNames;\n\n    var _props4 = this.props,\n        prefix = _props4.prefix,\n        slider = _props4.slider,\n        reverse = _props4.reverse;\n    var classes = classNames((_classNames = {}, _classNames[prefix + 'range-selected'] = true, _classNames));\n    var SeletedComps = React.createElement('div', {\n      className: classes,\n      style: this._getStyle()\n    });\n\n    if (slider === 'double' && reverse) {\n      SeletedComps = React.createElement('div', null, React.createElement('div', {\n        className: classes,\n        style: this._getStyleLeft()\n      }), React.createElement('div', {\n        className: classes,\n        style: this._getStyleRight()\n      }));\n    }\n\n    return SeletedComps;\n  };\n\n  return Selected;\n}(React.Component), _class.propTypes = {\n  min: PropTypes.number,\n  max: PropTypes.number,\n  slider: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  prefix: PropTypes.string,\n  reverse: PropTypes.bool\n}, _class.defaultProps = {\n  prefix: 'next-',\n  slider: 'single',\n  min: 0,\n  max: 100,\n  value: 0,\n  reverse: false\n}, _temp);\nSelected.displayName = 'Selected';\nexport { Selected as default };","map":null,"metadata":{},"sourceType":"module"}