{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nvar VIEWBOX_WIDTH = 100; // width of viewBox\n\nvar HALF_VIEWBOX_WIDTH = VIEWBOX_WIDTH / 2;\nvar DEFAULT_STROKE_WIDTH = 8;\nvar viewBox = '0 0 ' + VIEWBOX_WIDTH + ' ' + VIEWBOX_WIDTH;\nvar Circle = (_temp = _class = function (_Component) {\n  _inherits(Circle, _Component);\n\n  function Circle(props) {\n    _classCallCheck(this, Circle);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this._underlayRefHandler = function (ref) {\n      _this.underlay = ref;\n    };\n\n    _this._overlayRefHandler = function (ref) {\n      _this.overlay = ref;\n    };\n\n    _this.state = {\n      underlayStrokeWidth: DEFAULT_STROKE_WIDTH,\n      overlayStrokeWidth: DEFAULT_STROKE_WIDTH\n    };\n    return _this;\n  }\n\n  Circle.prototype.componentDidMount = function componentDidMount() {\n    if (this.underlay && this.overlay) {\n      // eslint-disable-next-line\n      this.setState({\n        underlayStrokeWidth: this._getCssValue(this.underlay, 'stroke-width') || DEFAULT_STROKE_WIDTH,\n        overlayStrokeWidth: this._getCssValue(this.overlay, 'stroke-width') || DEFAULT_STROKE_WIDTH\n      });\n    }\n  };\n\n  Circle.prototype._getCssValue = function _getCssValue(dom, name) {\n    var css = window.getComputedStyle(dom).getPropertyValue(name);\n    var regExp = /(\\d*)px/g;\n    var result = regExp.exec(css);\n    return Array.isArray(result) ? Number(result[1]) : 0;\n  };\n\n  Circle.prototype._computeOverlayStrokeDashOffset = function _computeOverlayStrokeDashOffset() {\n    var _state = this.state,\n        underlayStrokeWidth = _state.underlayStrokeWidth,\n        overlayStrokeWidth = _state.overlayStrokeWidth;\n    var overlayRadius = HALF_VIEWBOX_WIDTH - overlayStrokeWidth / 2 - (underlayStrokeWidth - overlayStrokeWidth) / 2;\n    var overlayLen = Math.PI * 2 * overlayRadius;\n    return (VIEWBOX_WIDTH - this.props.percent) / VIEWBOX_WIDTH * overlayLen;\n  };\n\n  Circle.prototype._getPath = function _getPath(radius) {\n    return 'M ' + HALF_VIEWBOX_WIDTH + ',' + HALF_VIEWBOX_WIDTH + ' m 0,-' + radius + ' a ' + radius + ',' + radius + ' 0 1 1 0,' + 2 * radius + ' a ' + radius + ',' + radius + ' 0 1 1 0,-' + 2 * radius;\n  };\n\n  Circle.prototype.render = function render() {\n    var _classNames, _classNames2;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        size = _props.size,\n        state = _props.state,\n        percent = _props.percent,\n        className = _props.className,\n        textRender = _props.textRender,\n        progressive = _props.progressive,\n        color = _props.color,\n        rtl = _props.rtl,\n        others = _objectWithoutProperties(_props, ['prefix', 'size', 'state', 'percent', 'className', 'textRender', 'progressive', 'color', 'rtl']);\n\n    var _state2 = this.state,\n        underlayStrokeWidth = _state2.underlayStrokeWidth,\n        overlayStrokeWidth = _state2.overlayStrokeWidth; // underlay path\n\n    var underlayRadius = HALF_VIEWBOX_WIDTH - underlayStrokeWidth / 2;\n\n    var underlayPath = this._getPath(underlayRadius); // overlay path (为居中，减去相对于underlay的宽度)\n\n\n    var overlayRadius = HALF_VIEWBOX_WIDTH - overlayStrokeWidth / 2 - (underlayStrokeWidth - overlayStrokeWidth) / 2;\n\n    var overlayPath = this._getPath(overlayRadius);\n\n    var overlayLen = Math.PI * 2 * overlayRadius;\n    var overlayStrokeDasharray = overlayLen + 'px ' + overlayLen + 'px';\n    var overlayStrokeDashoffset = this._computeOverlayStrokeDashOffset() + 'px';\n    var suffixText = textRender(percent, {\n      rtl: rtl\n    });\n    var wrapCls = classNames((_classNames = {}, _classNames[prefix + 'progress-circle'] = true, _classNames[prefix + 'progress-circle-show-info'] = suffixText, _classNames['' + (prefix + size)] = size, _classNames[className] = className, _classNames));\n    var pathCls = classNames((_classNames2 = {}, _classNames2[prefix + 'progress-circle-overlay'] = true, _classNames2[prefix + 'progress-circle-overlay-' + state] = !color && !progressive && state, _classNames2[prefix + 'progress-circle-overlay-started'] = !color && progressive && percent <= 30, _classNames2[prefix + 'progress-circle-overlay-middle'] = !color && progressive && percent > 30 && percent < 80, _classNames2[prefix + 'progress-circle-overlay-finishing'] = !color && progressive && percent >= 80, _classNames2));\n    return React.createElement('div', _extends({}, others, {\n      className: wrapCls,\n      dir: rtl ? 'rtl' : undefined\n    }), React.createElement('svg', {\n      className: prefix + 'progress-circle-container',\n      viewBox: viewBox\n    }, React.createElement('path', {\n      className: prefix + 'progress-circle-underlay',\n      d: underlayPath,\n      fillOpacity: '0',\n      ref: this._underlayRefHandler\n    }), React.createElement('path', {\n      className: pathCls,\n      d: overlayPath,\n      fillOpacity: '0',\n      strokeDasharray: overlayStrokeDasharray,\n      strokeDashoffset: overlayStrokeDashoffset,\n      ref: this._overlayRefHandler,\n      stroke: color\n    })), suffixText ? React.createElement('div', {\n      className: prefix + 'progress-circle-text'\n    }, suffixText) : null);\n  };\n\n  return Circle;\n}(Component), _class.propTypes = {\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  percent: PropTypes.number,\n  state: PropTypes.oneOf(['normal', 'success', 'error']),\n  progressive: PropTypes.bool,\n  textRender: PropTypes.func,\n  prefix: PropTypes.string,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  rtl: PropTypes.bool\n}, _temp);\nCircle.displayName = 'Circle';\nexport { Circle as default };","map":null,"metadata":{},"sourceType":"module"}