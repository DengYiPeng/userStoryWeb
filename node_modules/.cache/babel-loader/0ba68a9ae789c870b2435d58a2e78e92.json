{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Animate from '../animate';\nimport Icon from '../icon';\nimport { obj, func, support, KEYCODE } from '../util';\nvar noop = func.noop,\n    bindCtx = func.bindCtx;\n/**\n * Tag\n */\n\nvar Tag = (_temp = _class = function (_Component) {\n  _inherits(Tag, _Component);\n\n  function Tag(props) {\n    _classCallCheck(this, Tag);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.onKeyDown = function (e) {\n      // 针对无障碍化要求 添加键盘SPACE事件\n      var _this$props = _this.props,\n          closable = _this$props.closable,\n          closeArea = _this$props.closeArea,\n          onClick = _this$props.onClick,\n          disabled = _this$props.disabled;\n\n      if (e.keyCode !== KEYCODE.SPACE || disabled) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (closable) {\n        _this.handleClose(closeArea);\n      } else {\n        typeof onClick === 'function' && onClick(e);\n      }\n    };\n\n    _this.state = {\n      visible: true\n    };\n    bindCtx(_this, ['handleBodyClick', 'handleTailClick', 'handleAnimationInit', 'handleAnimationEnd', 'renderTailNode']);\n    return _this;\n  }\n\n  Tag.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.__destroyed = true;\n  };\n\n  Tag.prototype.handleClose = function handleClose(from) {\n    var _this2 = this;\n\n    var _props = this.props,\n        animation = _props.animation,\n        onClose = _props.onClose;\n    var hasAnimation = support.animation && animation; // 先执行回调\n\n    var result = onClose(from, this.tagNode); // 如果回调函数返回 false，则阻止关闭行为\n\n    if (result !== false && !this.__destroyed) {\n      this.setState({\n        visible: false\n      }, function () {\n        // 如果没有动画，则直接执行 afterClose\n        !hasAnimation && _this2.props.afterClose(_this2.tagNode);\n      });\n    }\n  }; // 标签体点击\n\n\n  Tag.prototype.handleBodyClick = function handleBodyClick(e) {\n    var _props2 = this.props,\n        closable = _props2.closable,\n        closeArea = _props2.closeArea,\n        onClick = _props2.onClick;\n\n    if (closable && closeArea === 'tag') {\n      this.handleClose('tag');\n    }\n\n    if (typeof onClick === 'function') {\n      return onClick(e);\n    }\n  };\n\n  Tag.prototype.handleTailClick = function handleTailClick(e) {\n    e && e.preventDefault();\n    e && e.stopPropagation();\n    this.handleClose('tail');\n  };\n\n  Tag.prototype.handleAnimationInit = function handleAnimationInit(node) {\n    this.props.afterAppear(node);\n  };\n\n  Tag.prototype.handleAnimationEnd = function handleAnimationEnd(node) {\n    this.props.afterClose(node);\n  };\n\n  Tag.prototype.renderAnimatedTag = function renderAnimatedTag(children, animationName) {\n    return React.createElement(Animate, {\n      animation: animationName,\n      afterAppear: this.handleAnimationInit,\n      afterLeave: this.handleAnimationEnd\n    }, children);\n  };\n\n  Tag.prototype.renderTailNode = function renderTailNode() {\n    var _props3 = this.props,\n        prefix = _props3.prefix,\n        closable = _props3.closable;\n\n    if (!closable) {\n      return null;\n    }\n\n    return React.createElement('span', {\n      className: prefix + 'tag-close-btn',\n      onClick: this.handleTailClick\n    }, React.createElement(Icon, {\n      type: 'close'\n    }));\n  };\n\n  Tag.prototype.render = function render() {\n    var _classNames,\n        _this3 = this;\n\n    var _props4 = this.props,\n        prefix = _props4.prefix,\n        type = _props4.type,\n        size = _props4.size,\n        _shape = _props4._shape,\n        closable = _props4.closable,\n        closeArea = _props4.closeArea,\n        className = _props4.className,\n        children = _props4.children,\n        animation = _props4.animation,\n        disabled = _props4.disabled,\n        rtl = _props4.rtl;\n    var visible = this.state.visible;\n    var others = obj.pickOthers(Tag.propTypes, this.props);\n    var shape = closable ? 'closable' : _shape;\n    var bodyClazz = classNames([prefix + 'tag', prefix + 'tag-' + shape, prefix + 'tag-level-' + type, prefix + 'tag-' + size], (_classNames = {}, _classNames[prefix + 'tag-closable'] = closable, _classNames[prefix + 'tag-body-pointer'] = closable && closeArea === 'tag', _classNames), className); // close btn\n\n    var tailNode = this.renderTailNode(); // tag node\n\n    var tagNode = !visible ? null : React.createElement('div', _extends({\n      className: bodyClazz,\n      onClick: this.handleBodyClick,\n      onKeyDown: this.onKeyDown,\n      tabIndex: '0',\n      role: 'button',\n      'aria-disabled': disabled,\n      disabled: disabled,\n      dir: rtl ? 'rtl' : undefined,\n      ref: function ref(n) {\n        return _this3.tagNode = n;\n      }\n    }, others), React.createElement('span', {\n      className: prefix + 'tag-body'\n    }, children), tailNode);\n\n    if (animation && support.animation) {\n      return this.renderAnimatedTag(tagNode, prefix + 'tag-zoom');\n    } // 未开启或不支持动画\n\n\n    return tagNode;\n  };\n\n  return Tag;\n}(Component), _class.propTypes = {\n  /**\n   * 标签类名前缀,提供给二次开发者用\n   * @default next-\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 标签的类型\n   */\n  type: PropTypes.oneOf(['normal', 'primary']),\n\n  /**\n   * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  closable: PropTypes.bool,\n\n  /**\n   * 是否开启动效\n   */\n  animation: PropTypes.bool,\n  closeArea: PropTypes.oneOf(['tag', 'tail']),\n  onClose: PropTypes.func,\n  afterClose: PropTypes.func,\n\n  /**\n   * 标签出现动画结束后执行的回调\n   */\n  afterAppear: PropTypes.func,\n  className: PropTypes.any,\n  children: PropTypes.node,\n\n  /**\n   * 点击回调\n   */\n  onClick: PropTypes.func,\n  _shape: PropTypes.oneOf(['default', 'closable', 'checkable']),\n  disabled: PropTypes.bool,\n  rtl: PropTypes.bool\n}, _class.defaultProps = {\n  prefix: 'next-',\n  type: 'normal',\n  size: 'medium',\n  closeArea: 'tail',\n  animation: false,\n  onClose: noop,\n  afterClose: noop,\n  afterAppear: noop,\n  onClick: noop,\n  _shape: 'default',\n  disabled: false,\n  rtl: false\n}, _temp);\nTag.displayName = 'Tag';\nexport default Tag;","map":null,"metadata":{},"sourceType":"module"}