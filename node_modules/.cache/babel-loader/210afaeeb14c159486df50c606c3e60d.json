{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../../icon';\nimport { KEYCODE } from '../../util';\nimport CellComponent from '../base/cell';\nvar TreeCell = (_temp2 = _class = function (_React$Component) {\n  _inherits(TreeCell, _React$Component);\n\n  function TreeCell() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TreeCell);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onTreeNodeClick = function (record, e) {\n      e.stopPropagation();\n\n      _this.context.onTreeNodeClick(record);\n    }, _this.expandedKeydown = function (record, e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (e.keyCode === KEYCODE.ENTER) {\n        _this.onTreeNodeClick(record, e);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  TreeCell.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        colIndex = _props.colIndex,\n        record = _props.record,\n        prefix = _props.prefix,\n        primaryKey = _props.primaryKey,\n        locale = _props.locale;\n    var _context = this.context,\n        openRowKeys = _context.openTreeRowKeys,\n        indent = _context.indent,\n        isTree = _context.isTree,\n        rowSelection = _context.rowSelection;\n    var treeArrowNodeIndex = rowSelection ? 1 : 0;\n    var firstCellStyle = void 0,\n        treeArrowNode = void 0;\n\n    if (colIndex === treeArrowNodeIndex) {\n      var treeArrowType = void 0;\n\n      if (isTree) {\n        firstCellStyle = {\n          paddingLeft: indent * (record.__level + 1)\n        };\n        treeArrowNode = React.createElement(Icon, {\n          size: 'xs',\n          className: prefix + 'table-tree-placeholder'\n        });\n\n        if (record.children && record.children.length) {\n          var hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1;\n          treeArrowType = hasExpanded ? 'arrow-down' : 'arrow-right';\n          treeArrowNode = React.createElement(Icon, {\n            className: prefix + 'table-tree-arrow',\n            type: treeArrowType,\n            size: 'xs',\n            onClick: function onClick(e) {\n              return _this2.onTreeNodeClick(record, e);\n            },\n            onKeyDown: function onKeyDown(e) {\n              return _this2.expandedKeydown(record, e);\n            },\n            role: 'button',\n            tabIndex: '0',\n            'aria-expanded': hasExpanded,\n            'aria-label': hasExpanded ? locale.expanded : locale.folded\n          });\n        }\n      }\n    }\n\n    return React.createElement(CellComponent, _extends({}, this.props, {\n      innerStyle: firstCellStyle\n    }), treeArrowNode);\n  };\n\n  return TreeCell;\n}(React.Component), _class.propTypes = _extends({\n  indent: PropTypes.number,\n  locale: PropTypes.object\n}, CellComponent.propTypes), _class.defaultProps = _extends({}, CellComponent.defaultProps, {\n  component: 'td',\n  indent: 20\n}), _class.contextTypes = {\n  openTreeRowKeys: PropTypes.array,\n  indent: PropTypes.number,\n  onTreeNodeClick: PropTypes.func,\n  isTree: PropTypes.bool,\n  rowSelection: PropTypes.object\n}, _temp2);\nTreeCell.displayName = 'TreeCell';\nexport { TreeCell as default };","map":null,"metadata":{},"sourceType":"module"}