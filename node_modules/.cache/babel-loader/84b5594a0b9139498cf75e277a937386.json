{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _initialiseProps;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { func, obj } from '../util';\nimport Icon from '../icon';\nimport Base from './base';\nimport Uploader from './runtime/index';\nimport html5Uploader from './runtime/html5-uploader';\nimport List from './list';\nimport { fileToObject, getFileItem } from './util';\nvar noop = func.noop;\n/**\n * Upload\n */\n\nvar Upload = (_temp = _class = function (_Base) {\n  _inherits(Upload, _Base);\n\n  function Upload(props) {\n    _classCallCheck(this, Upload);\n\n    var _this = _possibleConstructorReturn(this, _Base.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var value = void 0;\n\n    if ('value' in props) {\n      value = props.value;\n    } else {\n      value = props.defaultValue;\n    }\n\n    _this.state = {\n      value: typeof value === 'undefined' ? [] : [].concat(value)\n    };\n    _this.uploading = false;\n    return _this;\n  }\n\n  Upload.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps && !this.uploading) {\n      this.setState({\n        value: typeof nextProps.value === 'undefined' ? [] : [].concat(nextProps.value)\n      });\n    }\n  };\n  /**\n   * 对外暴露API, 添加文件\n   * @param files\n   */\n\n\n  Upload.prototype.selectFiles = function selectFiles(files) {\n    var filesArr = files.length ? Array.prototype.slice.call(files) : [files];\n    this.onSelect(filesArr);\n  };\n\n  Upload.prototype.uploadFiles = function uploadFiles(files) {\n    var fileList = files.filter(function (file) {\n      if (file.state === 'selected') {\n        file.state = 'uploading';\n        return true;\n      }\n\n      return false;\n    }).map(function (file) {\n      return file.originFileObj;\n    });\n    fileList.length && this.uploaderRef.startUpload(fileList);\n  };\n  /**\n   * 对外暴露api，控制文件上传\n   */\n\n\n  Upload.prototype.startUpload = function startUpload() {\n    this.uploadFiles(this.state.value);\n  };\n\n  Upload.prototype.replaceFiles = function replaceFiles(old, current) {\n    var targetItem = getFileItem(old, this.state.value);\n\n    if (!targetItem) {\n      return;\n    }\n\n    current.uid = old.uid;\n    targetItem.originFileObj = current;\n  };\n\n  Upload.prototype.isUploading = function isUploading() {\n    return this.uploading;\n  };\n  /**\n   * 删除文件\n   * @param {File} file\n   * @return {void}\n   */\n\n  /**\n   * 取消上传\n   * @param {File} file\n   * @return {void}\n   */\n\n\n  Upload.prototype.render = function render() {\n    var _classNames, _classNames2;\n\n    var _props = this.props,\n        listType = _props.listType,\n        prefix = _props.prefix,\n        dragable = _props.dragable,\n        shape = _props.shape,\n        className = _props.className,\n        style = _props.style,\n        useDataURL = _props.useDataURL,\n        disabled = _props.disabled,\n        limit = _props.limit,\n        closable = _props.closable,\n        beforeUpload = _props.beforeUpload,\n        readonly = _props.readonly,\n        onRemove = _props.onRemove,\n        onCancel = _props.onCancel,\n        onPreview = _props.onPreview,\n        list = _props.list,\n        extraRender = _props.extraRender,\n        others = _objectWithoutProperties(_props, ['listType', 'prefix', 'dragable', 'shape', 'className', 'style', 'useDataURL', 'disabled', 'limit', 'closable', 'beforeUpload', 'readonly', 'onRemove', 'onCancel', 'onPreview', 'list', 'extraRender']);\n\n    var cls = classNames((_classNames = {}, _classNames[prefix + 'upload'] = true, _classNames[prefix + 'disabled'] = disabled, _classNames[prefix + 'readonly'] = readonly, _classNames[className] = className, _classNames));\n    var hidden = this.state.value.length >= limit;\n    var innerCls = classNames((_classNames2 = {}, _classNames2[prefix + 'upload-inner'] = true, _classNames2[prefix + 'hidden'] = hidden, _classNames2));\n    var children = this.props.children;\n\n    if (shape === 'card') {\n      var _classNames3;\n\n      var cardCls = classNames((_classNames3 = {}, _classNames3[prefix + 'upload-card'] = true, _classNames3[prefix + 'disabled'] = disabled, _classNames3));\n      children = React.createElement('div', {\n        className: cardCls\n      }, React.createElement(Icon, {\n        type: 'add',\n        size: 'large'\n      }), React.createElement('div', {\n        tabIndex: '0',\n        role: 'button',\n        className: prefix + 'upload-text'\n      }, children));\n    }\n\n    var otherAttributes = obj.pickAttrsWith(this.props, 'data-');\n    return React.createElement('div', _extends({\n      className: cls,\n      style: style\n    }, otherAttributes), React.createElement(Uploader, _extends({}, others, {\n      beforeUpload: beforeUpload,\n      dragable: dragable,\n      disabled: disabled,\n      className: innerCls,\n      onSelect: this.onSelect,\n      onDrop: this.onDrop,\n      onProgress: this.onProgress,\n      onSuccess: this.onSuccess,\n      onError: this.onError,\n      ref: this.saveUploaderRef\n    }), children), listType || list ? React.createElement(List, {\n      useDataURL: useDataURL,\n      uploader: this,\n      listType: listType,\n      value: this.state.value,\n      closable: closable,\n      onRemove: onRemove,\n      onCancel: onCancel,\n      onPreview: onPreview,\n      extraRender: extraRender\n    }) : null);\n  };\n\n  return Upload;\n}(Base), _class.displayName = 'Upload', _class.propTypes = _extends({}, html5Uploader.propTypes, List.propTypes, {\n  /**\n   * 样式前缀\n   */\n  prefix: PropTypes.string.isRequired,\n\n  /**\n   * 上传的地址\n   */\n  action: PropTypes.string,\n\n  /**\n   * 文件列表\n   */\n  value: PropTypes.array,\n\n  /**\n   * 默认文件列表\n   */\n  defaultValue: PropTypes.array,\n\n  /**\n   * 上传按钮形状\n   */\n  shape: PropTypes.oneOf(['card']),\n\n  /**\n   * 上传列表的样式\n   * @enumdesc 文字, 图文, 卡片\n   */\n  listType: PropTypes.oneOf(['text', 'image', 'card']),\n  list: PropTypes.any,\n\n  /**\n   * 上传额外传参\n   */\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)\n   * @param {Object} response 返回\n   * @param {File} file 文件对象\n   */\n  formatter: PropTypes.func,\n\n  /**\n   * 最大文件上传个数\n   */\n  limit: PropTypes.number,\n\n  /**\n   * 设置上传超时,单位ms\n   */\n  timeout: PropTypes.number,\n\n  /**\n   * 可选参数，是否支持拖拽上传，`ie10+` 支持。\n   */\n  dragable: PropTypes.bool,\n  closable: PropTypes.bool,\n  useDataURL: PropTypes.bool,\n\n  /**\n   * 可选参数，是否禁用上传功能\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 选择文件回调\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * 上传中\n   */\n  onProgress: PropTypes.func,\n\n  /**\n   * 上传文件改变时的状态\n   * @param {Object} info 文件事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 可选参数，上传成功回调函数，参数为请求下响应信息以及文件\n   */\n  onSuccess: PropTypes.func,\n\n  /**\n   * 移除文件回调函数，详见 [onRemove](#onRemove)\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件\n   */\n  onError: PropTypes.func,\n\n  /**\n   * 可选参数, 详见 [beforeUpload](#beforeUpload)\n   * @param {Object} files\n   * @param {Object} options\n   * @returns {Boolean|Object|Promise}\n   */\n  beforeUpload: PropTypes.func,\n\n  /**\n   * 放文件\n   */\n  onDrop: PropTypes.func,\n\n  /**\n   * 自定义class\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 子元素\n   */\n  children: PropTypes.node,\n\n  /**\n   * 自动上传\n   */\n  autoUpload: PropTypes.bool,\n\n  /**\n   * 可选参数, 用于校验文件,afterSelect仅在 autoUpload=false 的时候生效,autoUpload=true时,可以使用beforeUpload完全可以替代该功能.\n   * @param {Object} file\n   * @returns {Boolean} 返回false会阻止上传,其他则表示正常\n   */\n  afterSelect: PropTypes.func\n}), _class.defaultProps = _extends({}, html5Uploader.defaultProps, {\n  prefix: 'next-',\n  limit: Infinity,\n  autoUpload: true,\n  closable: true,\n  onSelect: noop,\n  onProgress: noop,\n  onChange: noop,\n  onSuccess: noop,\n  onRemove: noop,\n  onError: noop,\n  onDrop: noop,\n  beforeUpload: noop,\n  afterSelect: noop\n}), _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onSelect = function (files) {\n    var _props2 = _this2.props,\n        autoUpload = _props2.autoUpload,\n        afterSelect = _props2.afterSelect,\n        onSelect = _props2.onSelect,\n        limit = _props2.limit;\n    var fileList = files.map(function (file) {\n      var objFile = fileToObject(file);\n      objFile.state = 'selected';\n      return objFile;\n    });\n    var total = _this2.state.value.length + fileList.length;\n\n    if (total > limit) {\n      var more = total - limit;\n      fileList.splice(fileList.length - more, more);\n    }\n\n    var value = _this2.state.value.concat(fileList);\n    /* eslint-disable-next */\n\n\n    _this2.state.value = value;\n\n    if (autoUpload) {\n      _this2.uploadFiles(fileList);\n    }\n\n    onSelect(fileList, value);\n\n    if (!autoUpload) {\n      fileList.forEach(function (file) {\n        var isPassed = afterSelect(file);\n        func.promiseCall(isPassed, func.noop, function (error) {\n          _this2.onError(error, null, file); //TODO: handle error message\n\n        });\n      });\n\n      _this2.onChange(value, fileList);\n    }\n  };\n\n  this.onDrop = function (files) {\n    _this2.onSelect(files);\n  };\n\n  this.onProgress = function (e, file) {\n    _this2.uploading = true;\n    var value = _this2.state.value;\n    var targetItem = getFileItem(file, value);\n\n    if (!targetItem) {\n      return;\n    }\n\n    _extends(targetItem, {\n      state: 'uploading',\n      percent: e.percent\n    });\n\n    _this2.setState({\n      value: value\n    });\n\n    _this2.props.onProgress(value, targetItem);\n  };\n\n  this.onSuccess = function (response, file) {\n    _this2.uploading = false;\n    var formatter = _this2.props.formatter;\n\n    if (formatter) {\n      response = formatter(response, file);\n    }\n\n    try {\n      if (typeof response === 'string') {\n        response = JSON.parse(response);\n      }\n    } catch (e) {\n      _this2.onError(e, response, file);\n\n      return;\n    }\n\n    if (response.success === false) {\n      return _this2.onError(response.message, response, file);\n    }\n\n    var value = _this2.state.value;\n    var targetItem = getFileItem(file, value);\n\n    if (!targetItem) {\n      return;\n    }\n\n    _extends(targetItem, {\n      state: 'done',\n      response: response,\n      url: response.url,\n      downloadURL: response.downloadURL || response.url // 下载地址(可选)\n\n    });\n\n    if (!_this2.props.useDataURL) {\n      targetItem.imgURL = response.imgURL || response.url; // 缩略图地址(可选)\n    }\n\n    _this2.props.onSuccess(targetItem, value);\n\n    _this2.onChange(value, targetItem);\n  };\n\n  this.onError = function (err, response, file) {\n    _this2.uploading = false;\n    var value = _this2.state.value;\n    var targetItem = getFileItem(file, value);\n\n    if (!targetItem) {\n      return;\n    }\n\n    _extends(targetItem, {\n      state: 'error',\n      error: err,\n      response: response\n    });\n\n    _this2.props.onError(targetItem, value);\n\n    _this2.onChange(value, targetItem);\n  };\n\n  this.removeFile = function (file) {\n    file.state = 'removed';\n\n    _this2.uploaderRef.abort(file); // 删除组件时调用组件的 `abort` 方法中断上传\n\n\n    var fileList = _this2.state.value;\n    var targetItem = getFileItem(file, fileList);\n    var index = fileList.indexOf(targetItem);\n\n    if (index !== -1) {\n      fileList.splice(index, 1);\n\n      _this2.onChange(fileList, targetItem);\n    }\n  };\n\n  this.abort = function (file) {\n    var fileList = _this2.state.value;\n    var targetItem = getFileItem(file, fileList);\n    var index = fileList.indexOf(targetItem);\n\n    if (index !== -1) {\n      fileList.splice(index, 1);\n\n      _this2.onChange(fileList, targetItem);\n    }\n\n    _this2.uploaderRef.abort(file); // 取消上传时调用组件的 `abort` 方法中断上传\n\n  };\n\n  this.onChange = function (value, file) {\n    // not controlled\n    // if (!('value' in this.props)) {\n    //     this.setState({\n    //         value\n    //     });\n    // }\n    _this2.setState({\n      value: value\n    });\n\n    _this2.props.onChange(value, file);\n  };\n}, _temp);\nexport default Upload;","map":null,"metadata":{},"sourceType":"module"}