{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Overlay from '../overlay';\nimport ConfigProvider from '../config-provider';\nimport { obj, func } from '../util';\n/** Loading */\n\nvar Loading = (_temp = _class = function (_React$Component) {\n  _inherits(Loading, _React$Component);\n\n  function Loading() {\n    _classCallCheck(this, Loading);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Loading.prototype.render = function render() {\n    var _classNames2, _classNames3, _classNames4;\n\n    var _props = this.props,\n        tip = _props.tip,\n        visible = _props.visible,\n        children = _props.children,\n        className = _props.className,\n        style = _props.style,\n        indicator = _props.indicator,\n        color = _props.color,\n        prefix = _props.prefix,\n        fullScreen = _props.fullScreen,\n        onVisibleChange = _props.onVisibleChange,\n        tipAlign = _props.tipAlign,\n        size = _props.size;\n    var indicatorDom = null;\n    var dotCls = prefix + 'loading-dot';\n\n    if (indicator) {\n      indicatorDom = indicator;\n    } else {\n      var _classNames;\n\n      var backgroundColor = color;\n      var fusionReactorCls = classNames((_classNames = {}, _classNames[prefix + 'loading-fusion-reactor'] = true, _classNames[prefix + 'loading-medium-fusion-reactor'] = size === 'medium', _classNames));\n      indicatorDom = React.createElement('div', {\n        className: fusionReactorCls\n      }, React.createElement('span', {\n        className: dotCls,\n        style: {\n          backgroundColor: backgroundColor\n        }\n      }), React.createElement('span', {\n        className: dotCls,\n        style: {\n          backgroundColor: backgroundColor\n        }\n      }), React.createElement('span', {\n        className: dotCls,\n        style: {\n          backgroundColor: backgroundColor\n        }\n      }), React.createElement('span', {\n        className: dotCls,\n        style: {\n          backgroundColor: backgroundColor\n        }\n      }));\n    }\n\n    var loadingCls = classNames((_classNames2 = {}, _classNames2[prefix + 'loading'] = true, _classNames2[prefix + 'open'] = visible, _classNames2[className] = className, _classNames2));\n    var tipCls = classNames((_classNames3 = {}, _classNames3[prefix + 'loading-tip'] = true, _classNames3[prefix + 'loading-right-tip'] = tipAlign === 'right', _classNames3));\n    var others = obj.pickOthers(Loading.propTypes, this.props);\n    var contentCls = classNames((_classNames4 = {}, _classNames4[prefix + 'loading-component'] = visible, _classNames4[prefix + 'loading-wrap'] = true, _classNames4));\n    return fullScreen ? [children, React.createElement(Overlay, _extends({\n      key: 'overlay',\n      hasMask: true,\n      align: 'cc cc'\n    }, others, {\n      className: className,\n      style: style,\n      visible: visible,\n      onRequestClose: onVisibleChange\n    }), React.createElement('div', {\n      className: tipCls\n    }, React.createElement('div', {\n      className: prefix + 'loading-indicator'\n    }, indicatorDom), React.createElement('div', {\n      className: prefix + 'loading-tip-content'\n    }, tip), React.createElement('div', {\n      className: prefix + 'loading-tip-placeholder'\n    }, tip)))] : React.createElement('div', _extends({\n      className: loadingCls,\n      style: style\n    }, others), visible ? React.createElement('div', {\n      className: tipCls\n    }, React.createElement('div', {\n      className: prefix + 'loading-indicator'\n    }, indicatorDom), React.createElement('div', {\n      className: prefix + 'loading-tip-content'\n    }, tip), React.createElement('div', {\n      className: prefix + 'loading-tip-placeholder'\n    }, tip)) : null, React.createElement('div', {\n      className: contentCls\n    }, visible ? React.createElement('div', {\n      className: prefix + 'loading-masker'\n    }) : null, children));\n  };\n\n  return Loading;\n}(React.Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 自定义内容\n   */\n  tip: PropTypes.any,\n\n  /**\n   * 自定义内容位置\n   * @enumdesc 出现在动画右边, 出现在动画下面\n   */\n  tipAlign: PropTypes.oneOf(['right', 'bottom']),\n\n  /**\n   * loading 状态, 默认 true\n   */\n  visible: PropTypes.bool,\n  onVisibleChange: PropTypes.func,\n\n  /**\n   * 自定义class\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 设置动画尺寸\n   * @description 仅仅对默认动画效果起作用\n   * @enumdesc 大号, 中号\n   */\n  size: PropTypes.oneOf(['large', 'medium']),\n\n  /**\n   * 自定义动画\n   */\n  indicator: PropTypes.any,\n\n  /**\n   * 动画颜色\n   */\n  color: PropTypes.string,\n\n  /**\n   * 全屏展示\n   */\n  fullScreen: PropTypes.bool,\n\n  /**\n   * 子元素\n   */\n  children: PropTypes.any\n}, _class.defaultProps = {\n  prefix: 'next-',\n  visible: true,\n  onVisibleChange: func.noop,\n  animate: null,\n  tipAlign: 'bottom',\n  size: 'large'\n}, _temp);\nLoading.displayName = 'Loading';\nexport default ConfigProvider.config(Loading);","map":null,"metadata":{},"sourceType":"module"}