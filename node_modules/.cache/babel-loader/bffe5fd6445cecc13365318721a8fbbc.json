{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport RowComponent from './tree/row';\nimport CellComponent from './tree/cell';\nimport { statics } from './util';\n\nvar noop = function noop() {};\n\nexport default function tree(BaseComponent) {\n  var _class, _temp;\n\n  var TreeTable = (_temp = _class = function (_React$Component) {\n    _inherits(TreeTable, _React$Component);\n\n    function TreeTable(props, context) {\n      _classCallCheck(this, TreeTable);\n\n      var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n      _this.onTreeNodeClick = function (record) {\n        var primaryKey = _this.props.primaryKey,\n            id = record[primaryKey],\n            dataSource = _this.ds,\n            openRowKeys = [].concat(_this.state.openRowKeys),\n            index = openRowKeys.indexOf(id),\n            getChildrenKeyById = function getChildrenKeyById(id) {\n          var ret = [id];\n\n          var loop = function loop(data) {\n            data.forEach(function (item) {\n              ret.push(item[primaryKey]);\n\n              if (item.children) {\n                loop(item.children);\n              }\n            });\n          };\n\n          dataSource.forEach(function (item) {\n            if (item[primaryKey] === id) {\n              if (item.children) {\n                loop(item.children);\n              }\n            }\n          });\n          return ret;\n        };\n\n        if (index > -1) {\n          // 不仅要删除当前的openRowKey，还需要删除关联子节点的openRowKey\n          var ids = getChildrenKeyById(id);\n          ids.forEach(function (id) {\n            var i = openRowKeys.indexOf(id);\n\n            if (i > -1) {\n              openRowKeys.splice(i, 1);\n            }\n          });\n        } else {\n          openRowKeys.push(id);\n        }\n\n        if (!('openRowKeys' in _this.props)) {\n          _this.setState({\n            openRowKeys: openRowKeys\n          });\n        }\n\n        _this.props.onRowOpen(openRowKeys, id, index === -1, record);\n      };\n\n      _this.state = {\n        openRowKeys: props.openRowKeys || []\n      };\n      return _this;\n    }\n\n    TreeTable.prototype.getChildContext = function getChildContext() {\n      return {\n        openTreeRowKeys: this.state.openRowKeys,\n        indent: this.props.indent,\n        treeStatus: this.getTreeNodeStatus(this.ds),\n        onTreeNodeClick: this.onTreeNodeClick,\n        isTree: this.props.isTree\n      };\n    };\n\n    TreeTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if ('openRowKeys' in nextProps) {\n        var openRowKeys = nextProps.openRowKeys;\n        this.setState({\n          openRowKeys: openRowKeys\n        });\n      }\n    };\n\n    TreeTable.prototype.normalizeDataSource = function normalizeDataSource(dataSource) {\n      var ret = [],\n          loop = function loop(dataSource, level) {\n        dataSource.forEach(function (item) {\n          item.__level = level;\n          ret.push(item);\n\n          if (item.children) {\n            loop(item.children, level + 1);\n          }\n        });\n      };\n\n      loop(dataSource, 0);\n      this.ds = ret;\n      return ret;\n    };\n\n    TreeTable.prototype.getTreeNodeStatus = function getTreeNodeStatus() {\n      var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var openRowKeys = this.state.openRowKeys,\n          primaryKey = this.props.primaryKey,\n          ret = [];\n      openRowKeys.forEach(function (openKey) {\n        dataSource.forEach(function (item) {\n          if (item[primaryKey] === openKey) {\n            if (item.children) {\n              item.children.forEach(function (child) {\n                ret.push(child[primaryKey]);\n              });\n            }\n          }\n        });\n      });\n      return ret;\n    };\n\n    TreeTable.prototype.render = function render() {\n      /* eslint-disable no-unused-vars, prefer-const */\n      var _props = this.props,\n          components = _props.components,\n          isTree = _props.isTree,\n          dataSource = _props.dataSource,\n          indent = _props.indent,\n          others = _objectWithoutProperties(_props, ['components', 'isTree', 'dataSource', 'indent']);\n\n      if (isTree) {\n        components = _extends({}, components);\n\n        if (!components.Row) {\n          components.Row = RowComponent;\n        }\n\n        if (!components.Cell) {\n          components.Cell = CellComponent;\n        }\n\n        dataSource = this.normalizeDataSource(dataSource);\n      }\n\n      return React.createElement(BaseComponent, _extends({}, others, {\n        dataSource: dataSource,\n        components: components\n      }));\n    };\n\n    return TreeTable;\n  }(React.Component), _class.TreeRow = RowComponent, _class.TreeCell = CellComponent, _class.propTypes = _extends({\n    /**\n     * 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作\n     */\n    openRowKeys: PropTypes.array,\n\n    /**\n     * 点击tree展开或者关闭的时候触发的事件\n     * @param {Array} openRowKeys tree模式下展开的key\n     * @param {String} currentRowKey 当前点击行的key\n     * @param {Boolean} opened 当前点击是展开还是收起\n     * @param {Object} currentRecord 当前点击行的记录\n     */\n    onRowOpen: PropTypes.func,\n\n    /**\n     * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中\n     */\n    primaryKey: PropTypes.string,\n\n    /**\n     * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效\n     */\n    indent: PropTypes.number,\n\n    /**\n     * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table\n     */\n    isTree: PropTypes.bool,\n    locale: PropTypes.object\n  }, BaseComponent.propTypes), _class.defaultProps = _extends({}, BaseComponent.defaultProps, {\n    primaryKey: 'id',\n    onRowOpen: noop,\n    components: {},\n    indent: 12\n  }), _class.childContextTypes = {\n    openTreeRowKeys: PropTypes.array,\n    indent: PropTypes.number,\n    treeStatus: PropTypes.array,\n    onTreeNodeClick: PropTypes.func,\n    isTree: PropTypes.bool\n  }, _temp);\n  TreeTable.displayName = 'TreeTable';\n  statics(TreeTable, BaseComponent);\n  return TreeTable;\n}","map":null,"metadata":{},"sourceType":"module"}