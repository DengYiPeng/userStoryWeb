{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport ReactDOM from 'react-dom';\n\nvar checkSpecKeys = function checkSpecKeys(spec, keysArray) {\n  return keysArray.reduce(function (value, key) {\n    return value && spec.hasOwnProperty(key);\n  }, true) ? null : console.error('Keys Missing', spec);\n  /*eslint no-console:0*/\n};\n\nexport var getTrackCSS = function getTrackCSS(spec) {\n  checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth']);\n  var trackWidth = void 0;\n  var trackHeight = void 0;\n  var trackChildren = spec.slideCount + 2 * spec.slidesToShow;\n\n  if (!spec.vertical) {\n    if (spec.variableWidth) {\n      trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;\n    } else if (spec.centerMode) {\n      trackWidth = (spec.slideCount + 2 * (spec.slidesToShow + 1)) * spec.slideWidth;\n    } else {\n      trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;\n    }\n  } else {\n    trackHeight = trackChildren * spec.slideHeight;\n  }\n\n  var style = {\n    opacity: 1\n  };\n  var transform = {\n    WebkitTransform: !spec.vertical ? 'translate3d(' + spec.left + 'px, 0px, 0px)' : 'translate3d(0px, ' + spec.left + 'px, 0px)',\n    transform: !spec.vertical ? 'translate3d(' + spec.left + 'px, 0px, 0px)' : 'translate3d(0px, ' + spec.left + 'px, 0px)',\n    transition: '',\n    WebkitTransition: '',\n    msTransform: !spec.vertical ? 'translateX(' + spec.left + 'px)' : 'translateY(' + spec.left + 'px)'\n  };\n\n  if (trackWidth) {\n    style = _extends({}, style, {\n      width: trackWidth\n    });\n  }\n\n  if (trackHeight) {\n    style = _extends({}, style, {\n      height: trackHeight\n    });\n  }\n\n  if (spec.animation !== 'fade') {\n    style = _extends({}, style, transform);\n  }\n\n  return style;\n};\nexport var getTrackAnimateCSS = function getTrackAnimateCSS(spec) {\n  checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth', 'speed', 'cssEase']);\n  var style = getTrackCSS(spec); // useCSS is true by default so it can be undefined\n\n  style.WebkitTransition = '-webkit-transform ' + spec.speed + 'ms ' + spec.cssEase;\n  style.transition = 'transform ' + spec.speed + 'ms ' + spec.cssEase;\n  return style;\n};\nexport var getTrackLeft = function getTrackLeft(spec) {\n  checkSpecKeys(spec, ['slideIndex', 'trackRef', 'infinite', 'centerMode', 'slideCount', 'slidesToShow', 'slidesToScroll', 'slideWidth', 'listWidth', 'variableWidth', 'slideHeight']);\n  var slideOffset = 0;\n  var targetLeft = void 0;\n  var targetSlide = void 0;\n  var verticalOffset = 0;\n\n  if (spec.animation === 'fade') {\n    return 0;\n  }\n\n  if (spec.infinite) {\n    if (spec.slideCount > spec.slidesToShow) {\n      slideOffset = spec.slideWidth * spec.slidesToShow * -1;\n      verticalOffset = spec.slideHeight * spec.slidesToShow * -1;\n    }\n\n    if (spec.slideCount % spec.slidesToScroll !== 0) {\n      var condition = spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow;\n\n      if (spec.rtl) {\n        var slideIndex = spec.slideIndex >= spec.slideCount ? spec.slideCount - spec.slideIndex : spec.slideIndex;\n        condition = slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow;\n      }\n\n      if (condition) {\n        if (spec.slideIndex > spec.slideCount) {\n          slideOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideWidth * -1;\n          verticalOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideHeight * -1;\n        } else {\n          slideOffset = spec.slideCount % spec.slidesToScroll * spec.slideWidth * -1;\n          verticalOffset = spec.slideCount % spec.slidesToScroll * spec.slideHeight * -1;\n        }\n      }\n    }\n  } else {\n    /* eslint-disable no-lonely-if */\n    if (spec.slideCount % spec.slidesToScroll !== 0) {\n      if (spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow) {\n        var slidesToOffset = spec.slidesToShow - spec.slideCount % spec.slidesToScroll;\n        slideOffset = slidesToOffset * spec.slideWidth;\n      }\n    }\n  }\n\n  if (spec.centerMode) {\n    if (spec.infinite) {\n      slideOffset += spec.slideWidth * Math.floor(spec.slidesToShow / 2);\n    } else {\n      slideOffset = spec.slideWidth * Math.floor(spec.slidesToShow / 2);\n    }\n  }\n\n  if (!spec.vertical) {\n    targetLeft = spec.slideIndex * spec.slideWidth * -1 + slideOffset;\n  } else {\n    targetLeft = spec.slideIndex * spec.slideHeight * -1 + verticalOffset;\n  }\n\n  if (spec.variableWidth === true) {\n    var targetSlideIndex = void 0;\n\n    if (spec.slideCount <= spec.slidesToShow || spec.infinite === false) {\n      targetSlide = ReactDOM.findDOMNode(spec.trackRef).childNodes[spec.slideIndex];\n    } else {\n      targetSlideIndex = spec.slideIndex + spec.slidesToShow;\n      targetSlide = ReactDOM.findDOMNode(spec.trackRef).childNodes[targetSlideIndex];\n    }\n\n    targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;\n\n    if (spec.centerMode === true) {\n      if (spec.infinite === false) {\n        targetSlide = ReactDOM.findDOMNode(spec.trackRef).children[spec.slideIndex];\n      } else {\n        targetSlide = ReactDOM.findDOMNode(spec.trackRef).children[spec.slideIndex + spec.slidesToShow + 1];\n      }\n\n      if (targetSlide) {\n        targetLeft = targetSlide.offsetLeft * -1 + (spec.listWidth - targetSlide.offsetWidth) / 2;\n      }\n    }\n  }\n\n  return targetLeft;\n};","map":null,"metadata":{},"sourceType":"module"}