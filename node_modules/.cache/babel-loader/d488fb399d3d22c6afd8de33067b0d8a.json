{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { dom } from '../util';\nimport VirtualBody from './virtual/body';\nimport { statics } from './util';\n\nvar noop = function noop() {};\n\nexport default function virtual(BaseComponent) {\n  var _class, _temp2;\n\n  var VirtualTable = (_temp2 = _class = function (_React$Component) {\n    _inherits(VirtualTable, _React$Component);\n\n    function VirtualTable() {\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, VirtualTable);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n        rowHeight: _this.props.rowHeight,\n        scrollToRow: _this.props.scrollToRow,\n        height: _this.props.maxBodyHeight\n      }, _this.onScroll = function () {\n        // 避免横向滚动带来的性能问题\n        var scrollTop = _this.bodyNode.scrollTop;\n\n        if (scrollTop === _this.lastScrollTop) {\n          return;\n        }\n\n        var start = _this.computeScrollToRow(scrollTop);\n\n        if (!('scrollToRow' in _this.props)) {\n          _this.setState({\n            scrollToRow: start\n          });\n        }\n\n        _this.props.onBodyScroll(start);\n\n        _this.lastScrollTop = scrollTop;\n      }, _this.getBodyNode = function (node, lockType) {\n        lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';\n        _this['body' + lockType + 'Node'] = node;\n      }, _this.getTableInstance = function (type, instance) {\n        type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';\n        _this['table' + type + 'Inc'] = instance;\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    VirtualTable.prototype.getChildContext = function getChildContext() {\n      return {\n        onVirtualScroll: this.onScroll,\n        bodyHeight: this.computeBodyHeight(),\n        innerTop: this.computeInnerTop(),\n        getBodyNode: this.getBodyNode,\n        getTableInstanceForVirtual: this.getTableInstance,\n        rowSelection: this.rowSelection\n      };\n    };\n\n    VirtualTable.prototype.componentWillMount = function componentWillMount() {\n      var _props = this.props,\n          useVirtual = _props.useVirtual,\n          dataSource = _props.dataSource;\n      this.hasVirtualData = useVirtual && dataSource && dataSource.length > 0;\n    };\n\n    VirtualTable.prototype.componentDidMount = function componentDidMount() {\n      if (this.hasVirtualData) {\n        this.lastScrollTop = this.bodyNode.scrollTop;\n      }\n\n      this.adjustScrollTop();\n      this.adjustSize();\n      this.reComputeSize();\n    };\n\n    VirtualTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var useVirtual = nextProps.useVirtual,\n          dataSource = nextProps.dataSource;\n      this.hasVirtualData = useVirtual && dataSource && dataSource.length > 0;\n\n      if ('maxBodyHeight' in nextProps) {\n        if (this.state.height !== nextProps.maxBodyHeight) {\n          this.setState({\n            height: nextProps.maxBodyHeight\n          });\n        }\n      }\n\n      if ('scrollToRow' in nextProps) {\n        this.setState({\n          scrollToRow: nextProps.scrollToRow\n        });\n      }\n\n      if (this.state.rowHeight && 'rowHeight' in nextProps) {\n        var row = this.getRowNode();\n        var rowClientHeight = row && row.clientHeight;\n\n        if (rowClientHeight && rowClientHeight !== this.state.rowHeight) {\n          this.setState({\n            rowHeight: rowClientHeight\n          });\n        }\n      }\n    };\n\n    VirtualTable.prototype.componentDidUpdate = function componentDidUpdate() {\n      this.adjustScrollTop();\n      this.adjustSize();\n      this.reComputeSize();\n    };\n\n    VirtualTable.prototype.reComputeSize = function reComputeSize() {\n      var rowHeight = this.state.rowHeight;\n\n      if (typeof rowHeight === 'function' && this.hasVirtualData) {\n        var row = this.getRowNode();\n        var rowClientHeight = row && row.clientHeight;\n\n        if (rowClientHeight !== this.state.rowHeight) {\n          this.setState({\n            rowHeight: rowClientHeight\n          });\n        }\n      }\n    };\n\n    VirtualTable.prototype.computeBodyHeight = function computeBodyHeight() {\n      var rowHeight = this.state.rowHeight;\n      var dataSource = this.props.dataSource;\n\n      if (typeof rowHeight === 'function') {\n        return 0;\n      }\n\n      return dataSource.length * rowHeight;\n    };\n\n    VirtualTable.prototype.computeInnerTop = function computeInnerTop() {\n      var rowHeight = this.state.rowHeight;\n\n      if (typeof rowHeight === 'function') {\n        return 0;\n      }\n\n      return this.start * rowHeight;\n    };\n\n    VirtualTable.prototype.getVisibleRange = function getVisibleRange(ExpectStart) {\n      var _state = this.state,\n          height = _state.height,\n          rowHeight = _state.rowHeight;\n      var len = this.props.dataSource.length;\n      var end = void 0,\n          visibleCount = 0;\n      var start = 0;\n\n      if (typeof rowHeight === 'function') {\n        // try get cell height;\n        end = 1;\n      } else {\n        visibleCount = parseInt(height / rowHeight, 10);\n\n        if ('number' === typeof ExpectStart) {\n          start = ExpectStart < len ? ExpectStart : 0;\n        }\n\n        end = Math.min(+start + 1 + visibleCount + 10, len);\n      }\n\n      this.end = end;\n      this.visibleCount = visibleCount;\n      return {\n        start: start,\n        end: end\n      };\n    };\n\n    VirtualTable.prototype.adjustScrollTop = function adjustScrollTop() {\n      if (this.hasVirtualData) {\n        this.bodyNode.scrollTop = this.lastScrollTop % this.state.rowHeight + this.state.rowHeight * this.state.scrollToRow;\n      }\n    };\n\n    VirtualTable.prototype.adjustSize = function adjustSize() {\n      if (this.hasVirtualData) {\n        var body = this.bodyNode;\n        var virtualScrollNode = body.querySelector('div');\n        var clientHeight = body.clientHeight,\n            clientWidth = body.clientWidth;\n        var tableInc = this.tableInc;\n        var tableNode = findDOMNode(tableInc);\n        var prefix = this.props.prefix;\n        var headerNode = tableNode.querySelector('.' + prefix + 'table-header table');\n        var headerClientWidth = headerNode && headerNode.clientWidth;\n\n        if (clientWidth < headerClientWidth) {\n          dom.setStyle(virtualScrollNode, 'min-width', headerClientWidth);\n          var leftNode = this.bodyLeftNode;\n          var rightNode = this.bodyRightNode;\n          leftNode && dom.setStyle(leftNode, 'max-height', clientHeight);\n          rightNode && dom.setStyle(rightNode, 'max-height', clientHeight);\n          this.hasScrollbar = true;\n        } else {\n          this.hasScrollbar = false;\n        }\n      }\n    };\n\n    VirtualTable.prototype.computeScrollToRow = function computeScrollToRow(offset) {\n      var rowHeight = this.state.rowHeight;\n      var start = parseInt(offset / rowHeight);\n      this.start = start;\n      return start;\n    };\n\n    VirtualTable.prototype.getRowNode = function getRowNode() {\n      try {\n        // in case of finding an unmounted component due to cached data\n        // need to clear refs of this.tableInc when dataSource Changed\n        // use try catch for temporary\n        return findDOMNode(this.tableInc.getRowRef(0));\n      } catch (error) {\n        return null;\n      }\n    };\n\n    VirtualTable.prototype.render = function render() {\n      /* eslint-disable no-unused-vars, prefer-const */\n      var _props2 = this.props,\n          useVirtual = _props2.useVirtual,\n          components = _props2.components,\n          dataSource = _props2.dataSource,\n          fixedHeader = _props2.fixedHeader,\n          rowHeight = _props2.rowHeight,\n          scrollToRow = _props2.scrollToRow,\n          onBodyScroll = _props2.onBodyScroll,\n          others = _objectWithoutProperties(_props2, ['useVirtual', 'components', 'dataSource', 'fixedHeader', 'rowHeight', 'scrollToRow', 'onBodyScroll']);\n\n      var entireDataSource = dataSource;\n      this.rowSelection = this.props.rowSelection;\n\n      if (this.hasVirtualData) {\n        components = _extends({}, components);\n\n        var _getVisibleRange = this.getVisibleRange(this.state.scrollToRow),\n            start = _getVisibleRange.start,\n            end = _getVisibleRange.end;\n\n        dataSource = dataSource.slice(start, end);\n\n        if (!components.Body) {\n          components.Body = VirtualBody;\n        }\n\n        fixedHeader = true;\n      }\n\n      return React.createElement(BaseComponent, _extends({}, others, {\n        dataSource: dataSource,\n        entireDataSource: entireDataSource,\n        components: components,\n        fixedHeader: fixedHeader\n      }));\n    };\n\n    return VirtualTable;\n  }(React.Component), _class.VirtualBody = VirtualBody, _class.propTypes = _extends({\n    /**\n     * 是否开启虚拟滚动\n     */\n    useVirtual: PropTypes.bool,\n\n    /**\n     * 设置行高\n     */\n    rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    maxBodyHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    primaryKey: PropTypes.string,\n    dataSource: PropTypes.array,\n\n    /**\n     * 在内容区域滚动的时候触发的函数\n     */\n    onBodyScroll: PropTypes.func\n  }, BaseComponent.propTypes), _class.defaultProps = _extends({}, BaseComponent.defaultProps, {\n    primaryKey: 'id',\n    rowHeight: noop,\n    maxBodyHeight: 200,\n    components: {},\n    prefix: 'next-',\n    onBodyScroll: noop\n  }), _class.childContextTypes = {\n    onVirtualScroll: PropTypes.func,\n    bodyHeight: PropTypes.number,\n    innerTop: PropTypes.number,\n    getBodyNode: PropTypes.func,\n    getTableInstanceForVirtual: PropTypes.func,\n    rowSelection: PropTypes.object\n  }, _temp2);\n  VirtualTable.displayName = 'VirtualTable';\n  statics(VirtualTable, BaseComponent);\n  return VirtualTable;\n}","map":null,"metadata":{},"sourceType":"module"}