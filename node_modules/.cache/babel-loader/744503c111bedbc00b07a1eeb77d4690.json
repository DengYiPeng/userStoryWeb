{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport classnames from 'classnames';\nimport Icon from '../../icon';\nimport { isDisabledDate, YEAR_TABLE_COL_COUNT, YEAR_TABLE_ROW_COUNT } from '../utils';\n\nvar YearTable = function (_React$PureComponent) {\n  _inherits(YearTable, _React$PureComponent);\n\n  function YearTable() {\n    _classCallCheck(this, YearTable);\n\n    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));\n  }\n\n  YearTable.prototype.onYearCellClick = function onYearCellClick(date) {\n    this.props.onSelectYear(date, 'month');\n  };\n\n  YearTable.prototype.render = function render() {\n    var _props = this.props,\n        prefix = _props.prefix,\n        value = _props.value,\n        today = _props.today,\n        visibleMonth = _props.visibleMonth,\n        locale = _props.locale,\n        disabledDate = _props.disabledDate,\n        goPrevDecade = _props.goPrevDecade,\n        goNextDecade = _props.goNextDecade;\n    var currentYear = today.year();\n    var selectedYear = value ? value.year() : null;\n    var visibleYear = visibleMonth.year();\n    var startYear = Math.floor(visibleYear / 10) * 10;\n    var yearElements = [];\n    var counter = 0;\n    var lastRowIndex = YEAR_TABLE_ROW_COUNT - 1;\n    var lastColIndex = YEAR_TABLE_COL_COUNT - 1;\n\n    for (var i = 0; i < YEAR_TABLE_ROW_COUNT; i++) {\n      var rowElements = [];\n\n      for (var j = 0; j < YEAR_TABLE_COL_COUNT; j++) {\n        var _classnames;\n\n        var content = void 0;\n        var year = void 0;\n        var isDisabled = false;\n        var onClick = void 0;\n        var title = void 0;\n\n        if (i === 0 && j === 0) {\n          title = locale.prevDecade;\n          onClick = goPrevDecade;\n          content = React.createElement(Icon, {\n            type: 'arrow-left',\n            size: 'xs'\n          });\n        } else if (i === lastRowIndex && j === lastColIndex) {\n          title = locale.nextDecade;\n          onClick = goNextDecade;\n          content = React.createElement(Icon, {\n            type: 'arrow-right',\n            size: 'xs'\n          });\n        } else {\n          year = startYear + counter++;\n          content = year;\n          title = year;\n          var yearDate = visibleMonth.clone().year(year);\n          isDisabled = isDisabledDate(yearDate, disabledDate);\n          !isDisabled && (onClick = this.onYearCellClick.bind(this, yearDate));\n        }\n\n        var isSelected = year === selectedYear;\n        var classNames = classnames((_classnames = {}, _classnames[prefix + 'calendar-cell'] = true, _classnames[prefix + 'calendar-cell-current'] = year === currentYear, _classnames[prefix + 'selected'] = isSelected, _classnames[prefix + 'disabled'] = isDisabled, _classnames));\n        rowElements.push(React.createElement('td', {\n          key: i + '-' + j,\n          className: classNames,\n          role: 'cell'\n        }, React.createElement('div', {\n          className: prefix + 'calendar-year',\n          onClick: onClick,\n          title: title,\n          'aria-disabled': isDisabled ? 'true' : 'false',\n          'aria-selected': isSelected ? 'true' : 'false'\n        }, content)));\n      }\n\n      yearElements.push(React.createElement('tr', {\n        key: i,\n        role: 'row'\n      }, rowElements));\n    }\n\n    return React.createElement('table', {\n      className: prefix + 'calendar-table',\n      role: 'grid'\n    }, React.createElement('tbody', {\n      className: prefix + 'calendar-tbody',\n      role: 'rowgroup'\n    }, yearElements));\n  };\n\n  return YearTable;\n}(React.PureComponent);\n\nexport default YearTable;","map":null,"metadata":{},"sourceType":"module"}