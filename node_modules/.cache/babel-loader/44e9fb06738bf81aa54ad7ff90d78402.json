{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _initialiseProps;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport classnames from 'classnames';\nimport locale from '../locale/zh-cn';\nimport { func, obj } from '../util';\nimport CardHeader from './head/card-header';\nimport DatePanelHeader from './head/date-panel-header';\nimport MonthPanelHeader from './head/month-panel-header';\nimport YearPanelHeader from './head/year-panel-header';\nimport DateTable from './table/date-table';\nimport MonthTable from './table/month-table';\nimport YearTable from './table/year-table';\nimport { checkMomentObj, formatDateValue, getVisibleMonth, isSameYearMonth, CALENDAR_MODES, CALENDAR_MODE_DATE, CALENDAR_MODE_MONTH, CALENDAR_MODE_YEAR } from './utils';\n/** Calendar */\n\nvar Calendar = (_temp = _class = function (_Component) {\n  _inherits(Calendar, _Component);\n\n  function Calendar(props, context) {\n    _classCallCheck(this, Calendar);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _initialiseProps.call(_this);\n\n    var value = formatDateValue(props.value || props.defaultValue);\n    var visibleMonth = getVisibleMonth(props.defaultVisibleMonth, value);\n    _this.MODES = props.modes;\n    _this.today = moment();\n    _this.state = {\n      value: value,\n      mode: props.mode || _this.MODES[0],\n      visibleMonth: visibleMonth\n    };\n    return _this;\n  }\n\n  Calendar.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      var value = formatDateValue(nextProps.value);\n      this.setState({\n        value: value\n      });\n\n      if (value) {\n        this.setState({\n          visibleMonth: value\n        });\n      }\n    }\n\n    if (nextProps.mode && this.MODES.indexOf(nextProps.mode) > -1) {\n      this.setState({\n        mode: nextProps.mode\n      });\n    }\n  };\n  /**\n   * 根据日期偏移量设置当前展示的月份\n   * @param {Number} offset 日期偏移的数量\n   * @param {String} type 日期偏移的类型 days, months, years\n   */\n\n\n  Calendar.prototype.changeVisibleMonthByOffset = function changeVisibleMonthByOffset(offset, type) {\n    var cloneValue = this.state.visibleMonth.clone();\n    cloneValue.add(offset, type);\n    this.changeVisibleMonth(cloneValue, 'buttonClick');\n  };\n\n  Calendar.prototype.render = function render() {\n    var _classnames, _tables, _panelHeaders;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        rtl = _props.rtl,\n        className = _props.className,\n        shape = _props.shape,\n        showOtherMonth = _props.showOtherMonth,\n        format = _props.format,\n        locale = _props.locale,\n        dateCellRender = _props.dateCellRender,\n        monthCellRender = _props.monthCellRender,\n        disabledDate = _props.disabledDate,\n        others = _objectWithoutProperties(_props, ['prefix', 'rtl', 'className', 'shape', 'showOtherMonth', 'format', 'locale', 'dateCellRender', 'monthCellRender', 'disabledDate']);\n\n    var state = this.state;\n    var classNames = classnames((_classnames = {}, _classnames[prefix + 'calendar'] = true, _classnames[prefix + 'calendar-' + shape] = shape, _classnames), className);\n\n    if (rtl) {\n      others.dir = 'rtl';\n    }\n\n    var visibleMonth = state.visibleMonth; // reset moment locale\n\n    if (locale.momentLocale) {\n      state.value && state.value.locale(locale.momentLocale);\n      visibleMonth.locale(locale.momentLocale);\n    }\n\n    var localeData = visibleMonth.localeData();\n    var headerProps = {\n      prefix: prefix,\n      value: state.value,\n      mode: state.mode,\n      locale: locale,\n      rtl: rtl,\n      visibleMonth: visibleMonth,\n      momentLocale: localeData,\n      changeMode: this.changeMode,\n      changeVisibleMonth: this.changeVisibleMonth,\n      goNextDecade: this.goNextDecade,\n      goNextYear: this.goNextYear,\n      goNextMonth: this.goNextMonth,\n      goPrevDecade: this.goPrevDecade,\n      goPrevYear: this.goPrevYear,\n      goPrevMonth: this.goPrevMonth\n    };\n    var tableProps = {\n      prefix: prefix,\n      visibleMonth: visibleMonth,\n      showOtherMonth: showOtherMonth,\n      value: state.value,\n      mode: state.mode,\n      locale: locale,\n      dateCellRender: dateCellRender,\n      monthCellRender: monthCellRender,\n      disabledDate: disabledDate,\n      momentLocale: localeData,\n      today: this.today,\n      goPrevDecade: this.goPrevDecade,\n      goNextDecade: this.goNextDecade\n    };\n    var tables = (_tables = {}, _tables[CALENDAR_MODE_DATE] = React.createElement(DateTable, _extends({\n      format: format\n    }, tableProps, {\n      onSelectDate: this.onSelectCell\n    })), _tables[CALENDAR_MODE_MONTH] = React.createElement(MonthTable, _extends({}, tableProps, {\n      onSelectMonth: this.onSelectCell\n    })), _tables[CALENDAR_MODE_YEAR] = React.createElement(YearTable, _extends({}, tableProps, {\n      rtl: rtl,\n      onSelectYear: this.onSelectCell\n    })), _tables);\n    var panelHeaders = (_panelHeaders = {}, _panelHeaders[CALENDAR_MODE_DATE] = React.createElement(DatePanelHeader, headerProps), _panelHeaders[CALENDAR_MODE_MONTH] = React.createElement(MonthPanelHeader, headerProps), _panelHeaders[CALENDAR_MODE_YEAR] = React.createElement(YearPanelHeader, headerProps), _panelHeaders);\n    return React.createElement('div', _extends({}, obj.pickOthers(Calendar.propTypes, others), {\n      className: classNames\n    }), shape === 'panel' ? panelHeaders[state.mode] : React.createElement(CardHeader, headerProps), tables[state.mode]);\n  };\n\n  return Calendar;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 默认选中的日期（moment 对象）\n   */\n  defaultValue: checkMomentObj,\n\n  /**\n   * 选中的日期值 (moment 对象)\n   */\n  value: checkMomentObj,\n  // 面板模式\n  mode: PropTypes.oneOf(CALENDAR_MODES),\n  // 面板可变化的模式列表，仅初始化时接收一次\n  modes: PropTypes.array,\n  // 日期值的格式（用于日期title显示的格式）\n  format: PropTypes.string,\n\n  /**\n   * 是否展示非本月的日期\n   */\n  showOtherMonth: PropTypes.bool,\n\n  /**\n   * 默认展示的月份\n   */\n  defaultVisibleMonth: PropTypes.func,\n\n  /**\n   * 展现形态\n   */\n  shape: PropTypes.oneOf(['card', 'fullscreen', 'panel']),\n\n  /**\n   * 选择日期单元格时的回调\n   * @param {Object} value 对应的日期值 (moment 对象)\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * 展现的月份变化时的回调\n   * @param {Object} value 显示的月份 (moment 对象)\n   * @param {String} reason 触发月份改变原因\n   */\n  onVisibleMonthChange: PropTypes.func,\n\n  /**\n   * 自定义样式类\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义日期渲染函数\n   * @param {Object} value 日期值（moment对象）\n   * @returns {ReactNode}\n   */\n  dateCellRender: PropTypes.func,\n\n  /**\n   * 自定义月份渲染函数\n   * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n   * @returns {ReactNode}\n   */\n  monthCellRender: PropTypes.func,\n\n  /**\n   * 不可选择的日期\n   * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n   * @returns {Boolean}\n   */\n  disabledDate: PropTypes.func,\n\n  /**\n   * 国际化配置\n   */\n  locale: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  rtl: false,\n  shape: 'fullscreen',\n  modes: CALENDAR_MODES,\n  format: 'YYYY-MM-DD',\n  onSelect: func.noop,\n  onVisibleMonthChange: func.noop,\n  dateCellRender: function dateCellRender(value) {\n    return value.date();\n  },\n  locale: locale.Calendar,\n  showOtherMonth: true\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onSelectCell = function (date, nextMode) {\n    _this2.changeVisibleMonth(date, 'cellClick'); // 当用户所在的面板为初始化面板时，则选择动作为触发 onSelect 回调\n\n\n    if (_this2.state.mode === _this2.MODES[0]) {\n      _this2.props.onSelect(date);\n    }\n\n    _this2.changeMode(nextMode);\n  };\n\n  this.changeMode = function (nextMode) {\n    if (nextMode && _this2.MODES.indexOf(nextMode) > -1 && nextMode !== _this2.state.mode) {\n      _this2.setState({\n        mode: nextMode\n      });\n    }\n  };\n\n  this.changeVisibleMonth = function (date, reason) {\n    if (!isSameYearMonth(date, _this2.state.visibleMonth)) {\n      _this2.setState({\n        visibleMonth: date\n      });\n\n      _this2.props.onVisibleMonthChange(date, reason);\n    }\n  };\n\n  this.goPrevDecade = function () {\n    _this2.changeVisibleMonthByOffset(-10, 'years');\n  };\n\n  this.goNextDecade = function () {\n    _this2.changeVisibleMonthByOffset(10, 'years');\n  };\n\n  this.goPrevYear = function () {\n    _this2.changeVisibleMonthByOffset(-1, 'years');\n  };\n\n  this.goNextYear = function () {\n    _this2.changeVisibleMonthByOffset(1, 'years');\n  };\n\n  this.goPrevMonth = function () {\n    _this2.changeVisibleMonthByOffset(-1, 'months');\n  };\n\n  this.goNextMonth = function () {\n    _this2.changeVisibleMonthByOffset(1, 'months');\n  };\n}, _temp);\nCalendar.displayName = 'Calendar';\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}