{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { obj } from '../util';\nimport InnerSlider from './slick/inner-slider';\nimport ConfigProvider from '../config-provider';\n/**\n * Slider\n*/\n\nvar Slider = (_temp2 = _class = function (_Component) {\n  _inherits(Slider, _Component);\n\n  function Slider() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Slider);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.resize = function () {\n      // export api\n      _this.innerSlider.onWindowResized();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Slider.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        arrowPosition = _props.arrowPosition,\n        slideDirection = _props.slideDirection,\n        style = _props.style,\n        className = _props.className,\n        children = _props.children;\n    var sliderProps = obj.pickOthers(['className', 'style', 'slideDirection'], this.props);\n    var slideCount = React.Children.count(children);\n\n    if (slideCount === 0) {\n      // 没有 item 时不显示 slider\n      return null;\n    } else if (slideCount === 1) {\n      // 单个 item 时不显示箭头和控制器\n      sliderProps.arrows = false;\n      sliderProps.autoplay = false;\n      sliderProps.draggable = false;\n    }\n\n    var clazz = classNames([prefix + 'slick', prefix + 'slick-' + arrowPosition, prefix + 'slick-' + slideDirection], className);\n\n    if (slideDirection === 'ver') {\n      // 向下传递时使用 vertical 属性\n      sliderProps.vertical = true;\n    }\n\n    return React.createElement(ConfigProvider, {\n      rtl: false\n    }, React.createElement('div', _extends({\n      dir: 'ltr',\n      className: clazz,\n      style: style\n    }, obj.pickOthers(_extends({}, Slider.propTypes, InnerSlider.propTypes), sliderProps)), React.createElement(InnerSlider, _extends({\n      ref: function ref(InnerSlider) {\n        return _this2.innerSlider = InnerSlider;\n      }\n    }, sliderProps))));\n  };\n\n  return Slider;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 自定义传入的样式\n   */\n  className: PropTypes.any,\n\n  /**\n   * 是否使用自适应高度\n   */\n  adaptiveHeight: PropTypes.bool,\n\n  /**\n   * 动效类型，默认是'slide'\n   */\n  animation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /**\n   * 是否显示箭头\n   */\n  arrows: PropTypes.bool,\n\n  /**\n   * 导航箭头大小 可选值: 'medium', 'large'\n   */\n  arrowSize: PropTypes.oneOf(['medium', 'large']),\n\n  /**\n   * 导航箭头位置 可选值: 'inner', 'outer'\n   */\n  arrowPosition: PropTypes.oneOf(['inner', 'outer']),\n\n  /**\n   * 导航箭头的方向 可选值: 'hoz', 'ver'\n   */\n  arrowDirection: PropTypes.oneOf(['hoz', 'ver']),\n\n  /**\n   * 是否自动播放\n   */\n  autoplay: PropTypes.bool,\n\n  /**\n   * 自动播放的速度\n   */\n  autoplaySpeed: PropTypes.number,\n\n  /**\n   * 向后箭头\n   */\n  nextArrow: PropTypes.element,\n\n  /**\n   * 向前箭头\n   */\n  prevArrow: PropTypes.element,\n\n  /**\n   * 是否启用居中模式\n   */\n  centerMode: PropTypes.bool,\n\n  /**\n   * 是否显示导航锚点\n   */\n  dots: PropTypes.bool,\n\n  /**\n   * 导航锚点位置\n   */\n  dotsDirection: PropTypes.oneOf(['hoz', 'ver']),\n  dotsClass: PropTypes.string,\n\n  /**\n   * 自定义导航锚点\n   */\n  dotRender: PropTypes.func,\n\n  /**\n   * 是否可拖拽\n   */\n  draggable: PropTypes.bool,\n\n  /**\n   * 是否使用无穷循环模式\n   */\n  infinite: PropTypes.bool,\n\n  /**\n   * 初始被激活的轮播图\n   */\n  defaultActiveIndex: PropTypes.number,\n\n  /**\n   * 是否启用懒加载\n   */\n  lazyLoad: PropTypes.bool,\n  slide: PropTypes.string,\n\n  /**\n   * 轮播方向\n   */\n  slideDirection: PropTypes.oneOf(['hoz', 'ver']),\n\n  /**\n   * 同时展示的图片数量\n   */\n  slidesToShow: PropTypes.number,\n\n  /**\n   * 同时滑动的图片数量\n   */\n  slidesToScroll: PropTypes.number,\n\n  /**\n   * 轮播速度\n   */\n  speed: PropTypes.number,\n\n  /**\n   * 跳转到指定的轮播图（受控）\n   */\n  activeIndex: PropTypes.number,\n\n  /**\n   * 锚点导航触发方式\n   */\n  triggerType: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * 轮播切换的回调函数\n   * @param {Number} index 幻灯片的索引\n   */\n  onChange: PropTypes.func,\n  children: PropTypes.any,\n\n  /**\n   * 自定义传入的class\n   */\n  style: PropTypes.object,\n\n  /**\n   * Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览\n   */\n  centerPadding: PropTypes.string,\n\n  /**\n   * CSS3 Animation Easing,默认‘ease’\n   */\n  cssEase: PropTypes.string,\n  // used\n  edgeFriction: PropTypes.number,\n  // 非无限轮播滑动到边缘时的阻力\n\n  /**\n   * 多图轮播时，点击选中后自动居中\n   */\n  focusOnSelect: PropTypes.bool,\n  pauseOnHover: PropTypes.bool,\n  // 鼠标经过时停止播放\n  swipe: PropTypes.bool,\n  swipeToSlide: PropTypes.bool,\n  touchMove: PropTypes.bool,\n  touchThreshold: PropTypes.number,\n  useCSS: PropTypes.bool,\n  variableWidth: PropTypes.bool,\n  // used\n  waitForAnimate: PropTypes.bool,\n  edgeEvent: PropTypes.any,\n  swipeEvent: PropTypes.any\n}, _class.defaultProps = {\n  prefix: 'next-',\n  animation: 'slide',\n  arrowSize: 'medium',\n  arrowPosition: 'inner',\n  vertical: false,\n  dots: true,\n  dotsDirection: 'hoz',\n  arrows: true,\n  arrowDirection: 'hoz',\n  infinite: true,\n  autoplay: false,\n  autoplaySpeed: 3000,\n  speed: 500,\n  adaptiveHeight: false,\n  centerMode: false,\n  centerPadding: '50px',\n  // Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览\n  cssEase: 'ease',\n  draggable: true,\n  edgeFriction: 0.35,\n  focusOnSelect: false,\n  defaultActiveIndex: 0,\n  lazyLoad: false,\n  pauseOnHover: false,\n  rtl: false,\n  slide: 'div',\n  slideDirection: 'hoz',\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  swipe: true,\n  swipeToSlide: false,\n  // Allow users to drag or swipe directly to a slide irrespective of slidesToScroll\n  touchMove: true,\n  // 移动端touch\n  touchThreshold: 5,\n  useCSS: true,\n  variableWidth: false,\n  waitForAnimate: true,\n  onChange: function onChange() {},\n  edgeEvent: null,\n  swipeEvent: null,\n  nextArrow: null,\n  // nextArrow, prevArrow are react components\n  prevArrow: null,\n  style: null,\n  dotsRender: null,\n  triggerType: 'click'\n}, _temp2);\nSlider.displayName = 'Slider';\nexport { Slider as default };","map":null,"metadata":{},"sourceType":"module"}