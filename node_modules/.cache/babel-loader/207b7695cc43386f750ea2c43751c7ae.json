{"ast":null,"code":"import _typeof from 'babel-runtime/helpers/typeof';\n/**\n * 获取对象的类型\n * @param  {*} obj\n * @return {String}\n *\n * @example\n * typeOf([]) === 'Array'\n * typeOf() === 'Undefined'\n * typeOf(1) === 'Number'\n */\n\nexport function typeOf(obj) {\n  return Object.prototype.toString.call(obj).replace(/\\[object\\s|]/g, '');\n}\n/**\n * 判断是否是数组或类数组对象\n * @param  {*}  obj\n * @return {Boolean}\n *\n * @example\n * isArrayLike([]) === true\n * isArrayLike(arguments) === true\n * isArrayLike(this.props.children) === true\n */\n\nexport function isArrayLike(obj) {\n  var length = !!obj && 'length' in obj && obj.length;\n  var type = typeOf(obj);\n  return type === 'Array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;\n}\n/**\n * 判断对象是否是一个promise，即是否可以用.then\n * @param  {*}  obj\n * @return {Boolean}\n */\n\nexport function isPromise(obj) {\n  return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n/**\n * 是否是一个纯净的对象\n * @param  {*}  obj\n * @return {Boolean}\n * @reference https://github.com/jonschlinkert/is-plain-object\n */\n\nexport function isPlainObject(obj) {\n  if (typeOf(obj) !== 'Object') {\n    return false;\n  }\n\n  var ctor = obj.constructor;\n\n  if (typeof ctor !== 'function') {\n    return false;\n  }\n\n  var prot = ctor.prototype;\n\n  if (typeOf(prot) !== 'Object') {\n    return false;\n  }\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * 对象浅比较\n * @param  {Object} objA\n * @param  {Object} objB\n * @param  {Function}  [compare] 手动调用方法比较\n * @return {Boolean}      对象浅比较是否相等\n *\n * @example\n * object.shallowEqual({a: 100}, {a: 100}); // true\n */\n\nexport function shallowEqual(objA, objB, compare) {\n  if (objA === objB) {\n    return true;\n  } // 其中一个不是object，则不相等\n\n\n  if (!objA || !objB || (typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) + (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'objectobject') {\n    return false;\n  }\n\n  var keyA = Object.keys(objA);\n  var keyB = Object.keys(objB);\n  var len = keyA.length; // key 数量不一致则不相等\n\n  if (len !== keyB.length) {\n    return false;\n  }\n\n  var hasCallback = typeof compare === 'function';\n\n  for (var i = 0; i < len; i++) {\n    var key = keyA[i];\n\n    if (!Object.prototype.hasOwnProperty.call(objB, key)) {\n      return false;\n    }\n\n    var valA = objA[key];\n    var valB = objB[key];\n    var ret = hasCallback ? compare(valA, valB, key) : void 0;\n\n    if (ret === false || ret === void 0 && valA !== valB) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * 遍历对象或数组，或者类数组，例如React中的children对象、arguments等\n * @param  {Object|Array}   obj\n * @param  {Function} callback fn(n, i) or fn(val, key)\n * @param  {Number}   [direction = 1] 是否倒序遍历，只对数组有效\n * @return {Object|Array}\n *\n * @example\n * // 遍历数组\n * object.each([100, 200, 300], (n, i) => console.log(n, i));\n * // 遍历json对象\n * object.each({a: 100, b: 200}, (value, key) => console.log(key, value));\n * // 遍历React子节点\n * object.each(this.props.children, (child, index) => console.log(child));\n * // 遍历arguments\n * object.each(arguments, (arg, i) => console.log(arg));\n */\n\nexport function each(obj, callback, direction) {\n  var reversed = direction === -1;\n  var length = obj.length;\n  var value = void 0,\n      i = reversed ? length - 1 : 0;\n\n  if (isArrayLike(obj)) {\n    for (; i < length && i >= 0; reversed ? i-- : i++) {\n      value = callback.call(obj[i], obj[i], i);\n\n      if (value === false) {\n        break;\n      }\n    }\n  } else {\n    for (i in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(i)) {\n        value = callback.call(obj[i], obj[i], i);\n\n        if (value === false) {\n          break;\n        }\n      }\n    }\n  }\n\n  return obj;\n} // @private 判断key是否在数组或对象中\n\nvar _isInObj = function _isInObj(key, obj, isArray) {\n  return isArray ? obj.indexOf(key) > -1 : key in obj;\n};\n/**\n * 过滤出其它属性\n * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key\n * @param  {Object} props     被过滤的对象\n * @return {Object}           others\n *\n * @example\n * object.pickOthers(FooComponent.propTypes, this.props);\n * object.pickOthers(['className', 'onChange'], this.props);\n */\n\n\nexport function pickOthers(holdProps, props) {\n  var others = {};\n  var isArray = typeOf(holdProps) === 'Array';\n\n  for (var key in props) {\n    if (!_isInObj(key, holdProps, isArray)) {\n      others[key] = props[key];\n    }\n  }\n\n  return others;\n}\n/**\n * 过滤出带prefix的属性\n * @param  {Object} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key\n * @param  {string} prefix    包含的字符串\n * @return {Object}           others\n *\n * @example\n * object.pickAttrsWith(FooComponent.propTypes, 'data-');\n */\n\nexport function pickAttrsWith(holdProps, prefix) {\n  var others = {};\n\n  for (var key in holdProps) {\n    if (key.match(prefix)) {\n      others[key] = holdProps[key];\n    }\n  }\n\n  return others;\n}","map":null,"metadata":{},"sourceType":"module"}