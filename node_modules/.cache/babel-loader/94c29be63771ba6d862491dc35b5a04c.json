{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { func } from '../util';\nimport zhCN from '../locale/zh-cn';\nvar Base = (_temp2 = _class = function (_React$Component) {\n  _inherits(Base, _React$Component);\n\n  function Base() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Base);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.saveRef = function (input) {\n      _this.inputRef = input;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Base.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      this.setState({\n        value: typeof nextProps.value === 'undefined' ? '' : nextProps.value\n      });\n    }\n  };\n\n  Base.prototype.ieHack = function ieHack(value) {\n    return value;\n  };\n\n  Base.prototype.onChange = function onChange(e) {\n    var value = e.target.value;\n\n    if (this.props.trim) {\n      value = value.trim();\n    }\n\n    value = this.ieHack(value); // not controlled\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value: value\n      });\n    } // Number('') = 0\n\n\n    if (value && this.props.htmlType === 'number') {\n      value = Number(value);\n    }\n\n    this.props.onChange(value, e);\n  };\n\n  Base.prototype.onKeyDown = function onKeyDown(e) {\n    var value = e.target.value;\n    var maxLength = this.props.maxLength;\n    var len = maxLength > 0 && value ? this.getValueLength(value) : 0;\n    var opts = {}; // has enable trim and has input whitespace\n\n    if (this.props.trim && e.keyCode === 32) {\n      opts.beTrimed = true;\n    } // has defined maxLength and has over max length and has not input backspace and delete\n\n\n    if (maxLength > 0 && (len > maxLength + 1 || (len === maxLength || len === maxLength + 1) && e.keyCode !== 8 && e.keyCode !== 46)) {\n      opts.overMaxLength = true;\n    }\n\n    this.props.onKeyDown(e, opts);\n  };\n\n  Base.prototype.onFocus = function onFocus(e) {\n    this.setState({\n      focus: true\n    });\n    this.props.onFocus(e);\n  };\n\n  Base.prototype.onBlur = function onBlur(e) {\n    this.setState({\n      focus: false\n    });\n    this.props.onBlur(e);\n  };\n\n  Base.prototype.renderLength = function renderLength() {\n    var _classNames;\n\n    var _props = this.props,\n        maxLength = _props.maxLength,\n        hasLimitHint = _props.hasLimitHint,\n        prefix = _props.prefix,\n        rtl = _props.rtl;\n    var len = maxLength > 0 && this.state.value ? this.getValueLength(this.state.value) : 0;\n    var classesLenWrap = classNames((_classNames = {}, _classNames[prefix + 'input-len'] = true, _classNames[prefix + 'error'] = len > maxLength, _classNames));\n    var content = rtl ? maxLength + '/' + len : len + '/' + maxLength;\n    return maxLength && hasLimitHint ? React.createElement('span', {\n      className: classesLenWrap\n    }, content) : null;\n  };\n\n  Base.prototype.renderControl = function renderControl() {\n    var lenWrap = this.renderLength();\n    return lenWrap ? React.createElement('span', {\n      className: this.props.prefix + 'input-control'\n    }, lenWrap) : null;\n  };\n\n  Base.prototype.getClass = function getClass() {\n    var _classNames2;\n\n    var _props2 = this.props,\n        disabled = _props2.disabled,\n        state = _props2.state,\n        prefix = _props2.prefix;\n    return classNames((_classNames2 = {}, _classNames2[prefix + 'input'] = true, _classNames2[prefix + 'disabled'] = !!disabled, _classNames2[prefix + 'error'] = state === 'error', _classNames2[prefix + 'focus'] = this.state.focus, _classNames2));\n  };\n\n  Base.prototype.getProps = function getProps() {\n    var _props3 = this.props,\n        placeholder = _props3.placeholder,\n        inputStyle = _props3.inputStyle,\n        disabled = _props3.disabled,\n        readOnly = _props3.readOnly,\n        cutString = _props3.cutString,\n        maxLength = _props3.maxLength;\n    var props = {\n      style: inputStyle,\n      placeholder: placeholder,\n      disabled: disabled,\n      readOnly: readOnly,\n      maxLength: cutString ? maxLength : undefined,\n      value: this.state.value,\n      onChange: this.onChange.bind(this),\n      onBlur: this.onBlur.bind(this),\n      onFocus: this.onFocus.bind(this)\n    }; // fix accessibility：auto process status of aria disabled\n\n    if (disabled) {\n      props['aria-disabled'] = disabled;\n    }\n\n    return props;\n  };\n\n  Base.prototype.getInputNode = function getInputNode() {\n    return this.inputRef;\n  };\n\n  Base.prototype.focus = function focus(start, end) {\n    this.inputRef.focus();\n\n    if (typeof start !== 'undefined') {\n      this.inputRef.selectionStart = start;\n    }\n\n    if (typeof end !== 'undefined') {\n      this.inputRef.selectionEnd = end;\n    }\n  };\n\n  return Base;\n}(React.Component), _class.propTypes = {\n  prefix: PropTypes.string,\n\n  /**\n   * 当前值\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * 初始化值\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * 发生改变的时候触发的回调\n   * @param {String} value 数据\n   * @param {Event} e DOM事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 键盘按下的时候触发的回调\n   * @param {Event} e DOM事件对象\n   * @param {Object} opts 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * 禁用状态\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 最大长度\n   */\n  maxLength: PropTypes.number,\n\n  /**\n   * 是否展现最大长度样式\n   */\n  hasLimitHint: PropTypes.bool,\n\n  /**\n   * 当设置了maxLength时，是否截断超出字符串\n   */\n  cutString: PropTypes.bool,\n\n  /**\n   * 只读\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * onChange返回会自动去除头尾空字符\n   */\n  trim: PropTypes.bool,\n\n  /**\n   * 输入提示\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * 获取焦点时候触发的回调\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * 失去焦点时候触发的回调\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * 自定义字符串计算长度方式\n   * @param {String} value 数据\n   * @returns {Number} 自定义长度\n   */\n  getValueLength: PropTypes.func,\n  inputStyle: PropTypes.object,\n\n  /**\n   * 自定义class\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 原生type\n   */\n  htmlType: PropTypes.string,\n\n  /**\n   * name\n   */\n  name: PropTypes.string,\n  rtl: PropTypes.bool,\n  state: PropTypes.oneOf(['error', 'loading', 'success']),\n  locale: PropTypes.object\n}, _class.defaultProps = {\n  disabled: false,\n  prefix: 'next-',\n  maxLength: null,\n  hasLimitHint: false,\n  cutString: true,\n  readOnly: false,\n  trim: false,\n  onFocus: func.noop,\n  onBlur: func.noop,\n  onChange: func.noop,\n  onKeyDown: func.noop,\n  getValueLength: func.noop,\n  locale: zhCN.Input\n}, _temp2);\nBase.displayName = 'Base';\nexport default Base;","map":null,"metadata":{},"sourceType":"module"}