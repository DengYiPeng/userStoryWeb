{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport { Component } from 'react';\n\nvar Base = function (_Component) {\n  _inherits(Base, _Component);\n\n  function Base() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Base);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.saveUploaderRef = function (ref) {\n      /* istanbul ignore if */\n      if (ref && typeof ref.getInstance === 'function') {\n        _this.uploaderRef = ref.getInstance();\n      } else {\n        _this.uploaderRef = ref;\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  /* istanbul ignore next */\n\n\n  Base.prototype.abort = function abort(file) {\n    /* istanbul ignore next */\n    this.uploaderRef.abort(file);\n  };\n  /* istanbul ignore next */\n\n\n  Base.prototype.startUpload = function startUpload() {\n    /* istanbul ignore next */\n    this.uploaderRef.startUpload();\n  };\n  /* istanbul ignore next */\n\n\n  Base.prototype.isUploading = function isUploading() {\n    /* istanbul ignore next */\n    return this.uploaderRef.isUploading();\n  };\n\n  return Base;\n}(Component);\n\nBase.displayName = 'Base';\nexport { Base as default };","map":null,"metadata":{},"sourceType":"module"}