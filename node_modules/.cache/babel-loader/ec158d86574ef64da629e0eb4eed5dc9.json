{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nfunction mapIconSize(size) {\n  return {\n    large: 'small',\n    medium: 'xs',\n    small: 'xs'\n  }[size];\n}\n/** Button */\n\n\nvar Button = (_temp2 = _class = function (_Component) {\n  _inherits(Button, _Component);\n\n  function Button() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Button);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onMouseUp = function (e) {\n      _this.button.blur();\n\n      if (_this.props.onMouseUp) {\n        _this.props.onMouseUp(e);\n      }\n    }, _this.buttonRefHandler = function (button) {\n      _this.button = button;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Button.prototype.render = function render() {\n    var _classNames;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        className = _props.className,\n        type = _props.type,\n        size = _props.size,\n        htmlType = _props.htmlType,\n        loading = _props.loading,\n        text = _props.text,\n        warning = _props.warning,\n        ghost = _props.ghost,\n        component = _props.component,\n        iconSize = _props.iconSize,\n        children = _props.children,\n        rtl = _props.rtl,\n        others = _objectWithoutProperties(_props, ['prefix', 'className', 'type', 'size', 'htmlType', 'loading', 'text', 'warning', 'ghost', 'component', 'iconSize', 'children', 'rtl']);\n\n    var ghostType = ['light', 'dark'].indexOf(ghost) >= 0 ? ghost : 'dark';\n    var btnCls = classNames((_classNames = {}, _classNames[prefix + 'btn'] = true, _classNames['' + prefix + size] = size, _classNames[prefix + 'btn-' + type] = type && !ghost, _classNames[prefix + 'btn-text'] = text, _classNames[prefix + 'btn-warning'] = warning, _classNames[prefix + 'btn-loading'] = loading, _classNames[prefix + 'btn-ghost'] = ghost, _classNames[prefix + 'btn-' + ghostType] = ghost, _classNames[className] = className, _classNames));\n    var count = Children.count(children);\n    var clonedChildren = Children.map(children, function (child, index) {\n      if (child && typeof child.type === 'function' && child.type._typeMark === 'icon') {\n        var _classNames2;\n\n        var iconCls = classNames((_classNames2 = {}, _classNames2[prefix + 'btn-icon'] = !iconSize, _classNames2[prefix + 'icon-first'] = count > 1 && index === 0, _classNames2[prefix + 'icon-last'] = count > 1 && index === count - 1, _classNames2[prefix + 'icon-alone'] = count === 1, _classNames2[child.props.className] = !!child.props.className, _classNames2));\n        return React.cloneElement(child, {\n          className: iconCls,\n          size: iconSize || mapIconSize(size)\n        });\n      }\n\n      return child;\n    });\n    var TagName = component;\n\n    var tagAttrs = _extends({}, others, {\n      type: htmlType,\n      className: btnCls\n    });\n\n    if (TagName === 'a') {\n      delete tagAttrs.type;\n\n      if (tagAttrs.disabled) {\n        delete tagAttrs.onClick; // a 标签的 onClick 浏览器默认不会禁用\n\n        tagAttrs.href && delete tagAttrs.href; // a 标签在禁用状态下无跳转\n      }\n    }\n\n    return React.createElement(TagName, _extends({}, tagAttrs, {\n      dir: rtl ? 'rtl' : undefined,\n      onMouseUp: this.onMouseUp,\n      ref: this.buttonRefHandler,\n      role: 'button'\n    }), clonedChildren);\n  };\n\n  return Button;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 按钮的类型\n   */\n  type: PropTypes.oneOf(['primary', 'secondary', 'normal']),\n\n  /**\n   * 按钮的尺寸\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 按钮中 Icon 的尺寸，用于替代 Icon 的默认大小\n   */\n  iconSize: PropTypes.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl']),\n\n  /**\n   * 当 component = 'button' 时，设置 button 标签的 type 值\n   */\n  htmlType: PropTypes.oneOf(['submit', 'reset', 'button']),\n\n  /**\n   * 设置标签类型\n   */\n  component: PropTypes.oneOf(['button', 'a']),\n\n  /**\n   * 设置按钮的载入状态\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * 是否为幽灵按钮\n   */\n  ghost: PropTypes.oneOf([true, false, 'light', 'dark']),\n\n  /**\n   * 是否为文本按钮\n   */\n  text: PropTypes.bool,\n\n  /**\n   * 是否为警告按钮\n   */\n  warning: PropTypes.bool,\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 点击按钮的回调\n   * @param {Object} e Event Object\n   */\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  onMouseUp: PropTypes.func,\n  children: PropTypes.node\n}, _class.defaultProps = {\n  prefix: 'next-',\n  type: 'normal',\n  size: 'medium',\n  htmlType: 'button',\n  component: 'button',\n  loading: false,\n  ghost: false,\n  text: false,\n  warning: false,\n  disabled: false,\n  onClick: function onClick() {}\n}, _temp2);\nButton.displayName = 'Button';\nexport { Button as default };","map":null,"metadata":{},"sourceType":"module"}