{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _initialiseProps;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { log, func } from '../../util';\nimport { uid } from '../util';\nvar INPUT_STYLE = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  fontSize: 9999,\n  zIndex: 9999,\n  opacity: 0,\n  outline: 'none',\n  cursor: 'pointer'\n};\nvar IframeUploader = (_temp = _class = function (_React$Component) {\n  _inherits(IframeUploader, _React$Component);\n\n  function IframeUploader(props) {\n    _classCallCheck(this, IframeUploader);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.domain = typeof document !== 'undefined' && document.domain ? document.domain : '';\n    return _this;\n  }\n\n  IframeUploader.prototype.componentDidMount = function componentDidMount() {\n    this.updateInputWH();\n  };\n\n  IframeUploader.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.updateInputWH();\n  };\n\n  IframeUploader.prototype.startUpload = function startUpload() {\n    this.upload(this.file);\n    this.file = {};\n  };\n\n  IframeUploader.prototype.upload = function upload(file) {\n    var _this2 = this;\n\n    if (!this.state.uploading) {\n      // eslint-disable-next-line\n      this.state.uploading = true;\n      this.setState({\n        uploading: true\n      });\n    }\n\n    var beforeUpload = this.props.beforeUpload;\n\n    if (!beforeUpload) {\n      return this.post(file);\n    }\n\n    var before = beforeUpload(file);\n\n    if (before && before.then) {\n      before.then(function () {\n        _this2.post(file);\n      }, function () {\n        _this2.endUpload();\n      });\n    } else if (before !== false) {\n      this.post(file);\n    } else {\n      this.endUpload();\n    }\n  };\n\n  IframeUploader.prototype.endUpload = function endUpload() {\n    this.file = {};\n\n    if (this.state.uploading) {\n      // eslint-disable-next-line\n      this.state.uploading = false;\n      this.setState({\n        uploading: false\n      });\n    }\n  };\n\n  IframeUploader.prototype.updateInputWH = function updateInputWH() {\n    var rootNode = ReactDOM.findDOMNode(this);\n    var inputNode = this.refs.input;\n    inputNode.style.height = rootNode.offsetHeight + 'px';\n    inputNode.style.width = rootNode.offsetWidth + 'px';\n  };\n\n  IframeUploader.prototype.abort = function abort(file) {\n    if (file) {\n      var _uid = file;\n\n      if (file && file.uid) {\n        _uid = file.uid;\n      }\n\n      if (_uid === this.file.uid) {\n        this.endUpload();\n      }\n    } else {\n      this.endUpload();\n    }\n  };\n\n  IframeUploader.prototype.post = function post(file) {\n    var formNode = this.refs.form;\n    var dataSpan = this.refs.data;\n    var data = this.props.data;\n\n    if (typeof data === 'function') {\n      data = data(file);\n    }\n\n    var inputs = document.createDocumentFragment();\n\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        var input = document.createElement('input');\n        input.setAttribute('name', key);\n        input.value = data[key];\n        inputs.appendChild(input);\n      }\n    }\n\n    dataSpan.appendChild(inputs);\n    formNode.submit();\n    dataSpan.innerHTML = '';\n    this.props.onStart(file);\n  };\n\n  IframeUploader.prototype.render = function render() {\n    var _props = this.props,\n        disabled = _props.disabled,\n        className = _props.className,\n        children = _props.children,\n        accept = _props.accept,\n        name = _props.name,\n        style = _props.style;\n    var iframeName = name + '-iframe';\n    return React.createElement('span', {\n      className: className,\n      style: _extends({\n        position: 'relative',\n        zIndex: 0,\n        display: 'inline-block'\n      }, style)\n    }, !disabled ? React.createElement('iframe', {\n      ref: 'iframe',\n      name: iframeName,\n      onLoad: this.onLoad,\n      style: {\n        display: 'none'\n      }\n    }) : null, React.createElement('form', {\n      ref: 'form',\n      method: 'post',\n      action: this.props.action,\n      encType: 'multipart/form-data',\n      target: iframeName\n    }, React.createElement('input', {\n      ref: 'input',\n      type: 'file',\n      accept: accept,\n      name: name,\n      onChange: this.onSelect,\n      style: INPUT_STYLE\n    }), React.createElement('input', {\n      name: '_documentDomain',\n      value: this.domain,\n      type: 'hidden'\n    }), React.createElement('span', {\n      ref: 'data'\n    })), children);\n  };\n\n  return IframeUploader;\n}(React.Component), _class.propTypes = {\n  style: PropTypes.object,\n  action: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  headers: PropTypes.object,\n  autoUpload: PropTypes.bool,\n  onSelect: PropTypes.func,\n  beforeUpload: PropTypes.func,\n  onStart: PropTypes.func,\n  onSuccess: PropTypes.func,\n  onError: PropTypes.func,\n  accept: PropTypes.string\n}, _class.defaultProps = {\n  name: 'file',\n  onSelect: func.noop,\n  beforeUpload: func.noop,\n  onStart: func.noop,\n  onSuccess: func.noop,\n  onError: func.noop,\n  onAbort: func.noop\n}, _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.state = {\n    uploading: false\n  };\n  this.file = {};\n\n  this.onLoad = function () {\n    if (!_this3.state.uploading) {\n      return;\n    }\n\n    var props = _this3.props,\n        file = _this3.file;\n    var response = void 0;\n\n    try {\n      var doc = _this3.refs.iframe.contentDocument;\n      var script = doc.getElementsByTagName('script')[0];\n\n      if (script && script.parentNode === doc.body) {\n        doc.body.removeChild(script);\n      }\n\n      response = doc.body.innerHTML;\n      props.onSuccess(response, file);\n    } catch (err) {\n      log.warning('cross domain error for Upload. Maybe server should return document.domain script.');\n      response = 'cross-domain';\n      props.onError(err, null, file);\n    }\n\n    _this3.endUpload();\n  };\n\n  this.onSelect = function (e) {\n    _this3.file = {\n      uid: uid(),\n      name: e.target.value\n    };\n\n    _this3.props.onSelect([_this3.file]);\n  };\n}, _temp);\nIframeUploader.displayName = 'IframeUploader';\nexport default IframeUploader;","map":null,"metadata":{},"sourceType":"module"}