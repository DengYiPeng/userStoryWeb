{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { log } from '../../util';\nimport Row from '../lock/row';\nvar ExpandedRow = (_temp = _class = function (_React$Component) {\n  _inherits(ExpandedRow, _React$Component);\n\n  function ExpandedRow() {\n    _classCallCheck(this, ExpandedRow);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  ExpandedRow.prototype.renderExpandedRow = function renderExpandedRow(record, index, colSpan) {\n    var _context = this.context,\n        expandedRowRender = _context.expandedRowRender,\n        expandedRowIndent = _context.expandedRowIndent,\n        openRowKeys = _context.openRowKeys,\n        lockType = _context.lockType;\n    var _props = this.props,\n        columns = _props.columns,\n        cellRef = _props.cellRef;\n\n    if (expandedRowRender) {\n      var _props2 = this.props,\n          primaryKey = _props2.primaryKey,\n          prefix = _props2.prefix,\n          leftIndent = expandedRowIndent[0],\n          rightIndent = expandedRowIndent[1],\n          totalIndent = leftIndent + rightIndent,\n          renderCols = function renderCols(number) {\n        var ret = [];\n\n        var _loop = function _loop(i) {\n          ret.push(React.createElement('td', {\n            key: i,\n            ref: function ref(cell) {\n              return cellRef(index, i, cell);\n            }\n          }, '\\xA0'));\n        };\n\n        for (var i = 0; i < number; i++) {\n          _loop(i);\n        }\n\n        return ret;\n      };\n\n      var content = void 0;\n\n      if (totalIndent > colSpan && !lockType) {\n        log.warning('It\\'s not allowed expandedRowIndent is more than the number of columns.');\n      }\n\n      if (leftIndent < columns.length && lockType === 'left') {\n        log.warning('expandedRowIndent left is less than the number of left lock columns.');\n      }\n\n      if (rightIndent < columns.length && lockType === 'right') {\n        log.warning('expandedRowIndent right is less than the number of right lock columns.');\n      }\n\n      if (lockType) {\n        return openRowKeys.indexOf(record[primaryKey]) > -1 ? React.createElement('tr', {\n          className: prefix + 'table-expanded-row',\n          key: 'expanded-' + index\n        }, React.createElement('td', {\n          colSpan: colSpan,\n          ref: function ref(cell) {\n            return cellRef(index, 0, cell);\n          }\n        }, '\\xA0')) : null;\n      }\n\n      content = expandedRowRender(record, index);\n\n      if (!React.isValidElement(content)) {\n        content = React.createElement('div', {\n          className: prefix + 'table-cell-wrapper'\n        }, content);\n      }\n\n      return openRowKeys.indexOf(record[primaryKey]) > -1 ? React.createElement('tr', {\n        className: prefix + 'table-expanded-row',\n        key: 'expanded-' + (record[primaryKey] || index)\n      }, renderCols(leftIndent), React.createElement('td', {\n        colSpan: colSpan - totalIndent\n      }, content), renderCols(rightIndent)) : null;\n    } else {\n      return null;\n    }\n  };\n\n  ExpandedRow.prototype.render = function render() {\n    /* eslint-disable no-unused-vars*/\n    var _props3 = this.props,\n        record = _props3.record,\n        rowIndex = _props3.rowIndex,\n        columns = _props3.columns;\n\n    if (record.__expanded) {\n      return this.renderExpandedRow(record, rowIndex, columns.length);\n    }\n\n    return React.createElement(Row, this.props);\n  };\n\n  return ExpandedRow;\n}(React.Component), _class.propTypes = _extends({}, Row.propTypes), _class.defaultProps = _extends({}, Row.defaultProps), _class.contextTypes = {\n  openRowKeys: PropTypes.array,\n  expandedRowRender: PropTypes.func,\n  expandedRowIndent: PropTypes.array,\n  lockType: PropTypes.oneOf(['left', 'right'])\n}, _temp);\nExpandedRow.displayName = 'ExpandedRow';\nexport { ExpandedRow as default };","map":null,"metadata":{},"sourceType":"module"}