{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ConfigProvider from '../config-provider';\nimport { obj } from '../util';\nimport Checkbox from './checkbox';\nvar pickOthers = obj.pickOthers;\n/** Checkbox.Group */\n\nvar CheckboxGroup = (_temp = _class = function (_Component) {\n  _inherits(CheckboxGroup, _Component);\n\n  function CheckboxGroup(props) {\n    _classCallCheck(this, CheckboxGroup);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    var value = [];\n\n    if ('value' in props) {\n      value = props.value;\n    } else if ('defaultValue' in props) {\n      value = props.defaultValue;\n    }\n\n    if (!Array.isArray(value)) {\n      if (value === null || value === undefined) {\n        value = [];\n      } else {\n        value = [value];\n      }\n    }\n\n    _this.state = {\n      value: [].concat(value)\n    };\n    _this.onChange = _this.onChange.bind(_this);\n    return _this;\n  }\n\n  CheckboxGroup.prototype.getChildContext = function getChildContext() {\n    return {\n      __group__: true,\n      onChange: this.onChange,\n      selectedValue: this.state.value,\n      disabled: this.props.disabled\n    };\n  };\n\n  CheckboxGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      var value = nextProps.value;\n\n      if (!Array.isArray(value)) {\n        if (value === null || value === undefined) {\n          value = [];\n        } else {\n          value = [value];\n        }\n      }\n\n      this.setState({\n        value: value\n      });\n    }\n  };\n\n  CheckboxGroup.prototype.onChange = function onChange(currentValue, e) {\n    var value = this.state.value;\n    var index = value.indexOf(currentValue);\n    var valTemp = [].concat(value);\n\n    if (index === -1) {\n      valTemp.push(currentValue);\n    } else {\n      valTemp.splice(index, 1);\n    }\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value: valTemp\n      });\n    }\n\n    this.props.onChange(valTemp, e);\n  };\n\n  CheckboxGroup.prototype.render = function render() {\n    var _this2 = this,\n        _classnames;\n\n    var _props = this.props,\n        className = _props.className,\n        style = _props.style,\n        prefix = _props.prefix,\n        disabled = _props.disabled,\n        itemDirection = _props.itemDirection;\n    var others = pickOthers(CheckboxGroup.propTypes, this.props); // 如果内嵌标签跟dataSource同时存在，以内嵌标签为主\n\n    var children = void 0;\n\n    if (this.props.children) {\n      children = this.props.children;\n    } else {\n      children = this.props.dataSource.map(function (item, index) {\n        var option = item;\n\n        if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== 'object') {\n          option = {\n            label: item,\n            value: item,\n            disabled: disabled\n          };\n        }\n\n        var checked = _this2.state.value && _this2.state.value.indexOf(option.value) > -1;\n        return React.createElement(Checkbox, {\n          key: index,\n          value: option.value,\n          checked: checked,\n          disabled: disabled || option.disabled,\n          label: option.label\n        });\n      });\n    }\n\n    var cls = classnames((_classnames = {}, _classnames[prefix + 'checkbox-group'] = true, _classnames[prefix + 'checkbox-group-' + itemDirection] = true, _classnames[className] = !!className, _classnames.disabled = disabled, _classnames));\n    return React.createElement('span', _extends({}, others, {\n      className: cls,\n      style: style\n    }), children);\n  };\n\n  return CheckboxGroup;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 自定义类名\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内敛样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 整体禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]`\n   */\n  dataSource: PropTypes.arrayOf(PropTypes.any),\n\n  /**\n   * 被选中的值列表\n   */\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.number]),\n\n  /**\n   * 默认被选中的值列表\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.number]),\n\n  /**\n   * 通过子元素方式设置内部 checkbox\n   */\n  children: PropTypes.arrayOf(PropTypes.element),\n\n  /**\n   * 选中值改变时的事件\n   * @param {Array} value 选中项列表\n   * @param {Event} e Dom 事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 子项目的排列方式\n   * - hoz: 水平排列 (default)\n   * - ver: 垂直排列\n   */\n  itemDirection: PropTypes.oneOf(['hoz', 'ver'])\n}, _class.defaultProps = {\n  dataSource: [],\n  onChange: function onChange() {},\n  prefix: 'next-',\n  itemDirection: 'hoz'\n}, _class.childContextTypes = {\n  onChange: PropTypes.func,\n  __group__: PropTypes.bool,\n  selectedValue: PropTypes.array,\n  disabled: PropTypes.bool\n}, _temp);\nCheckboxGroup.displayName = 'CheckboxGroup';\nexport default ConfigProvider.config(CheckboxGroup);","map":null,"metadata":{},"sourceType":"module"}