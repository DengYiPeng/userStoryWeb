{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport UIState from '../mixin-ui-state';\nimport ConfigProvider from '../config-provider';\nimport Icon from '../icon';\nimport { obj, func } from '../util';\nvar noop = func.noop;\n\nfunction isChecked(selectedValue, value) {\n  return selectedValue.indexOf(value) > -1;\n}\n/**\n * Checkbox\n * @order 1\n */\n\n\nvar Checkbox = (_temp = _class = function (_UIState) {\n  _inherits(Checkbox, _UIState);\n\n  function Checkbox(props, context) {\n    _classCallCheck(this, Checkbox);\n\n    var _this = _possibleConstructorReturn(this, _UIState.call(this, props));\n\n    var checked = void 0,\n        indeterminate = void 0;\n\n    if (context.__group__) {\n      indeterminate = false;\n      checked = isChecked(context.selectedValue, props.value);\n    } else {\n      if ('checked' in props) {\n        checked = props.checked;\n      } else {\n        checked = props.defaultChecked;\n      }\n\n      if ('indeterminate' in props) {\n        indeterminate = props.indeterminate;\n      } else {\n        indeterminate = props.defaultIndeterminate;\n      }\n    }\n\n    _this.state = {\n      checked: checked,\n      indeterminate: indeterminate\n    };\n    _this.disabled = props.disabled || context.__group__ && 'disabled' in context && context.disabled;\n    _this.onChange = _this.onChange.bind(_this);\n    return _this;\n  }\n\n  Checkbox.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {\n    if (nextContext.__group__) {\n      if ('selectedValue' in nextContext) {\n        this.setState({\n          checked: isChecked(nextContext.selectedValue, nextProps.value)\n        });\n      }\n\n      this.disabled = nextProps.disabled || 'disabled' in nextContext && nextContext.disabled;\n    } else {\n      if ('checked' in nextProps) {\n        this.setState({\n          checked: nextProps.checked\n        });\n      }\n\n      if ('indeterminate' in nextProps) {\n        this.setState({\n          indeterminate: nextProps.indeterminate\n        });\n      }\n\n      this.disabled = nextProps.disabled;\n    }\n  };\n\n  Checkbox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {\n    var shallowEqual = obj.shallowEqual;\n    return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState) || !shallowEqual(this.context, nextContext);\n  };\n\n  Checkbox.prototype.onChange = function onChange(e) {\n    var checked = e.target.checked;\n    var value = this.props.value;\n\n    if (this.disabled) {\n      return;\n    }\n\n    if (this.context.__group__) {\n      this.context.onChange(value, e);\n    } else {\n      if (!('checked' in this.props)) {\n        this.setState({\n          checked: checked\n        });\n      }\n\n      if (!('indeterminate' in this.props)) {\n        this.setState({\n          indeterminate: false\n        });\n      }\n\n      this.props.onChange(checked, e);\n    }\n  };\n\n  Checkbox.prototype.render = function render() {\n    var _classnames;\n    /* eslint-disable no-unused-vars */\n\n\n    var _props = this.props,\n        id = _props.id,\n        className = _props.className,\n        children = _props.children,\n        style = _props.style,\n        label = _props.label,\n        onMouseEnter = _props.onMouseEnter,\n        onMouseLeave = _props.onMouseLeave,\n        rtl = _props.rtl,\n        otherProps = _objectWithoutProperties(_props, ['id', 'className', 'children', 'style', 'label', 'onMouseEnter', 'onMouseLeave', 'rtl']);\n\n    var checked = !!this.state.checked;\n    var disabled = this.disabled;\n    var indeterminate = !!this.state.indeterminate;\n    var prefix = this.context.prefix || this.props.prefix;\n    var others = obj.pickOthers(Checkbox.propTypes, otherProps);\n    var othersData = obj.pickAttrsWith(others, 'data-');\n    var childInput = React.createElement('input', _extends({}, obj.pickOthers(Checkbox.propTypes, otherProps), {\n      id: id,\n      disabled: disabled,\n      checked: checked,\n      type: 'checkbox',\n      onChange: this.onChange,\n      'aria-checked': indeterminate ? 'mixed' : checked,\n      className: prefix + 'checkbox-input'\n    })); // disable 无状态操作\n\n    if (!disabled) {\n      childInput = this.getStateElement(childInput);\n    }\n\n    var cls = classnames((_classnames = {}, _classnames[prefix + 'checkbox-wrapper'] = true, _classnames[className] = !!className, _classnames.checked = checked, _classnames.disabled = disabled, _classnames.indeterminate = indeterminate, _classnames[this.getStateClassName()] = true, _classnames));\n    var labelCls = prefix + 'checkbox-label';\n    var type = indeterminate ? 'semi-select' : 'select';\n    return React.createElement('label', _extends({}, othersData, {\n      className: cls,\n      style: style,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave\n    }), React.createElement('span', {\n      className: prefix + 'checkbox'\n    }, React.createElement('span', {\n      className: prefix + 'checkbox-inner'\n    }, React.createElement(Icon, {\n      type: type,\n      size: 'xs',\n      className: indeterminate ? 'zoomIn' : ''\n    })), childInput), [label, children].map(function (item, i) {\n      return item ? React.createElement('span', {\n        key: i,\n        className: labelCls\n      }, item) : null;\n    }));\n  };\n\n  return Checkbox;\n}(UIState), _class.displayName = 'Checkbox', _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 自定义类名\n   */\n  className: PropTypes.string,\n\n  /**\n   * checkbox id, 挂载在input上\n   */\n  id: PropTypes.string,\n\n  /**\n   * 自定义内敛样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 选中状态\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * 默认选中状态\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * 禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 通过属性配置label，\n   */\n  label: PropTypes.node,\n\n  /**\n   * Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   *  Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性\n   */\n  defaultIndeterminate: PropTypes.bool,\n\n  /**\n   * 状态变化时触发的事件\n   * @param {Boolean} checked 是否选中\n   * @param {Event} e Dom 事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 鼠标进入enter事件\n   * @param {Event} e Dom 事件对象\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * 鼠标离开Leave事件\n   * @param {Event} e Dom 事件对象\n   */\n  onMouseLeave: PropTypes.func\n}, _class.defaultProps = {\n  defaultChecked: false,\n  defaultIndeterminate: false,\n  onChange: noop,\n  onMouseEnter: noop,\n  onMouseLeave: noop,\n  prefix: 'next-'\n}, _class.contextTypes = {\n  onChange: PropTypes.func,\n  __group__: PropTypes.bool,\n  selectedValue: PropTypes.array,\n  disabled: PropTypes.bool,\n  prefix: PropTypes.string\n}, _temp);\nexport default ConfigProvider.config(Checkbox);","map":null,"metadata":{},"sourceType":"module"}