{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Icon from '../icon';\nimport { KEYCODE } from '../util';\nimport RowComponent from './expanded/row';\nimport Col from './column';\nimport { statics } from './util';\n\nvar noop = function noop() {};\n\nexport default function expanded(BaseComponent) {\n  var _class, _temp2;\n  /** Table */\n\n\n  var ExpandedTable = (_temp2 = _class = function (_React$Component) {\n    _inherits(ExpandedTable, _React$Component);\n\n    function ExpandedTable() {\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, ExpandedTable);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n        openRowKeys: _this.props.openRowKeys || []\n      }, _this.expandedKeydown = function (value, record, index, e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.keyCode === KEYCODE.ENTER) {\n          _this.onExpandedClick(value, record, index, e);\n        }\n      }, _this.renderExpandedCell = function (value, index, record) {\n        var _classnames;\n\n        var _this$props = _this.props,\n            getExpandedColProps = _this$props.getExpandedColProps,\n            prefix = _this$props.prefix,\n            locale = _this$props.locale;\n        var openRowKeys = _this.state.openRowKeys,\n            primaryKey = _this.props.primaryKey,\n            hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1,\n            switchNode = hasExpanded ? React.createElement(Icon, {\n          type: 'minus',\n          size: 'xs'\n        }) : React.createElement(Icon, {\n          type: 'add',\n          size: 'xs'\n        }),\n            attrs = getExpandedColProps(record, index) || {};\n        var cls = classnames((_classnames = {}, _classnames[prefix + 'table-expanded-ctrl'] = true, _classnames.disabled = attrs.disabled, _classnames[attrs.className] = attrs.className, _classnames));\n\n        if (!attrs.disabled) {\n          attrs.onClick = _this.onExpandedClick.bind(_this, value, record, index);\n        }\n\n        return React.createElement('span', _extends({}, attrs, {\n          role: 'button',\n          tabIndex: '0',\n          onKeyDown: _this.expandedKeydown.bind(_this, value, record, index),\n          'aria-label': hasExpanded ? locale.expanded : locale.folded,\n          'aria-expanded': hasExpanded,\n          className: cls\n        }), switchNode);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    ExpandedTable.prototype.getChildContext = function getChildContext() {\n      return {\n        openRowKeys: this.state.openRowKeys,\n        expandedRowRender: this.props.expandedRowRender,\n        expandedRowIndent: this.props.expandedRowIndent\n      };\n    };\n\n    ExpandedTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if ('openRowKeys' in nextProps) {\n        var openRowKeys = nextProps.openRowKeys;\n        this.setState({\n          openRowKeys: openRowKeys\n        });\n      }\n    };\n\n    ExpandedTable.prototype.onExpandedClick = function onExpandedClick(value, record, i, e) {\n      var openRowKeys = [].concat(this.state.openRowKeys),\n          primaryKey = this.props.primaryKey,\n          id = record[primaryKey],\n          index = openRowKeys.indexOf(id);\n\n      if (index > -1) {\n        openRowKeys.splice(index, 1);\n      } else {\n        openRowKeys.push(id);\n      }\n\n      if (!('openRowKeys' in this.props)) {\n        this.setState({\n          openRowKeys: openRowKeys\n        });\n      }\n\n      this.props.onRowOpen(openRowKeys, id, index === -1, record);\n      e.stopPropagation();\n    };\n\n    ExpandedTable.prototype.normalizeChildren = function normalizeChildren(children) {\n      var toArrayChildren = Children.map(children, function (child, index) {\n        return React.cloneElement(child, {\n          key: index\n        });\n      });\n      var prefix = this.props.prefix;\n      toArrayChildren.unshift(React.createElement(Col, {\n        title: '',\n        key: 'expanded',\n        cell: this.renderExpandedCell.bind(this),\n        width: 50,\n        className: prefix + 'table-expanded',\n        __normalized: true\n      }));\n      return toArrayChildren;\n    };\n\n    ExpandedTable.prototype.normalizeDataSource = function normalizeDataSource(ds) {\n      var ret = [];\n      ds.forEach(function (item) {\n        var itemCopy = _extends({}, item);\n\n        itemCopy.__expanded = true;\n        ret.push(item, itemCopy);\n      });\n      return ret;\n    };\n\n    ExpandedTable.prototype.render = function render() {\n      /* eslint-disable no-unused-vars, prefer-const */\n      var _props = this.props,\n          components = _props.components,\n          openRowKeys = _props.openRowKeys,\n          expandedRowRender = _props.expandedRowRender,\n          hasExpandedRowCtrl = _props.hasExpandedRowCtrl,\n          children = _props.children,\n          dataSource = _props.dataSource,\n          getExpandedColProps = _props.getExpandedColProps,\n          expandedRowIndent = _props.expandedRowIndent,\n          onRowOpen = _props.onRowOpen,\n          onExpandedRowClick = _props.onExpandedRowClick,\n          others = _objectWithoutProperties(_props, ['components', 'openRowKeys', 'expandedRowRender', 'hasExpandedRowCtrl', 'children', 'dataSource', 'getExpandedColProps', 'expandedRowIndent', 'onRowOpen', 'onExpandedRowClick']);\n\n      if (expandedRowRender && !components.Row) {\n        components = _extends({}, components);\n        components.Row = RowComponent;\n        dataSource = this.normalizeDataSource(dataSource);\n      }\n\n      if (expandedRowRender && hasExpandedRowCtrl) {\n        children = this.normalizeChildren(children);\n      }\n\n      return React.createElement(BaseComponent, _extends({}, others, {\n        dataSource: dataSource,\n        components: components\n      }), children);\n    };\n\n    return ExpandedTable;\n  }(React.Component), _class.ExpandedRow = RowComponent, _class.propTypes = _extends({\n    /**\n     * 额外渲染行的渲染函数\n     * @param {Object} record 该行所对应的数据\n     * @param {Number} index 该行所对应的序列\n     * @returns {Element}\n     */\n    expandedRowRender: PropTypes.func,\n\n    /**\n     * 额外渲染行的缩进\n     */\n    expandedRowIndent: PropTypes.array,\n\n    /**\n     * 默认情况下展开的渲染行或者Tree, 传入此属性为受控状态\n     */\n    openRowKeys: PropTypes.array,\n\n    /**\n     * 是否显示点击展开额外渲染行的+号按钮\n     */\n    hasExpandedRowCtrl: PropTypes.bool,\n\n    /**\n     * 设置额外渲染行的属性\n     */\n    getExpandedColProps: PropTypes.func,\n\n    /**\n     * 在额外渲染行或者Tree展开或者收起的时候触发的事件\n     * @param {Array} openRowKeys 展开的渲染行的key\n     * @param {String} currentRowKey 当前点击的渲染行的key\n     * @param {Boolean} expanded 当前点击是展开还是收起\n     * @param {Object} currentRecord 当前点击额外渲染行的记录\n     */\n    onRowOpen: PropTypes.func,\n\n    /**\n     * 点击额外渲染行触发的事件\n     * @param {Object} record 该行所对应的数据\n     * @param {Number} index 该行所对应的序列\n     * @param {Event} e DOM事件对象\n     */\n    onExpandedRowClick: PropTypes.func,\n    locale: PropTypes.object\n  }, BaseComponent.propTypes), _class.defaultProps = _extends({}, BaseComponent.defaultProps, {\n    getExpandedColProps: noop,\n    onRowOpen: noop,\n    hasExpandedRowCtrl: true,\n    components: {},\n    expandedRowIndent: [1, 0],\n    prefix: 'next-'\n  }), _class.childContextTypes = {\n    openRowKeys: PropTypes.array,\n    expandedRowRender: PropTypes.func,\n    expandedRowIndent: PropTypes.array\n  }, _temp2);\n  ExpandedTable.displayName = 'ExpandedTable';\n  statics(ExpandedTable, BaseComponent);\n  return ExpandedTable;\n}","map":null,"metadata":{},"sourceType":"module"}