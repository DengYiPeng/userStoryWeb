{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _initialiseProps;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Button from '../../button';\nimport Icon from '../../icon';\nimport { KEYCODE } from '../../util'; // 共享状态的组件需要变成非受控组件\n\nvar Filter = (_temp = _class = function (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  function Filter(props) {\n    _classCallCheck(this, Filter);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var filterParams = props.filterParams || {};\n    var filterConfig = filterParams[props.dataIndex] || {};\n    _this.state = {\n      visible: filterConfig.visible || false,\n      selectedKeys: filterConfig.selectedKeys || []\n    };\n    _this._selectedKeys = [].concat(_this.state.selectedKeys);\n    return _this;\n  }\n\n  Filter.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.hasOwnProperty('filterParams') && typeof nextProps.filterParams !== 'undefined') {\n      var dataIndex = nextProps.dataIndex || this.props.dataIndex;\n      var filterParams = nextProps.filterParams || {};\n      var filterConfig = filterParams[dataIndex] || {};\n      var selectedKeys = filterConfig.selectedKeys || [];\n      this.setState({\n        selectedKeys: selectedKeys\n      });\n      this._selectedKeys = [].concat(selectedKeys);\n    }\n  };\n\n  Filter.prototype.render = function render() {\n    var _props = this.props,\n        filters = _props.filters,\n        prefix = _props.prefix,\n        locale = _props.locale,\n        filterMode = _props.filterMode;\n    var _state = this.state,\n        visible = _state.visible,\n        selectedKeys = _state.selectedKeys;\n\n    function renderMenuItem(item) {\n      return React.createElement(Menu.Item, {\n        key: item.value\n      }, item.label);\n    }\n\n    function renderSubMenu(parent, children) {\n      return React.createElement(Menu.SubMenu, {\n        label: parent.label,\n        key: parent.value,\n        selectable: false\n      }, renderMenuContent(children));\n    }\n\n    function renderMenuContent(list) {\n      return list.map(function (item) {\n        if (item.children) {\n          return renderSubMenu(item, item.children);\n        } else {\n          return renderMenuItem(item);\n        }\n      });\n    }\n\n    var content = renderMenuContent(filters),\n        footer = React.createElement('div', {\n      className: prefix + 'table-filter-footer'\n    }, React.createElement(Button, {\n      type: 'primary',\n      onClick: this.onFilterConfirm\n    }, locale.ok), React.createElement(Button, {\n      onClick: this.onFilterClear\n    }, locale.reset));\n    return React.createElement(Dropdown, {\n      trigger: React.createElement('span', {\n        role: 'button',\n        'aria-label': locale.filter,\n        onKeyDown: this.filterKeydown,\n        tabIndex: '0',\n        className: prefix + 'table-filter'\n      }, React.createElement(Icon, {\n        type: 'filter',\n        size: 'small'\n      })),\n      triggerType: 'click',\n      visible: visible,\n      autoFocus: true,\n      container: function container(node) {\n        return node.parentNode;\n      },\n      onVisibleChange: this.onFilterVisible\n    }, React.createElement(Menu, {\n      footer: footer,\n      selectedKeys: selectedKeys,\n      selectMode: filterMode,\n      onSelect: this.onFilterSelect\n    }, content));\n  };\n\n  return Filter;\n}(React.Component), _class.propTypes = {\n  dataIndex: PropTypes.string,\n  filters: PropTypes.array,\n  filterMode: PropTypes.string,\n  filterParams: PropTypes.object,\n  locale: PropTypes.object,\n  onFilter: PropTypes.func,\n  prefix: PropTypes.string\n}, _class.defaultProps = {\n  onFilter: function onFilter() {}\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.filterKeydown = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (e.keyCode === KEYCODE.ENTER) {\n      _this2.setState({\n        visible: !_this2.state.visible\n      });\n    }\n  };\n\n  this.onFilterVisible = function (visible) {\n    _this2.setState({\n      visible: visible\n    });\n\n    if (!visible) {\n      var selectedKeys = [].concat(_this2._selectedKeys);\n\n      _this2.setState({\n        selectedKeys: selectedKeys\n      });\n    }\n  };\n\n  this.onFilterSelect = function (selectedKeys) {\n    _this2.setState({\n      visible: true,\n      selectedKeys: selectedKeys\n    });\n  };\n\n  this.onFilterConfirm = function () {\n    var selectedKeys = _this2.state.selectedKeys;\n    var filterParams = {},\n        dataIndex = _this2.props.dataIndex;\n    filterParams[dataIndex] = {\n      visible: false,\n      selectedKeys: selectedKeys\n    };\n    _this2._selectedKeys = [].concat(selectedKeys);\n\n    _this2.setState({\n      visible: false\n    }); // 兼容之前的格式\n\n\n    _this2.props.onFilter(filterParams);\n  };\n\n  this.onFilterClear = function () {\n    var filterParams = {},\n        dataIndex = _this2.props.dataIndex;\n    filterParams[dataIndex] = {\n      visible: false,\n      selectedKeys: []\n    };\n    _this2._selectedKeys = [];\n\n    _this2.setState({\n      selectedKeys: [],\n      visible: false\n    }); // 兼容之前的格式\n\n\n    _this2.props.onFilter(filterParams);\n  };\n}, _temp);\nFilter.displayName = 'Filter';\nexport { Filter as default };","map":null,"metadata":{},"sourceType":"module"}