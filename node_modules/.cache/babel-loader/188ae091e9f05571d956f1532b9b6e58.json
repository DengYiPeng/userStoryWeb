{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { events, func } from '../../util';\nimport Balloon from '../../balloon';\nimport { getPercent } from '../utils';\nvar Tooltip = Balloon.Tooltip;\nvar noop = func.noop;\n\nfunction _getStyle(min, max, value) {\n  return {\n    left: getPercent(min, max, value[0]) + '%',\n    right: 100 - getPercent(min, max, value[1]) + '%'\n  };\n}\n\nfunction sliderFrag(props) {\n  var prefix = props.prefix,\n      min = props.min,\n      max = props.max,\n      value = props.value,\n      disabled = props.disabled,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      onMouseDown = props.onMouseDown;\n  var activeClass = !disabled && props.hasMovingClass ? prefix + 'range-active' : '';\n  return React.createElement('div', {\n    className: prefix + 'range-frag ' + activeClass,\n    style: _getStyle(min, max, value),\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseDown: onMouseDown\n  }, React.createElement('div', {\n    className: prefix + 'range-selected'\n  }), React.createElement('div', {\n    className: prefix + 'range-slider'\n  }, React.createElement('div', {\n    className: prefix + 'range-slider-inner'\n  })), React.createElement('div', {\n    className: prefix + 'range-slider'\n  }, React.createElement('div', {\n    className: prefix + 'range-slider-inner'\n  })));\n}\n\nsliderFrag.propTypes = {\n  prefix: PropTypes.string,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  hasMovingClass: PropTypes.bool,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  value: PropTypes.arrayOf(PropTypes.number),\n  disabled: PropTypes.bool\n};\nvar FixedSlider = (_temp = _class = function (_React$Component) {\n  _inherits(FixedSlider, _React$Component);\n\n  function FixedSlider(props) {\n    _classCallCheck(this, FixedSlider);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.state = {\n      hasMovingClass: false,\n      onTooltipVisibleChange: false,\n      tooltipAnimation: true\n    };\n    return _this;\n  }\n\n  FixedSlider.prototype._onMouseEnter = function _onMouseEnter() {\n    if (!(this.keyState === 'down')) {\n      this.keyState = 'enter';\n    }\n\n    this.setState({\n      hasMovingClass: true\n    });\n  };\n\n  FixedSlider.prototype._onMouseLeave = function _onMouseLeave() {\n    if (this.keyState === 'enter') {\n      this.setState({\n        hasMovingClass: false\n      });\n    }\n  };\n\n  FixedSlider.prototype._onMouseDown = function _onMouseDown() {\n    this.keyState = 'down';\n    this.setState({\n      hasMovingClass: true\n    });\n\n    this._addDocumentEvents();\n  };\n\n  FixedSlider.prototype._onMouseUp = function _onMouseUp() {\n    if (this.keyState === 'down') {\n      this.keyState = '';\n\n      this._removeDocumentEvents();\n\n      this.setState({\n        hasMovingClass: false\n      });\n    }\n  };\n\n  FixedSlider.prototype._addDocumentEvents = function _addDocumentEvents() {\n    this._onMouseUpListener = events.on(document, 'mouseup', this._onMouseUp.bind(this));\n  };\n\n  FixedSlider.prototype._removeDocumentEvents = function _removeDocumentEvents() {\n    if (this._onMouseUpListener) {\n      this._onMouseUpListener.off();\n\n      this._onMouseUpListener = null;\n    }\n  };\n\n  FixedSlider.prototype.render = function render() {\n    var _props = this.props,\n        hasTip = _props.hasTip,\n        value = _props.value,\n        tipRender = _props.tipRender,\n        tooltipVisible = _props.tooltipVisible,\n        hasMovingClass = _props.hasMovingClass;\n    var addedProps = {\n      hasMovingClass: hasMovingClass || this.state.hasMovingClass,\n      onMouseEnter: this._onMouseEnter.bind(this),\n      onMouseLeave: this._onMouseLeave.bind(this),\n      onMouseDown: this._onMouseDown.bind(this)\n    };\n    return hasTip ? React.createElement(Tooltip, {\n      popupContainer: function popupContainer(target) {\n        return target.parentNode;\n      },\n      popupProps: {\n        visible: tooltipVisible || hasMovingClass,\n        animation: this.state.tooltipAnimation ? {\n          in: 'expandInUp',\n          out: 'expandOutDown'\n        } : false\n      },\n      trigger: sliderFrag(_extends({}, this.props, addedProps)),\n      align: 't'\n    }, tipRender(value[0] + '-' + value[1])) : sliderFrag(_extends({}, this.props, addedProps));\n  };\n\n  return FixedSlider;\n}(React.Component), _class.propTypes = {\n  hasTip: PropTypes.bool,\n  tooltipVisible: PropTypes.bool,\n  onTooltipVisibleChange: PropTypes.func,\n  tooltipAnimation: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  tipRender: PropTypes.func,\n  disabled: PropTypes.bool,\n  hasMovingClass: PropTypes.bool\n}, _class.defaultProps = {\n  disabled: false,\n  hasTip: true,\n  onChange: noop,\n  onProcess: noop,\n  tipRender: function tipRender(value) {\n    return value;\n  },\n  reverse: false\n}, _temp);\nFixedSlider.displayName = 'FixedSlider';\nexport { FixedSlider as default };","map":null,"metadata":{},"sourceType":"module"}