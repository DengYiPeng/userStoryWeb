{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport getContextProps from './get-context-props';\nimport { config, initLocales, setLanguage, setLocale, setDirection, getLocale, getLanguage, getDirection } from './config';\nimport Consumer from './consumer';\nimport Cache from './cache';\nvar childContextCache = new Cache();\n/**\n * ConfigProvider\n * @propsExtends false\n */\n\nvar ConfigProvider = (_temp = _class = function (_Component) {\n  _inherits(ConfigProvider, _Component);\n  /**\n   * 传入组件的 props 和 displayName，得到和 childContext 计算过的包含有 preifx/locale/pure 的对象，一般用于通过静态方法生成脱离组件树的组件\n   * @param {Object} props 组件的 props\n   * @param {String} displayName 组件的 displayName\n   * @returns {Object} 新的 context props\n   */\n\n\n  function ConfigProvider() {\n    _classCallCheck(this, ConfigProvider);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args)));\n\n    childContextCache.add(_this, _extends({}, childContextCache.get(_this, {}), _this.getChildContext()));\n    return _this;\n  }\n  /**\n   * 传入组件，生成受 ConfigProvider 控制的 HOC 组件\n   * @param {Component} Component 组件类\n   * @param {Object} options 可选项\n   * @returns {Component} HOC\n   */\n\n\n  ConfigProvider.prototype.getChildContext = function getChildContext() {\n    var _props = this.props,\n        prefix = _props.prefix,\n        locale = _props.locale,\n        pure = _props.pure,\n        warning = _props.warning,\n        rtl = _props.rtl;\n    return {\n      nextPrefix: prefix,\n      nextLocale: locale,\n      nextPure: pure,\n      nextRtl: rtl,\n      nextWarning: warning\n    };\n  };\n\n  ConfigProvider.prototype.componentWillMount = function componentWillMount() {\n    this.setMomentLocale(this.props.locale);\n  };\n\n  ConfigProvider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.locale !== nextProps.locale) {\n      this.setMomentLocale(nextProps.locale);\n    }\n  };\n\n  ConfigProvider.prototype.componentDidUpdate = function componentDidUpdate() {\n    childContextCache.add(this, _extends({}, childContextCache.get(this, {}), this.getChildContext()));\n  };\n\n  ConfigProvider.prototype.componentWillUnmount = function componentWillUnmount() {\n    childContextCache.remove(this);\n  };\n\n  ConfigProvider.prototype.setMomentLocale = function setMomentLocale(locale) {\n    var moment = void 0;\n\n    try {\n      moment = require('moment');\n    } catch (e) {// ignore\n    }\n\n    if (moment && locale) {\n      moment.locale(locale.momentLocale);\n    }\n  };\n\n  ConfigProvider.prototype.render = function render() {\n    return Children.only(this.props.children);\n  };\n\n  return ConfigProvider;\n}(Component), _class.propTypes = {\n  /**\n   * 样式类名的品牌前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 国际化文案对象，属性为组件的 displayName\n   */\n  locale: PropTypes.object,\n\n  /**\n   * 是否开启 Pure Render 模式，会提高性能，但是也会带来副作用\n   */\n  pure: PropTypes.bool,\n\n  /**\n   * 是否在开发模式下显示组件属性被废弃的 warning 提示\n   */\n  warning: PropTypes.bool,\n\n  /**\n   * 是否开启 rtl 模式\n   */\n  rtl: PropTypes.bool,\n\n  /**\n   * 组件树\n   */\n  children: PropTypes.element\n}, _class.defaultProps = {\n  warning: true\n}, _class.childContextTypes = {\n  nextPrefix: PropTypes.string,\n  nextLocale: PropTypes.object,\n  nextPure: PropTypes.bool,\n  nextRtl: PropTypes.bool,\n  nextWarning: PropTypes.bool\n}, _class.config = function (Component, options) {\n  return config(Component, options);\n}, _class.getContextProps = function (props, displayName) {\n  return getContextProps(props, childContextCache.root() || {}, displayName);\n}, _class.initLocales = initLocales, _class.setLanguage = setLanguage, _class.setLocale = setLocale, _class.setDirection = setDirection, _class.getLanguage = getLanguage, _class.getLocale = getLocale, _class.getDirection = getDirection, _class.Consumer = Consumer, _class.getContext = function () {\n  var _ref = childContextCache.root() || {},\n      nextPrefix = _ref.nextPrefix,\n      nextLocale = _ref.nextLocale,\n      nextPure = _ref.nextPure,\n      nextRtl = _ref.nextRtl,\n      nextWarning = _ref.nextWarning;\n\n  return {\n    prefix: nextPrefix,\n    locale: nextLocale,\n    pure: nextPure,\n    rtl: nextRtl,\n    warning: nextWarning\n  };\n}, _temp);\nConfigProvider.displayName = 'ConfigProvider';\nexport default ConfigProvider;","map":null,"metadata":{},"sourceType":"module"}