{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component, Children, isValidElement } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { func, obj } from '../../util';\nvar bindCtx = func.bindCtx;\nvar pickOthers = obj.pickOthers;\nvar Item = (_temp = _class = function (_Component) {\n  _inherits(Item, _Component);\n\n  function Item(props) {\n    _classCallCheck(this, Item);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    bindCtx(_this, ['handleClick', 'handleKeyDown']);\n    return _this;\n  }\n\n  Item.prototype.componentDidMount = function componentDidMount() {\n    this.itemNode = findDOMNode(this);\n    var _props = this.props,\n        parentMode = _props.parentMode,\n        root = _props.root;\n\n    if (parentMode === 'popup') {\n      this.menuNode = this.itemNode.parentNode;\n    } else {\n      this.menuNode = findDOMNode(root);\n      var _root$props = root.props,\n          prefix = _root$props.prefix,\n          header = _root$props.header,\n          footer = _root$props.footer;\n\n      if (header || footer) {\n        this.menuNode = this.menuNode.querySelector('.' + prefix + 'menu-content');\n      }\n    }\n\n    this.setFocus();\n  };\n\n  Item.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.setFocus();\n  };\n\n  Item.prototype.focusable = function focusable() {\n    var _props2 = this.props,\n        root = _props2.root,\n        type = _props2.type,\n        disabled = _props2.disabled;\n    var focusable = root.props.focusable;\n    return focusable && (type === 'submenu' || !disabled);\n  };\n\n  Item.prototype.getFocused = function getFocused() {\n    var _props3 = this.props,\n        _key = _props3._key,\n        root = _props3.root;\n    var focusedKey = root.state.focusedKey;\n    return focusedKey === _key;\n  };\n\n  Item.prototype.setFocus = function setFocus() {\n    var focused = this.getFocused();\n\n    if (focused) {\n      if (this.focusable()) {\n        this.itemNode.focus({\n          preventScroll: true\n        });\n      }\n\n      if (this.menuNode && this.menuNode.scrollHeight > this.menuNode.clientHeight) {\n        var scrollBottom = this.menuNode.clientHeight + this.menuNode.scrollTop;\n        var itemBottom = this.itemNode.offsetTop + this.itemNode.offsetHeight;\n\n        if (itemBottom > scrollBottom) {\n          this.menuNode.scrollTop = itemBottom - this.menuNode.clientHeight;\n        } else if (this.itemNode.offsetTop < this.menuNode.scrollTop) {\n          this.menuNode.scrollTop = this.itemNode.offsetTop;\n        }\n      }\n    }\n  };\n\n  Item.prototype.handleClick = function handleClick(e) {\n    e.stopPropagation();\n    var _props4 = this.props,\n        _key = _props4._key,\n        root = _props4.root,\n        disabled = _props4.disabled;\n\n    if (!disabled) {\n      root.handleItemClick(_key, this, e);\n      this.props.onClick && this.props.onClick(e);\n    } else {\n      e.preventDefault();\n    }\n  };\n\n  Item.prototype.handleKeyDown = function handleKeyDown(e) {\n    var _props5 = this.props,\n        _key = _props5._key,\n        root = _props5.root,\n        type = _props5.type;\n\n    if (this.focusable()) {\n      root.handleItemKeyDown(_key, type, this, e);\n    }\n\n    this.props.onKeyDown && this.props.onKeyDown(e);\n  };\n\n  Item.prototype.getTitle = function getTitle(children) {\n    var labelString = '';\n\n    var loop = function loop(children) {\n      Children.forEach(children, function (child) {\n        if (isValidElement(child) && child.props.children) {\n          loop(child.props.children);\n        } else if (typeof child === 'string') {\n          labelString += child;\n        }\n      });\n    };\n\n    loop(children);\n    return labelString;\n  };\n\n  Item.prototype.render = function render() {\n    var _cx;\n\n    var _props6 = this.props,\n        level = _props6.level,\n        root = _props6.root,\n        replaceClassName = _props6.replaceClassName,\n        groupIndent = _props6.groupIndent,\n        component = _props6.component,\n        disabled = _props6.disabled,\n        className = _props6.className,\n        children = _props6.children,\n        needIndent = _props6.needIndent,\n        parentMode = _props6.parentMode,\n        _key = _props6._key;\n    var others = pickOthers(Object.keys(Item.propTypes), this.props);\n    var _root$props2 = root.props,\n        prefix = _root$props2.prefix,\n        focusable = _root$props2.focusable,\n        inlineIndent = _root$props2.inlineIndent,\n        itemClassName = _root$props2.itemClassName,\n        rtl = _root$props2.rtl;\n    var focused = this.getFocused();\n    var newClassName = replaceClassName ? className : cx((_cx = {}, _cx[prefix + 'menu-item'] = true, _cx[prefix + 'disabled'] = disabled, _cx[prefix + 'focused'] = !focusable && focused, _cx[itemClassName] = !!itemClassName, _cx[className] = !!className, _cx));\n\n    if (disabled) {\n      others['aria-disabled'] = true;\n    }\n\n    others.tabIndex = root.tabbableKey === _key ? '0' : '-1';\n\n    if (parentMode === 'inline' && level > 1 && inlineIndent > 0 && needIndent) {\n      var _extends2;\n\n      others.style = _extends({}, others.style || {}, (_extends2 = {}, _extends2[rtl ? 'paddingRight' : 'paddingLeft'] = level * inlineIndent - (groupIndent || 0) * 0.4 * inlineIndent + 'px', _extends2));\n    }\n\n    var TagName = component;\n    return React.createElement(TagName, _extends({\n      role: 'menuitem',\n      title: this.getTitle(children)\n    }, others, {\n      className: newClassName,\n      onClick: this.handleClick,\n      onKeyDown: this.handleKeyDown\n    }), React.createElement('div', {\n      className: prefix + 'menu-item-inner'\n    }, children));\n  };\n\n  return Item;\n}(Component), _class.propTypes = {\n  _key: PropTypes.string,\n  level: PropTypes.number,\n  groupIndent: PropTypes.number,\n  root: PropTypes.object,\n  parent: PropTypes.object,\n  parentMode: PropTypes.oneOf(['inline', 'popup']),\n  type: PropTypes.oneOf(['submenu', 'item']),\n  component: PropTypes.string,\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  needIndent: PropTypes.bool,\n  replaceClassName: PropTypes.bool\n}, _class.defaultProps = {\n  component: 'li',\n  groupIndent: 0,\n  replaceClassName: false,\n  needIndent: true\n}, _temp);\nItem.displayName = 'Item';\nexport { Item as default };","map":null,"metadata":{},"sourceType":"module"}