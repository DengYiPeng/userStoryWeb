{"ast":null,"code":"import * as util from '../util';\n/**\n *  Rule for validating minimum and maximum allowed values.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\nfunction length(rule, value, errors, options) {\n  var key = null;\n  var isNum = typeof value === 'number';\n  var isStr = typeof value === 'string';\n  var isArr = Array.isArray(value);\n\n  if (isNum) {\n    key = 'number';\n  } else if (isStr) {\n    key = 'string';\n  } else if (isArr) {\n    key = 'array';\n  }\n\n  if (!key) {\n    return false;\n  }\n\n  var val = value;\n  var length = Number(rule.length);\n  var maxLength = Number(rule.maxLength);\n  var minLength = Number(rule.minLength);\n\n  if (minLength || maxLength || length) {\n    if (isNum) {\n      val = '' + val;\n    }\n\n    val = val.length;\n\n    if (length && val !== rule.length) {\n      errors.push(util.format(options.messages[key].length, rule.field, rule.length));\n    } else if (val < minLength) {\n      errors.push(util.format(options.messages[key].minLength, rule.field, rule.minLength));\n    } else if (val > maxLength) {\n      errors.push(util.format(options.messages[key].maxLength, rule.field, rule.maxLength));\n    }\n  }\n}\n\nexport default length;","map":null,"metadata":{},"sourceType":"module"}