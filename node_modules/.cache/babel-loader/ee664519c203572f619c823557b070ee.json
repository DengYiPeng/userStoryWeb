{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport moment from 'moment';\nimport ConfigProvider from '../config-provider';\nimport locale from '../locale/zh-cn';\nimport { obj, func } from '../util';\nimport RangePanelHeader from './head/range-panel-header';\nimport MonthPanelHeader from './head/month-panel-header';\nimport YearPanelHeader from './head/year-panel-header';\nimport DateTable from './table/date-table';\nimport MonthTable from './table/month-table';\nimport YearTable from './table/year-table';\nimport { checkMomentObj, formatDateValue, getVisibleMonth, isSameYearMonth, CALENDAR_MODES, CALENDAR_MODE_DATE, CALENDAR_MODE_MONTH, CALENDAR_MODE_YEAR } from './utils';\nvar RangeCalendar = (_temp = _class = function (_React$Component) {\n  _inherits(RangeCalendar, _React$Component);\n\n  function RangeCalendar(props, context) {\n    _classCallCheck(this, RangeCalendar);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.onSelectCell = function (date, nextMode) {\n      _this.changeVisibleMonth(date, 'cellClick');\n\n      if (_this.state.mode === CALENDAR_MODE_DATE) {\n        _this.props.onSelect(date);\n      }\n\n      _this.changeMode(nextMode);\n    };\n\n    _this.changeMode = function (mode, activePanel) {\n      if (typeof mode === 'string' && mode !== _this.state.mode) {\n        _this.setState({\n          mode: mode\n        });\n      }\n\n      if (activePanel && activePanel !== _this.state.activePanel) {\n        _this.setState({\n          activePanel: activePanel\n        });\n      }\n    };\n\n    _this.changeVisibleMonth = function (date, reason) {\n      if (!isSameYearMonth(date, _this.state.startVisibleMonth)) {\n        _this.setState({\n          startVisibleMonth: date\n        });\n\n        _this.props.onVisibleMonthChange(date, reason);\n      }\n    };\n\n    _this.changeVisibleMonthByOffset = function (offset, type) {\n      var offsetDate = _this.state.startVisibleMonth.clone().add(offset, type);\n\n      _this.changeVisibleMonth(offsetDate, 'buttonClick');\n    };\n\n    _this.goPrevDecade = function () {\n      _this.changeVisibleMonthByOffset(-10, 'years');\n    };\n\n    _this.goNextDecade = function () {\n      _this.changeVisibleMonthByOffset(10, 'years');\n    };\n\n    _this.goPrevYear = function () {\n      _this.changeVisibleMonthByOffset(-1, 'years');\n    };\n\n    _this.goNextYear = function () {\n      _this.changeVisibleMonthByOffset(1, 'years');\n    };\n\n    _this.goPrevMonth = function () {\n      _this.changeVisibleMonthByOffset(-1, 'months');\n    };\n\n    _this.goNextMonth = function () {\n      _this.changeVisibleMonthByOffset(1, 'months');\n    };\n\n    var startValue = formatDateValue(props.startValue || props.defaultStartValue);\n    var endValue = formatDateValue(props.endValue || props.defaultEndValue);\n    var visibleMonth = getVisibleMonth(props.defaultVisibleMonth, startValue);\n    _this.state = {\n      startValue: startValue,\n      endValue: endValue,\n      mode: props.mode,\n      startVisibleMonth: visibleMonth,\n      activePanel: undefined\n    };\n    _this.today = moment();\n    return _this;\n  }\n\n  RangeCalendar.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('startValue' in nextProps) {\n      var startValue = formatDateValue(nextProps.startValue);\n      this.setState({\n        startValue: startValue\n      });\n\n      if (startValue) {\n        this.setState({\n          startVisibleMonth: startValue\n        });\n      }\n    }\n\n    if ('endValue' in nextProps) {\n      var endValue = formatDateValue(nextProps.endValue);\n      this.setState({\n        endValue: endValue\n      });\n    }\n\n    if ('mode' in nextProps) {\n      this.setState({\n        mode: nextProps.mode\n      });\n    }\n  };\n  /**\n   * 根据日期偏移量设置当前展示的月份\n   * @param {Number} offset 日期偏移量\n   * @param {String} type 日期偏移类型 days, months, years\n   */\n\n\n  RangeCalendar.prototype.render = function render() {\n    var _classnames;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        rtl = _props.rtl,\n        dateCellRender = _props.dateCellRender,\n        className = _props.className,\n        format = _props.format,\n        locale = _props.locale,\n        showOtherMonth = _props.showOtherMonth,\n        disabledDate = _props.disabledDate,\n        others = _objectWithoutProperties(_props, ['prefix', 'rtl', 'dateCellRender', 'className', 'format', 'locale', 'showOtherMonth', 'disabledDate']);\n\n    var _state = this.state,\n        startValue = _state.startValue,\n        endValue = _state.endValue,\n        mode = _state.mode,\n        startVisibleMonth = _state.startVisibleMonth,\n        activePanel = _state.activePanel; // reset moment locale\n\n    if (locale.momentLocale) {\n      startValue && startValue.locale(locale.momentLocale);\n      endValue && endValue.locale(locale.momentLocale);\n      startVisibleMonth.locale(locale.momentLocale);\n    }\n\n    if (rtl) {\n      others.dir = 'rtl';\n    }\n\n    var localeData = startVisibleMonth.localeData();\n    var endVisibleMonth = startVisibleMonth.clone().add(1, 'months');\n    var headerProps = {\n      prefix: prefix,\n      rtl: rtl,\n      mode: mode,\n      locale: locale,\n      momentLocale: localeData,\n      startVisibleMonth: startVisibleMonth,\n      endVisibleMonth: endVisibleMonth,\n      changeMode: this.changeMode\n    };\n    var tableProps = {\n      prefix: prefix,\n      value: startValue,\n      startValue: startValue,\n      endValue: endValue,\n      mode: mode,\n      locale: locale,\n      momentLocale: localeData,\n      showOtherMonth: showOtherMonth,\n      today: this.today,\n      disabledDate: disabledDate,\n      dateCellRender: dateCellRender,\n      changeMode: this.changeMode,\n      changeVisibleMonth: this.changeVisibleMonth\n    };\n    var visibleMonths = {\n      start: startVisibleMonth,\n      end: endVisibleMonth\n    };\n    var visibleMonth = visibleMonths[activePanel];\n    var header = void 0;\n    var table = void 0;\n\n    switch (mode) {\n      case CALENDAR_MODE_DATE:\n        {\n          table = [React.createElement('div', {\n            className: prefix + 'calendar-body-left',\n            key: 'left-panel'\n          }, React.createElement(DateTable, _extends({\n            format: format\n          }, tableProps, {\n            visibleMonth: startVisibleMonth,\n            onSelectDate: this.onSelectCell\n          }))), React.createElement('div', {\n            className: prefix + 'calendar-body-right',\n            key: 'right-panel'\n          }, React.createElement(DateTable, _extends({\n            format: format\n          }, tableProps, {\n            visibleMonth: endVisibleMonth,\n            onSelectDate: this.onSelectCell\n          })))];\n          header = React.createElement(RangePanelHeader, _extends({}, headerProps, {\n            goPrevYear: this.goPrevYear,\n            goPrevMonth: this.goPrevMonth,\n            goNextYear: this.goNextYear,\n            goNextMonth: this.goNextMonth\n          }));\n          break;\n        }\n\n      case CALENDAR_MODE_MONTH:\n        {\n          table = React.createElement(MonthTable, _extends({}, tableProps, {\n            visibleMonth: visibleMonth,\n            onSelectMonth: this.onSelectCell\n          }));\n          header = React.createElement(MonthPanelHeader, _extends({}, headerProps, {\n            visibleMonth: visibleMonth,\n            goPrevYear: this.goPrevYear,\n            goNextYear: this.goNextYear\n          }));\n          break;\n        }\n\n      case CALENDAR_MODE_YEAR:\n        {\n          table = React.createElement(YearTable, _extends({}, tableProps, {\n            rtl: rtl,\n            visibleMonth: visibleMonth,\n            onSelectYear: this.onSelectCell,\n            goPrevDecade: this.goPrevDecade,\n            goNextDecade: this.goNextDecade\n          }));\n          header = React.createElement(YearPanelHeader, _extends({}, headerProps, {\n            visibleMonth: visibleMonth,\n            goPrevDecade: this.goPrevDecade,\n            goNextDecade: this.goNextDecade\n          }));\n          break;\n        }\n    }\n\n    var classNames = classnames((_classnames = {}, _classnames[prefix + 'calendar'] = true, _classnames[prefix + 'calendar-range'] = true, _classnames), className);\n    return React.createElement('div', _extends({}, obj.pickOthers(RangeCalendar.propTypes, others), {\n      className: classNames\n    }), header, React.createElement('div', {\n      className: prefix + 'calendar-body'\n    }, table));\n  };\n\n  return RangeCalendar;\n}(React.Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 默认的开始日期\n   */\n  defaultStartValue: checkMomentObj,\n\n  /**\n   * 默认的结束日期\n   */\n  defaultEndValue: checkMomentObj,\n\n  /**\n   * 开始日期（moment 对象）\n   */\n  startValue: checkMomentObj,\n\n  /**\n   * 结束日期（moment 对象）\n   */\n  endValue: checkMomentObj,\n  // 面板模式\n  mode: PropTypes.oneOf(CALENDAR_MODES),\n  // 日期值的格式（用于日期title显示的格式）\n  format: PropTypes.string,\n\n  /**\n   * 是否显示非本月的日期\n   */\n  showOtherMonth: PropTypes.bool,\n\n  /**\n   * 模板展示的月份（起始月份）\n   */\n  defaultVisibleMonth: PropTypes.func,\n\n  /**\n   * 展现的月份变化时的回调\n   * @param {Object} value 显示的月份 (moment 对象)\n   * @param {String} reason 触发月份改变原因\n   */\n  onVisibleMonthChange: PropTypes.func,\n\n  /**\n   * 不可选择的日期\n   * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n   * @returns {Boolean}\n   */\n  disabledDate: PropTypes.func,\n\n  /**\n   * 选择日期单元格时的回调\n   * @param {Object} value 对应的日期值 (moment 对象)\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * 自定义日期单元格渲染\n   */\n  dateCellRender: PropTypes.func,\n  locale: PropTypes.object,\n  className: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  rtl: false,\n  mode: CALENDAR_MODE_DATE,\n  format: 'YYYY-MM-DD',\n  dateCellRender: function dateCellRender(value) {\n    return value.date();\n  },\n  onSelect: func.noop,\n  onVisibleMonthChange: func.noop,\n  locale: locale.Calendar,\n  showOtherMonth: false\n}, _temp);\nRangeCalendar.displayName = 'RangeCalendar';\nexport default ConfigProvider.config(RangeCalendar, {\n  componentName: 'Calendar'\n});","map":null,"metadata":{},"sourceType":"module"}