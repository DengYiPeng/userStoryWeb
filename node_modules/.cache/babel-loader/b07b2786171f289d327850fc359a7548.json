{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n/* eslint react/require-default-props:0, react/no-unused-prop-types:0, react/no-find-dom-node:0 */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar defaultSetFieldValue = function defaultSetFieldValue() {\n  return arguments.length <= 0 ? undefined : arguments[0];\n};\n\nvar defaultGetFieldValue = function defaultGetFieldValue(value) {\n  return value;\n};\n\nvar FormBinder = (_temp2 = _class = function (_Component) {\n  _inherits(FormBinder, _Component);\n\n  function FormBinder() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FormBinder);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FormBinder.__proto__ || Object.getPrototypeOf(FormBinder)).call.apply(_ref, [this].concat(args))), _this), _this.rules = [], _this.getRules = function (props) {\n      // rules 优先级最高\n      if (props.rules && Array.isArray(props.rules)) {\n        return props.rules;\n      }\n\n      var rules = []; // [{required: true, max: 10, ...}]\n\n      var ruleKeys = ['required', 'pattern', 'min', 'max', 'len', 'enum', 'whitespace', 'fields', 'transform', 'message', 'validator', 'type', 'range'];\n      ruleKeys.forEach(function (ruleKey) {\n        var ruleValue = void 0;\n\n        if (ruleKey in props) {\n          ruleValue = props[ruleKey];\n        }\n\n        if (ruleValue !== undefined && ruleValue !== null) {\n          if (rules[0]) {\n            rules[0][ruleKey] = ruleValue;\n          } else {\n            rules.push(_defineProperty({}, ruleKey, ruleValue));\n          }\n        }\n      });\n      return rules;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(FormBinder, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.rules = this.getRules(this.props);\n\n      if (this.rules.length) {\n        this.context.addValidate(this.props.name, this.rules, _reactDom2.default.findDOMNode(this));\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var nextRules = this.getRules(nextProps);\n\n      if (nextRules.length > 0 && JSON.stringify(nextRules) !== JSON.stringify(this.rules)) {\n        this.rules = nextRules;\n        this.context.addValidate(this.props.name, this.rules, _reactDom2.default.findDOMNode(this));\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.rules = this.getRules(this.props);\n\n      if (this.rules.length) {\n        this.context.removeValidate(this.props.name);\n      }\n    }\n    /**\n     * 从 FormBinder 收集表单的校验规则\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this,\n          _React$cloneElement;\n\n      var FormItem = _react2.default.Children.only(this.props.children);\n\n      var FormItemProps = FormItem.props;\n      var name = this.props.name; // 提供受控属性 value 或其它与 valuePropName 的值同名的属性，如 Switch 的是 'checked'\n\n      var valuePropName = this.props.valuePropName || 'value'; // 自定义验证触发时机\n\n      var validateTriggerType = this.props.triggerType || 'onChange'; // 设置单个表单域的值\n\n      var setFieldValue = this.props.setFieldValue || defaultSetFieldValue; // 获取单个表单域的值\n\n      var getFieldValue = this.props.getFieldValue || defaultGetFieldValue;\n\n      var NewFormItem = _react2.default.cloneElement(FormItem, (_React$cloneElement = {}, _defineProperty(_React$cloneElement, valuePropName, function () {\n        var value = _this2.context.getter(name);\n\n        return setFieldValue(value);\n      }()), _defineProperty(_React$cloneElement, validateTriggerType, function () {\n        if (_this2.rules.length > 0) {\n          _this2.context.validate(name, _this2.rules);\n        }\n      }), _defineProperty(_React$cloneElement, 'onChange', function onChange() {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        if (FormItemProps.onChange) {\n          FormItemProps.onChange.apply(_this2, args);\n        }\n\n        var newValue = getFieldValue.apply(undefined, args);\n\n        _this2.context.setter(name, newValue);\n\n        if (validateTriggerType === 'onChange' && _this2.rules.length > 0) {\n          _this2.context.validate(name, _this2.rules);\n        }\n      }), _React$cloneElement));\n\n      return NewFormItem;\n    }\n  }]);\n\n  return FormBinder;\n}(_react.Component), _class.displayName = 'FormBinder', _class.propTypes = {\n  /**\n   * 当前表单绑定的数据层级\n   */\n  name: _propTypes2.default.string,\n\n  /**\n   * 数据格式化方法，表单组件 onChange 之后，支持对数据做一层转换再进行后续操作\n   */\n  setFieldValue: _propTypes2.default.func,\n\n  /**\n   * 数据转换方法，表单组件接收值时可将其转换为其他类型\n   */\n  getFieldValue: _propTypes2.default.func,\n\n  /**\n   * 触发校验的事件，对于高频触发校验的 Input 可以设置为 'onBlur' 减少校验调用次数\n   */\n  triggerType: _propTypes2.default.string,\n\n  /**\n   * value 属性的 key, 默认 `value`\n   */\n  valuePropName: _propTypes2.default.string,\n\n  /**\n   * 当前表单项是否必须有值\n   */\n  required: _propTypes2.default.bool,\n\n  /**\n   * 当前表单值正则表单校验\n   */\n  pattern: _propTypes2.default.object,\n\n  /**\n   * 当前表单值最小数（对字符串、数组、数值类型数据有效）\n   */\n  min: _propTypes2.default.number,\n\n  /**\n   * 当前表单值最大数（对字符串、数组、数值类型数据有效）\n   */\n  max: _propTypes2.default.number,\n\n  /**\n   * 当前表单值固定长度（对字符串、数组、数值类型数据有效）\n   */\n  len: _propTypes2.default.number,\n\n  /**\n   * 当前表单值枚举值\n   */\n  enum: _propTypes2.default.array,\n\n  /**\n   * 当前表单值是否允许纯空格（对字符串类型有效）\n   */\n  whitespace: _propTypes2.default.bool,\n\n  /**\n   * 声明当前表单项下层表单数据校验规则\n   */\n  fields: _propTypes2.default.object,\n\n  /**\n   * 当前表单值校验前的自定义数据转换方法\n   */\n  transform: _propTypes2.default.func,\n\n  /**\n   * 当前表单校验规则失败时的提示文案\n   */\n  message: _propTypes2.default.node,\n\n  /**\n   * 自定义表单校验方法，支持异步请求等校验\n   */\n  validator: _propTypes2.default.func,\n\n  /**\n   * 当前表单值的数据类型，支持配置 string、number、boolean、method、regexp、integer、float、array、object、enum、date、url、hex、email\n   */\n  type: _propTypes2.default.string,\n\n  /**\n   * 数组的方式配置当前表单校验规则，用于对一个表单执行多条校验规则\n   */\n  rules: _propTypes2.default.array\n}, _class.defaultProps = {}, _class.contextTypes = {\n  setter: _propTypes2.default.func,\n  getter: _propTypes2.default.func,\n  validate: _propTypes2.default.func,\n  addValidate: _propTypes2.default.func,\n  removeValidate: _propTypes2.default.func,\n  getError: _propTypes2.default.func\n}, _temp2);\nexports.default = FormBinder;","map":null,"metadata":{},"sourceType":"script"}