{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Overlay from '../overlay';\nimport zhCN from '../locale/zh-cn';\nimport { focus, obj, func, events, dom } from '../util';\nimport Inner from './inner';\n\nvar noop = function noop() {};\n\nvar limitTabRange = focus.limitTabRange;\nvar bindCtx = func.bindCtx;\nvar pickOthers = obj.pickOthers;\nvar getStyle = dom.getStyle,\n    setStyle = dom.setStyle;\n/**\n * Dialog\n */\n\nvar Dialog = (_temp = _class = function (_Component) {\n  _inherits(Dialog, _Component);\n\n  function Dialog(props, context) {\n    _classCallCheck(this, Dialog);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    bindCtx(_this, ['onKeyDown', 'beforePosition', 'adjustPosition', 'getOverlayRef']);\n    return _this;\n  }\n\n  Dialog.prototype.componentDidMount = function componentDidMount() {\n    events.on(document, 'keydown', this.onKeyDown);\n\n    if (!this.useCSSToPosition()) {\n      this.adjustPosition();\n    }\n  };\n\n  Dialog.prototype.componentWillUnmount = function componentWillUnmount() {\n    events.off(document, 'keydown', this.onKeyDown);\n  };\n\n  Dialog.prototype.useCSSToPosition = function useCSSToPosition() {\n    var _props = this.props,\n        align = _props.align,\n        isFullScreen = _props.isFullScreen;\n    return align === 'cc cc' && isFullScreen;\n  };\n\n  Dialog.prototype.onKeyDown = function onKeyDown(e) {\n    var node = this.getInnerNode();\n\n    if (node) {\n      limitTabRange(node, e);\n    }\n  };\n\n  Dialog.prototype.beforePosition = function beforePosition() {\n    if (this.props.visible && this.overlay) {\n      var inner = this.getInner();\n\n      if (inner) {\n        var node = this.getInnerNode();\n\n        if (this._lastDialogHeight !== getStyle(node, 'height')) {\n          this.revertSize(inner.bodyNode);\n        }\n      }\n    }\n  };\n\n  Dialog.prototype.adjustPosition = function adjustPosition() {\n    if (this.props.visible && this.overlay) {\n      var inner = this.getInner();\n\n      if (inner) {\n        var node = this.getInnerNode();\n        var top = getStyle(node, 'top');\n        var minMargin = this.props.minMargin;\n\n        if (top < minMargin) {\n          top = minMargin;\n          setStyle(node, 'top', minMargin + 'px');\n        }\n\n        var height = getStyle(node, 'height');\n        var viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n\n        if (viewportHeight < height + top * 2) {\n          var expectHeight = viewportHeight - top * 2;\n          this.adjustSize(inner, node, expectHeight);\n        } else {\n          this.revertSize(inner.bodyNode);\n        }\n\n        this._lastDialogHeight = height;\n      }\n    }\n  };\n\n  Dialog.prototype.adjustSize = function adjustSize(inner, node, expectHeight) {\n    var headerNode = inner.headerNode,\n        bodyNode = inner.bodyNode,\n        footerNode = inner.footerNode;\n    var headerHeight = headerNode ? getStyle(headerNode, 'height') : 0;\n    var footerHeight = footerNode ? getStyle(footerNode, 'height') : 0;\n    var padding = getStyle(node, 'padding-top') + getStyle(node, 'padding-bottom');\n    var maxBodyHeight = expectHeight - headerHeight - footerHeight - padding;\n\n    if (maxBodyHeight < 0) {\n      maxBodyHeight = 1;\n    }\n\n    this.dialogBodyStyleMaxHeight = bodyNode.style.maxHeight;\n    this.dialogBodyStyleOverflowY = bodyNode.style.overflowY;\n    setStyle(bodyNode, {\n      'max-height': maxBodyHeight + 'px',\n      'overflow-y': 'auto'\n    });\n  };\n\n  Dialog.prototype.revertSize = function revertSize(bodyNode) {\n    setStyle(bodyNode, {\n      'max-height': this.dialogBodyStyleMaxHeight,\n      'overflow-y': this.dialogBodyStyleOverflowY\n    });\n  };\n\n  Dialog.prototype.mapcloseableToConfig = function mapcloseableToConfig(closeable) {\n    return ['esc', 'close', 'mask'].reduce(function (ret, option) {\n      var key = option.charAt(0).toUpperCase() + option.substr(1);\n      var value = typeof closeable === 'boolean' ? closeable : closeable.split(',').indexOf(option) > -1;\n\n      if (option === 'esc' || option === 'mask') {\n        ret['canCloseBy' + key] = value;\n      } else {\n        ret['canCloseBy' + key + 'Click'] = value;\n      }\n\n      return ret;\n    }, {});\n  };\n\n  Dialog.prototype.getOverlayRef = function getOverlayRef(ref) {\n    this.overlay = ref;\n  };\n\n  Dialog.prototype.getInner = function getInner() {\n    return this.overlay.getInstance().getContent();\n  };\n\n  Dialog.prototype.getInnerNode = function getInnerNode() {\n    return this.overlay.getInstance().getContentNode();\n  };\n\n  Dialog.prototype.renderInner = function renderInner(closeable) {\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        className = _props2.className,\n        title = _props2.title,\n        children = _props2.children,\n        footer = _props2.footer,\n        footerAlign = _props2.footerAlign,\n        footerActions = _props2.footerActions,\n        onOk = _props2.onOk,\n        onCancel = _props2.onCancel,\n        okProps = _props2.okProps,\n        cancelProps = _props2.cancelProps,\n        onClose = _props2.onClose,\n        locale = _props2.locale,\n        visible = _props2.visible,\n        rtl = _props2.rtl;\n    var others = pickOthers(Object.keys(Dialog.propTypes), this.props);\n    return React.createElement(Inner, _extends({\n      prefix: prefix,\n      className: className,\n      title: title,\n      footer: footer,\n      footerAlign: footerAlign,\n      footerActions: footerActions,\n      onOk: visible ? onOk : noop,\n      onCancel: visible ? onCancel : noop,\n      okProps: okProps,\n      cancelProps: cancelProps,\n      locale: locale,\n      closeable: closeable,\n      rtl: rtl,\n      onClose: onClose.bind(this, 'closeClick')\n    }, others), children);\n  };\n\n  Dialog.prototype.render = function render() {\n    var _props3 = this.props,\n        prefix = _props3.prefix,\n        visible = _props3.visible,\n        hasMask = _props3.hasMask,\n        animation = _props3.animation,\n        autoFocus = _props3.autoFocus,\n        closeable = _props3.closeable,\n        onClose = _props3.onClose,\n        afterClose = _props3.afterClose,\n        shouldUpdatePosition = _props3.shouldUpdatePosition,\n        align = _props3.align,\n        overlayProps = _props3.overlayProps,\n        rtl = _props3.rtl;\n    var useCSS = this.useCSSToPosition();\n\n    var _mapcloseableToConfig = this.mapcloseableToConfig(closeable),\n        canCloseByCloseClick = _mapcloseableToConfig.canCloseByCloseClick,\n        closeConfig = _objectWithoutProperties(_mapcloseableToConfig, ['canCloseByCloseClick']);\n\n    var newOverlayProps = _extends({}, overlayProps, {\n      prefix: prefix,\n      visible: visible,\n      animation: animation,\n      hasMask: hasMask,\n      autoFocus: autoFocus,\n      afterClose: afterClose\n    }, closeConfig, {\n      canCloseByOutSideClick: false,\n      align: useCSS ? false : align,\n      onRequestClose: onClose,\n      needAdjust: false,\n      disableScroll: true,\n      ref: this.getOverlayRef,\n      rtl: rtl\n    });\n\n    if (!useCSS) {\n      newOverlayProps.beforePosition = this.beforePosition;\n      newOverlayProps.onPosition = this.adjustPosition;\n      newOverlayProps.shouldUpdatePosition = shouldUpdatePosition;\n    }\n\n    var inner = this.renderInner(canCloseByCloseClick);\n    return React.createElement(Overlay, newOverlayProps, useCSS ? React.createElement('div', {\n      className: prefix + 'dialog-container',\n      dir: rtl ? 'rtl' : undefined\n    }, inner) : inner);\n  };\n\n  return Dialog;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  pure: PropTypes.bool,\n  rtl: PropTypes.bool,\n  className: PropTypes.string,\n\n  /**\n   * 是否显示\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 标题\n   */\n  title: PropTypes.node,\n\n  /**\n   * 内容\n   */\n  children: PropTypes.node,\n\n  /**\n   * 底部内容，设置为 false，则不进行显示\n   * @default [<Button type=\"primary\">确定</Button>, <Button>取消</Button>]\n   */\n  footer: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n\n  /**\n   * 底部按钮的对齐方式\n   */\n  footerAlign: PropTypes.oneOf(['left', 'center', 'right']),\n\n  /**\n   * 指定确定按钮和取消按钮是否存在以及如何排列,<br><br>**可选值**：\n   * ['ok', 'cancel']（确认取消按钮同时存在，确认按钮在左）\n   * ['cancel', 'ok']（确认取消按钮同时存在，确认按钮在右）\n   * ['ok']（只存在确认按钮）\n   * ['cancel']（只存在取消按钮）\n   */\n  footerActions: PropTypes.array,\n\n  /**\n   * 在点击确定按钮时触发的回调函数\n   * @param {Object} event 点击事件对象\n   */\n  onOk: PropTypes.func,\n\n  /**\n   * 在点击取消按钮时触发的回调函数\n   * @param {Object} event 点击事件对象\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * 应用于确定按钮的属性对象\n   */\n  okProps: PropTypes.object,\n\n  /**\n   * 应用于取消按钮的属性对象\n   */\n  cancelProps: PropTypes.object,\n\n  /**\n   * 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：\n   * **close** 表示点击关闭按钮可以关闭对话框\n   * **mask** 表示点击遮罩区域可以关闭对话框\n   * **esc** 表示按下 esc 键可以关闭对话框\n   * 如 'close' 或 'close,esc,mask'\n   * 如果设置为 true，则以上关闭方式全部生效\n   * 如果设置为 false，则以上关闭方式全部失效\n   */\n  closeable: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /**\n   * 对话框关闭时触发的回调函数\n   * @param {String} trigger 关闭触发行为的描述字符串\n   * @param {Object} event 关闭时事件对象\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * 对话框关闭后触发的回调函数, 如果有动画，则在动画结束后触发\n   */\n  afterClose: PropTypes.func,\n\n  /**\n   * 是否显示遮罩\n   */\n  hasMask: PropTypes.bool,\n\n  /**\n   * 显示隐藏时动画的播放方式\n   * @property {String} in 进场动画\n   * @property {String} out 出场动画\n   */\n  animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n\n  /**\n   * 对话框弹出时是否自动获得焦点\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * 对话框对齐方式, 具体见Overlay文档\n   */\n  align: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /**\n   * 当对话框高度超过浏览器视口高度时，是否显示所有内容而不是出现滚动条以保证对话框完整显示在浏览器视口内，该属性仅在对话框垂直水平居中时生效，即 align 被设置为 'cc cc' 时\n   */\n  isFullScreen: PropTypes.bool,\n\n  /**\n   * 是否在对话框重新渲染时及时更新对话框位置，一般用于对话框高度变化后依然能保证原来的对齐方式\n   */\n  shouldUpdatePosition: PropTypes.bool,\n\n  /**\n   * 对话框距离浏览器顶部和底部的最小间距，align 被设置为 'cc cc' 并且 isFullScreen 被设置为 true 时不生效\n   */\n  minMargin: PropTypes.number,\n\n  /**\n   * 透传到弹层组件的属性对象\n   */\n  overlayProps: PropTypes.object,\n\n  /**\n   * 自定义国际化文案对象\n   * @property {String} ok 确认按钮文案\n   * @property {String} cancel 取消按钮文案\n   */\n  locale: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  pure: false,\n  visible: false,\n  footerAlign: 'right',\n  footerActions: ['ok', 'cancel'],\n  onOk: noop,\n  onCancel: noop,\n  okProps: {},\n  cancelProps: {},\n  closeable: 'esc,close',\n  onClose: noop,\n  afterClose: noop,\n  hasMask: true,\n  animation: {\n    in: 'fadeInDown',\n    out: 'fadeOutUp'\n  },\n  autoFocus: false,\n  align: 'cc cc',\n  isFullScreen: false,\n  shouldUpdatePosition: false,\n  minMargin: 40,\n  overlayProps: {},\n  locale: zhCN.Dialog\n}, _temp);\nDialog.displayName = 'Dialog';\nexport { Dialog as default };","map":null,"metadata":{},"sourceType":"module"}