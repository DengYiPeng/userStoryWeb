{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ConfigProvider from '../config-provider';\nimport Icon from '../icon';\nimport Button from '../button';\nimport Input from '../input';\nimport Select from '../select';\nimport { KEYCODE } from '../util';\nimport zhCN from '../locale/zh-cn.js';\nvar Option = Select.Option;\n\nvar noop = function noop() {};\n/**\n * Pagination\n */\n\n\nvar Pagination = (_temp = _class = function (_Component) {\n  _inherits(Pagination, _Component);\n\n  function Pagination(props, context) {\n    _classCallCheck(this, Pagination);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    var current = props.current,\n        defaultCurrent = props.defaultCurrent,\n        total = props.total,\n        pageSize = props.pageSize;\n    _this.state = {\n      current: _this.correctCurrent(current || defaultCurrent, total, pageSize),\n      currentPageSize: pageSize\n    };\n    _this.onJump = _this.onJump.bind(_this);\n    return _this;\n  }\n\n  Pagination.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var current = nextProps.current,\n        total = nextProps.total,\n        pageSize = nextProps.pageSize;\n    var st = {};\n    var newCurrent = this.correctCurrent(current || this.state.current, total, pageSize);\n\n    if (this.state.current !== newCurrent) {\n      st.current = newCurrent;\n    }\n\n    if (this.state.currentPageSize !== pageSize) {\n      st.currentPageSize = pageSize;\n    }\n\n    if (Object.keys(st).length) {\n      this.setState(st);\n    }\n  };\n\n  Pagination.prototype.correctCurrent = function correctCurrent(currentPage, total, currentPageSize) {\n    var totalPage = this.getTotalPage(total, currentPageSize);\n    return currentPage > totalPage ? totalPage : currentPage;\n  };\n\n  Pagination.prototype.getTotalPage = function getTotalPage(total, currentPageSize) {\n    var totalPage = Math.ceil(total / currentPageSize);\n    return totalPage <= 0 ? 1 : totalPage;\n  };\n\n  Pagination.prototype.onJump = function onJump(e) {\n    var total = this.props.total;\n    var _state = this.state,\n        current = _state.current,\n        currentPageSize = _state.currentPageSize;\n    var totalPage = this.getTotalPage(total, currentPageSize);\n    var value = parseInt(this.inputValue, 10);\n\n    if (typeof value === 'number' && value >= 1 && value <= totalPage && value !== current) {\n      this.onPageItemClick(value, e);\n    }\n  };\n\n  Pagination.prototype.onPageItemClick = function onPageItemClick(page, e) {\n    var _this2 = this;\n\n    if (!('current' in this.props)) {\n      this.setState({\n        current: page\n      }, function () {\n        _this2.props.onChange(page, e);\n      });\n    } else {\n      this.props.onChange(page, e);\n    }\n  };\n\n  Pagination.prototype.onInputChange = function onInputChange(value) {\n    this.inputValue = value;\n  };\n\n  Pagination.prototype.onSelectSize = function onSelectSize(pageSize) {\n    var newState = {\n      currentPageSize: pageSize\n    };\n    var totalPage = this.getTotalPage(this.props.total, pageSize);\n\n    if (this.state.current > totalPage) {\n      newState.current = totalPage;\n    }\n\n    this.setState(newState);\n    this.props.onPageSizeChange(pageSize);\n  };\n\n  Pagination.prototype.renderPageTotal = function renderPageTotal() {\n    var _props = this.props,\n        prefix = _props.prefix,\n        total = _props.total,\n        totalRender = _props.totalRender;\n    var _state2 = this.state,\n        currentPageSize = _state2.currentPageSize,\n        current = _state2.current;\n    var range = [(current - 1) * currentPageSize + 1, current * currentPageSize];\n    return React.createElement('div', {\n      className: prefix + 'pagination-total'\n    }, totalRender(total, range));\n  };\n\n  Pagination.prototype.renderPageItem = function renderPageItem(index) {\n    var _cx;\n\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        size = _props2.size,\n        link = _props2.link,\n        pageNumberRender = _props2.pageNumberRender;\n    var current = this.state.current;\n    var isCurrent = parseInt(index, 10) === current;\n    var props = {\n      size: size,\n      className: cx((_cx = {}, _cx[prefix + 'pagination-item'] = true, _cx[prefix + 'current'] = isCurrent, _cx)),\n      onClick: isCurrent ? noop : this.onPageItemClick.bind(this, index)\n    };\n\n    if (link) {\n      props.component = 'a';\n      props.href = link.replace('{page}', index);\n    }\n\n    return React.createElement(Button, _extends({}, props, {\n      key: index\n    }), pageNumberRender(index));\n  };\n\n  Pagination.prototype.renderPageFirst = function renderPageFirst(current) {\n    var _cx2;\n\n    var _props3 = this.props,\n        prefix = _props3.prefix,\n        size = _props3.size,\n        shape = _props3.shape,\n        locale = _props3.locale;\n    var isFirst = current <= 1;\n    var props = {\n      disabled: isFirst,\n      size: size,\n      className: cx((_cx2 = {}, _cx2[prefix + 'pagination-item'] = true, _cx2[prefix + 'prev'] = true, _cx2)),\n      onClick: this.onPageItemClick.bind(this, current - 1)\n    };\n    var icon = React.createElement(Icon, {\n      type: 'arrow-left'\n    });\n    return React.createElement(Button, props, icon, shape === 'arrow-only' || shape === 'arrow-prev-only' || shape === 'no-border' ? '' : locale.prev);\n  };\n\n  Pagination.prototype.renderPageLast = function renderPageLast(current, totalPage) {\n    var _cx3;\n\n    var _props4 = this.props,\n        prefix = _props4.prefix,\n        size = _props4.size,\n        shape = _props4.shape,\n        locale = _props4.locale;\n    var isLast = current >= totalPage;\n    var props = {\n      disabled: isLast,\n      size: size,\n      className: cx((_cx3 = {}, _cx3[prefix + 'pagination-item'] = true, _cx3[prefix + 'next'] = true, _cx3)),\n      onClick: this.onPageItemClick.bind(this, current + 1)\n    };\n    var icon = React.createElement(Icon, {\n      type: 'arrow-right'\n    });\n    return React.createElement(Button, props, shape === 'arrow-only' || shape === 'no-border' ? '' : locale.next, icon);\n  };\n\n  Pagination.prototype.renderPageEllipsis = function renderPageEllipsis(idx) {\n    var prefix = this.props.prefix;\n    return React.createElement(Icon, {\n      className: prefix + 'pagination-ellipsis',\n      type: 'ellipsis',\n      key: 'ellipsis-' + idx\n    });\n  };\n\n  Pagination.prototype.renderPageJump = function renderPageJump() {\n    var _this3 = this;\n\n    var _props5 = this.props,\n        prefix = _props5.prefix,\n        size = _props5.size,\n        locale = _props5.locale;\n    /* eslint-disable react/jsx-key */\n\n    return [React.createElement('span', {\n      className: prefix + 'pagination-jump-text'\n    }, locale.goTo), React.createElement(Input, {\n      className: prefix + 'pagination-jump-input',\n      type: 'text',\n      size: size,\n      onChange: this.onInputChange.bind(this),\n      onKeyDown: function onKeyDown(e) {\n        if (e.keyCode === KEYCODE.ENTER) {\n          _this3.onJump(e);\n        }\n      }\n    }), React.createElement('span', {\n      className: prefix + 'pagination-jump-text'\n    }, locale.page), React.createElement(Button, {\n      className: prefix + 'pagination-jump-go',\n      size: size,\n      onClick: this.onJump\n    }, locale.go)];\n    /* eslint-enable react/jsx-key */\n  };\n\n  Pagination.prototype.renderPageDisplay = function renderPageDisplay(current, totalPage) {\n    var _props6 = this.props,\n        prefix = _props6.prefix,\n        pageNumberRender = _props6.pageNumberRender;\n    return React.createElement('span', {\n      className: prefix + 'pagination-display'\n    }, React.createElement('em', null, pageNumberRender(current)), '/', pageNumberRender(totalPage));\n  };\n\n  Pagination.prototype.renderPageList = function renderPageList(current, totalPage) {\n    var _props7 = this.props,\n        prefix = _props7.prefix,\n        pageShowCount = _props7.pageShowCount;\n    var pages = [];\n\n    if (totalPage <= pageShowCount) {\n      for (var i = 1; i <= totalPage; i++) {\n        pages.push(this.renderPageItem(i));\n      }\n    } else {\n      // 除去第一页，最后一页以及当前页，剩下的页数\n      var othersCount = pageShowCount - 3;\n      var halfCount = parseInt(othersCount / 2, 10);\n      var start = void 0,\n          end = void 0;\n      pages.push(this.renderPageItem(1));\n      start = current - halfCount;\n      end = current + halfCount;\n\n      if (start <= 1) {\n        start = 2;\n        end = start + othersCount;\n      }\n\n      if (start > 2) {\n        pages.push(this.renderPageEllipsis(1));\n      }\n\n      if (end >= totalPage - 1) {\n        end = totalPage - 1;\n        start = totalPage - 1 - othersCount;\n      }\n\n      for (var j = start; j <= end; j++) {\n        pages.push(this.renderPageItem(j));\n      }\n\n      if (end < totalPage - 1) {\n        pages.push(this.renderPageEllipsis(2));\n      }\n\n      pages.push(this.renderPageItem(totalPage));\n    }\n\n    return React.createElement('div', {\n      className: prefix + 'pagination-list'\n    }, pages);\n  };\n\n  Pagination.prototype.renderPageSizeSelector = function renderPageSizeSelector() {\n    var _props8 = this.props,\n        prefix = _props8.prefix,\n        pageSizeSelector = _props8.pageSizeSelector,\n        locale = _props8.locale;\n    var pageSizeSpan = React.createElement('span', {\n      className: prefix + 'pagination-size-selector-title'\n    }, locale.pageSize);\n\n    switch (pageSizeSelector) {\n      case 'filter':\n        return React.createElement('div', {\n          className: prefix + 'pagination-size-selector'\n        }, pageSizeSpan, this.renderPageSizeFilter());\n\n      case 'dropdown':\n        return React.createElement('div', {\n          className: prefix + 'pagination-size-selector'\n        }, pageSizeSpan, this.renderPageSizeDropdown());\n\n      default:\n        return null;\n    }\n  };\n\n  Pagination.prototype.renderPageSizeFilter = function renderPageSizeFilter() {\n    var _this4 = this;\n\n    var _props9 = this.props,\n        prefix = _props9.prefix,\n        size = _props9.size,\n        pageSizeList = _props9.pageSizeList;\n    var currentPageSize = this.state.currentPageSize;\n    return React.createElement('div', {\n      className: prefix + 'pagination-size-selector-filter'\n    }, pageSizeList.map(function (item, index) {\n      var _cx4;\n\n      var label = void 0;\n      var pageSize = void 0;\n\n      if (item.value) {\n        // {label: '', value: 5}\n        label = item.label;\n        pageSize = item.value;\n      } else {\n        // number\n        label = pageSize = item;\n      }\n\n      var classes = cx((_cx4 = {}, _cx4[prefix + 'pagination-size-selector-btn'] = true, _cx4[prefix + 'current'] = pageSize === currentPageSize, _cx4));\n      return React.createElement(Button, {\n        key: index,\n        text: true,\n        size: size,\n        className: classes,\n        onClick: pageSize !== currentPageSize ? _this4.onSelectSize.bind(_this4, pageSize) : null\n      }, label);\n    }));\n  };\n\n  Pagination.prototype.renderPageSizeDropdown = function renderPageSizeDropdown() {\n    var _props10 = this.props,\n        prefix = _props10.prefix,\n        size = _props10.size,\n        pageSizeList = _props10.pageSizeList;\n    var currentPageSize = this.state.currentPageSize;\n    return React.createElement(Select, {\n      className: prefix + 'pagination-size-selector-dropdown',\n      popupClassName: prefix + 'pagination-size-selector-popup',\n      popupContainer: function popupContainer(node) {\n        return node.parentNode;\n      },\n      autoWidth: true,\n      size: size,\n      value: currentPageSize,\n      onChange: this.onSelectSize.bind(this)\n    }, pageSizeList.map(function (item, index) {\n      var label = void 0;\n      var pageSize = void 0;\n\n      if (item.value) {\n        // {label: '', value: 5}\n        label = item.label;\n        pageSize = item.value;\n      } else {\n        // number\n        label = pageSize = item;\n      }\n\n      return React.createElement(Option, {\n        key: index,\n        value: pageSize\n      }, label);\n    }));\n  };\n\n  Pagination.prototype.render = function render() {\n    var _cx5,\n        _this5 = this;\n    /* eslint-disable no-unused-vars */\n\n\n    var _props11 = this.props,\n        prefix = _props11.prefix,\n        pure = _props11.pure,\n        rtl = _props11.rtl,\n        type = _props11.type,\n        size = _props11.size,\n        shape = _props11.shape,\n        className = _props11.className,\n        total = _props11.total,\n        totalRender = _props11.totalRender,\n        pageSize = _props11.pageSize,\n        pageSizeSelector = _props11.pageSizeSelector,\n        pageSizeList = _props11.pageSizeList,\n        pageSizePosition = _props11.pageSizePosition,\n        useFloatLayout = _props11.useFloatLayout,\n        onPageSizeChange = _props11.onPageSizeChange,\n        hideOnlyOnePage = _props11.hideOnlyOnePage,\n        showJump = _props11.showJump,\n        locale = _props11.locale,\n        current = _props11.current,\n        defaultCurrent = _props11.defaultCurrent,\n        pageShowCount = _props11.pageShowCount,\n        pageNumberRender = _props11.pageNumberRender,\n        link = _props11.link,\n        onChange = _props11.onChange,\n        others = _objectWithoutProperties(_props11, ['prefix', 'pure', 'rtl', 'type', 'size', 'shape', 'className', 'total', 'totalRender', 'pageSize', 'pageSizeSelector', 'pageSizeList', 'pageSizePosition', 'useFloatLayout', 'onPageSizeChange', 'hideOnlyOnePage', 'showJump', 'locale', 'current', 'defaultCurrent', 'pageShowCount', 'pageNumberRender', 'link', 'onChange']);\n    /* eslint-enable */\n\n\n    var _state3 = this.state,\n        currentPage = _state3.current,\n        currentPageSize = _state3.currentPageSize;\n    var totalPage = this.getTotalPage(total, currentPageSize);\n    var pageFirst = this.renderPageFirst(currentPage);\n    var pageLast = this.renderPageLast(currentPage, totalPage);\n    var sizeSelector = this.renderPageSizeSelector();\n    var isStart = pageSizePosition === 'start';\n    var classes = cx((_cx5 = {}, _cx5[prefix + 'pagination'] = true, _cx5['' + prefix + size] = size, _cx5['' + prefix + type] = type, _cx5['' + prefix + shape] = shape, _cx5[prefix + 'start'] = !!pageSizeSelector && isStart && useFloatLayout, _cx5[prefix + 'end'] = !!pageSizeSelector && !isStart && useFloatLayout, _cx5[prefix + 'hide'] = totalPage <= 1 && hideOnlyOnePage, _cx5[className] = !!className, _cx5));\n\n    if (rtl) {\n      others.dir = 'rtl';\n    }\n\n    var buildComponent = function buildComponent() {\n      for (var _len = arguments.length, coms = Array(_len), _key = 0; _key < _len; _key++) {\n        coms[_key] = arguments[_key];\n      }\n\n      return React.createElement('div', _extends({\n        className: classes\n      }, others), isStart && sizeSelector, totalRender ? _this5.renderPageTotal() : null, React.createElement('div', {\n        className: prefix + 'pagination-pages'\n      }, coms.map(function (com, index) {\n        return com && React.cloneElement(com, {\n          key: index\n        });\n      })), !isStart && sizeSelector);\n    };\n\n    switch (type) {\n      case 'mini':\n        return buildComponent(pageFirst, pageLast);\n\n      case 'simple':\n        {\n          var pageDisplay = this.renderPageDisplay(currentPage, totalPage);\n          return buildComponent(pageFirst, pageDisplay, pageLast);\n        }\n\n      case 'normal':\n        {\n          var pageList = this.renderPageList(currentPage, totalPage);\n\n          var _pageDisplay = showJump && total > pageSize * pageShowCount ? this.renderPageDisplay(currentPage, totalPage) : null;\n\n          var pageJump = showJump && total > pageSize * pageShowCount ? this.renderPageJump(currentPage, totalPage) : null;\n          return buildComponent.apply(undefined, [pageFirst, pageList, pageLast, _pageDisplay].concat(pageJump));\n        }\n\n      default:\n        return null;\n    }\n  };\n\n  return Pagination;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  pure: PropTypes.bool,\n  rtl: PropTypes.bool,\n  className: PropTypes.string,\n\n  /**\n   * 自定义国际化文案对象\n   */\n  locale: PropTypes.object,\n\n  /**\n   * 分页组件类型\n   */\n  type: PropTypes.oneOf(['normal', 'simple', 'mini']),\n\n  /**\n   * 前进后退按钮样式\n   */\n  shape: PropTypes.oneOf(['normal', 'arrow-only', 'arrow-prev-only', 'no-border']),\n\n  /**\n   * 分页组件大小\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * （受控）当前页码\n   */\n  current: PropTypes.number,\n\n  /**\n   * （非受控）初始页码\n   */\n  defaultCurrent: PropTypes.number,\n\n  /**\n   * 页码发生改变时的回调函数\n   * @param {Number} current 改变后的页码数\n   * @param {Object} e 点击事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 总记录数\n   */\n  total: PropTypes.number,\n\n  /**\n   * 总数的渲染函数\n   * @param {Number} total 总数\n   * @param {Array} range 当前数据在总数中的区间\n   */\n  totalRender: PropTypes.func,\n\n  /**\n   * 页码显示的数量，更多的使用...代替\n   */\n  pageShowCount: PropTypes.number,\n\n  /**\n   * 一页中的记录数\n   */\n  pageSize: PropTypes.number,\n\n  /**\n   * 每页显示选择器类型\n   */\n  pageSizeSelector: PropTypes.oneOf([false, 'filter', 'dropdown']),\n\n  /**\n   * 每页显示选择器可选值\n   */\n  pageSizeList: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.number\n  }))]),\n\n  /**\n   * 自定义页码渲染函数，函数作用于页码button以及当前页/总页数的数字渲染\n   * @param {Number} index 分页的页码，从1开始\n   * @return {ReactNode} 返回渲染结果\n  */\n  pageNumberRender: PropTypes.func,\n\n  /**\n   * 每页显示选择器在组件中的位置\n   */\n  pageSizePosition: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * 存在每页显示选择器时是否使用浮动布局\n   */\n  useFloatLayout: PropTypes.bool,\n\n  /**\n   * 每页显示记录数量改变时的回调函数\n   * @param {Number} pageSize 改变后的每页显示记录数\n   */\n  onPageSizeChange: PropTypes.func,\n\n  /**\n   * 当分页数为1时，是否隐藏分页器\n   */\n  hideOnlyOnePage: PropTypes.bool,\n\n  /**\n   * type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域\n   */\n  showJump: PropTypes.bool,\n\n  /**\n   * 设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page}\n   */\n  link: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  pure: false,\n  rtl: false,\n  locale: zhCN.Pagination,\n  type: 'normal',\n  shape: 'normal',\n  size: 'medium',\n  defaultCurrent: 1,\n  onChange: noop,\n  pageSize: 10,\n  pageSizeSelector: false,\n  pageSizeList: [5, 10, 20],\n  pageSizePosition: 'start',\n  onPageSizeChange: noop,\n  useFloatLayout: false,\n  total: 100,\n  pageShowCount: 5,\n  hideOnlyOnePage: false,\n  showJump: true,\n  pageNumberRender: function pageNumberRender(index) {\n    return index;\n  }\n}, _temp);\nPagination.displayName = 'Pagination';\nexport default ConfigProvider.config(Pagination);","map":null,"metadata":{},"sourceType":"module"}