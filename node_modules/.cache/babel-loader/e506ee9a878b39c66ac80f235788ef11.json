{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Menu from '../../menu';\nimport { func, obj, dom } from '../../util';\nvar Item = Menu.Item,\n    CheckboxItem = Menu.CheckboxItem;\nvar bindCtx = func.bindCtx;\nvar pickOthers = obj.pickOthers;\nvar getOffset = dom.getOffset;\nvar TransferItem = (_temp = _class = function (_Component) {\n  _inherits(TransferItem, _Component);\n\n  function TransferItem(props) {\n    _classCallCheck(this, TransferItem);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      highlight: false\n    };\n    bindCtx(_this, ['getItemDOM', 'handleClick', 'handleDragStart', 'handleDragOver', 'handleDragEnd', 'handleDrop']);\n    return _this;\n  }\n\n  TransferItem.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    if (this.props.needHighlight) {\n      this.addHighlightTimer = setTimeout(function () {\n        _this2.setState({\n          highlight: true\n        });\n      }, 1);\n      this.removeHighlightTimer = setTimeout(function () {\n        _this2.setState({\n          highlight: false\n        });\n      }, 201);\n    }\n  };\n\n  TransferItem.prototype.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.addHighlightTimer);\n    clearTimeout(this.removeHighlightTimer);\n  };\n\n  TransferItem.prototype.getItemDOM = function getItemDOM(ref) {\n    this.item = ref;\n  };\n\n  TransferItem.prototype.handleClick = function handleClick() {\n    var _props = this.props,\n        onClick = _props.onClick,\n        panelPosition = _props.panelPosition,\n        item = _props.item;\n    onClick(panelPosition === 'left' ? 'right' : 'left', item.value);\n  };\n\n  TransferItem.prototype.handleDragStart = function handleDragStart() {\n    var _props2 = this.props,\n        onDragStart = _props2.onDragStart,\n        panelPosition = _props2.panelPosition,\n        item = _props2.item;\n    onDragStart(panelPosition, item.value);\n  };\n\n  TransferItem.prototype.getDragGap = function getDragGap(e) {\n    var referenceTop = getOffset(e.currentTarget).top;\n    var referenceHeight = e.currentTarget.offsetHeight;\n    return e.pageY <= referenceTop + referenceHeight / 2 ? 'before' : 'after';\n  };\n\n  TransferItem.prototype.handleDragOver = function handleDragOver(e) {\n    var _props3 = this.props,\n        panelPosition = _props3.panelPosition,\n        dragPosition = _props3.dragPosition,\n        onDragOver = _props3.onDragOver,\n        item = _props3.item;\n\n    if (panelPosition === dragPosition) {\n      e.preventDefault();\n      var dragGap = this.getDragGap(e);\n\n      if (this.dragGap !== dragGap) {\n        this.dragGap = dragGap;\n        onDragOver(item.value);\n      }\n    }\n  };\n\n  TransferItem.prototype.handleDragEnd = function handleDragEnd() {\n    var onDragEnd = this.props.onDragEnd;\n    onDragEnd();\n  };\n\n  TransferItem.prototype.handleDrop = function handleDrop(e) {\n    e.preventDefault();\n    var _props4 = this.props,\n        onDrop = _props4.onDrop,\n        item = _props4.item,\n        panelPosition = _props4.panelPosition,\n        dragValue = _props4.dragValue;\n    onDrop(panelPosition, dragValue, item.value, this.dragGap);\n  };\n\n  TransferItem.prototype.render = function render() {\n    var _cx;\n\n    var _props5 = this.props,\n        prefix = _props5.prefix,\n        mode = _props5.mode,\n        checked = _props5.checked,\n        disabled = _props5.disabled,\n        item = _props5.item,\n        onCheck = _props5.onCheck,\n        itemRender = _props5.itemRender,\n        draggable = _props5.draggable,\n        dragOverValue = _props5.dragOverValue,\n        panelPosition = _props5.panelPosition,\n        dragPosition = _props5.dragPosition;\n    var others = pickOthers(Object.keys(TransferItem.propTypes), this.props);\n    var highlight = this.state.highlight;\n    var isSimple = mode === 'simple';\n    var classNames = cx((_cx = {}, _cx[prefix + 'transfer-panel-item'] = true, _cx[prefix + 'insert-' + this.dragGap] = dragOverValue === item.value && panelPosition === dragPosition, _cx[prefix + 'focused'] = highlight, _cx[prefix + 'simple'] = isSimple, _cx));\n\n    var itemProps = _extends({\n      ref: this.getItemDOM,\n      className: classNames,\n      children: itemRender(item),\n      disabled: disabled,\n      draggable: draggable && !disabled,\n      onDragStart: this.handleDragStart,\n      onDragOver: this.handleDragOver,\n      onDragEnd: this.handleDragEnd,\n      onDrop: this.handleDrop\n    }, others);\n\n    if (isSimple) {\n      if (!itemProps.disabled) {\n        itemProps.onClick = this.handleClick;\n      }\n\n      return React.createElement(Item, itemProps);\n    }\n\n    return React.createElement(CheckboxItem, _extends({\n      checked: checked,\n      onChange: onCheck.bind(this, item.value)\n    }, itemProps));\n  };\n\n  return TransferItem;\n}(Component), _class.menuChildType = CheckboxItem.menuChildType, _class.propTypes = {\n  prefix: PropTypes.string,\n  mode: PropTypes.oneOf(['normal', 'simple']),\n  value: PropTypes.array,\n  disabled: PropTypes.bool,\n  item: PropTypes.object,\n  onCheck: PropTypes.func,\n  onClick: PropTypes.func,\n  needHighlight: PropTypes.bool,\n  itemRender: PropTypes.func,\n  draggable: PropTypes.bool,\n  onDragStart: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDrop: PropTypes.func,\n  dragPosition: PropTypes.oneOf(['left', 'right']),\n  dragValue: PropTypes.string,\n  dragOverValue: PropTypes.string,\n  panelPosition: PropTypes.oneOf(['left', 'right'])\n}, _temp);\nTransferItem.displayName = 'TransferItem';\nexport { TransferItem as default };","map":null,"metadata":{},"sourceType":"module"}