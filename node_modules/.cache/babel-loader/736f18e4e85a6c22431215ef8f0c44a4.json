{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ConfigProvider from '../config-provider';\nimport { func, obj } from '../util';\nimport Panel from './panel';\n/** Collapse */\n\nvar Collapse = (_temp = _class = function (_React$Component) {\n  _inherits(Collapse, _React$Component);\n\n  function Collapse(props) {\n    _classCallCheck(this, Collapse);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    var expandedKeys = void 0;\n\n    if ('expandedKeys' in props) {\n      expandedKeys = props.expandedKeys;\n    } else {\n      expandedKeys = props.defaultExpandedKeys;\n    }\n\n    _this.state = {\n      expandedKeys: typeof expandedKeys === 'undefined' ? [] : expandedKeys\n    };\n    return _this;\n  }\n\n  Collapse.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('expandedKeys' in nextProps) {\n      this.setState({\n        expandedKeys: typeof nextProps.expandedKeys === 'undefined' ? [] : nextProps.expandedKeys\n      });\n    }\n  };\n\n  Collapse.prototype.onItemClick = function onItemClick(key) {\n    var expandedKeys = this.state.expandedKeys;\n\n    if (this.props.accordion) {\n      expandedKeys = expandedKeys[0] === key ? [] : [key];\n    } else {\n      expandedKeys = [].concat(expandedKeys);\n      var index = expandedKeys.indexOf(key);\n      var isExpanded = index > -1;\n\n      if (isExpanded) {\n        expandedKeys.splice(index, 1);\n      } else {\n        expandedKeys.push(key);\n      }\n    }\n\n    this.setExpandedKey(expandedKeys);\n  };\n\n  Collapse.prototype.getProps = function getProps(item, index, key) {\n    var _this2 = this;\n\n    var expandedKeys = this.state.expandedKeys;\n    var title = item.title;\n    var disabled = this.props.disabled;\n\n    if (!disabled) {\n      disabled = item.disabled;\n    }\n\n    var isExpanded = false;\n\n    if (this.props.accordion) {\n      isExpanded = expandedKeys[0] === key;\n    } else {\n      isExpanded = expandedKeys.some(function (expandedKey) {\n        if (expandedKey === null || expandedKey === undefined || key === null || key === undefined) {\n          return false;\n        }\n\n        if (expandedKey === key || expandedKey.toString() === key.toString()) {\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return {\n      key: key,\n      title: title,\n      isExpanded: isExpanded,\n      disabled: disabled,\n      onClick: disabled ? null : function () {\n        _this2.onItemClick(key);\n\n        if ('onClick' in item) {\n          item.onClick(key);\n        }\n      }\n    };\n  };\n\n  Collapse.prototype.getItemsByDataSource = function getItemsByDataSource() {\n    var _this3 = this;\n\n    var props = this.props;\n    var dataSource = props.dataSource; // 是否有dataSource.item传入过key\n\n    var hasKeys = dataSource.some(function (item) {\n      return 'key' in item;\n    });\n    return dataSource.map(function (item, index) {\n      // 传入过key就用item.key 没传入则统一使用index为key\n      var key = hasKeys ? item.key : '' + index;\n      return React.createElement(Panel, _extends({}, _this3.getProps(item, index, key), {\n        key: key\n      }), item.content);\n    });\n  };\n\n  Collapse.prototype.getItemsByChildren = function getItemsByChildren() {\n    var _this4 = this; // 是否有child传入过key\n\n\n    var allKeys = React.Children.map(this.props.children, function (child) {\n      return child.key;\n    });\n    var hasKeys = Boolean(allKeys.length);\n    return React.Children.map(this.props.children, function (child, index) {\n      if (child && typeof child.type === 'function' && child.type.isNextPanel) {\n        // 传入过key就用child.key 没传入则统一使用index为key\n        var key = hasKeys ? child.key : '' + index;\n        return React.cloneElement(child, _this4.getProps(child.props, index, key));\n      } else {\n        return child;\n      }\n    });\n  };\n\n  Collapse.prototype.setExpandedKey = function setExpandedKey(expandedKeys) {\n    if (!('expandedKeys' in this.props)) {\n      this.setState({\n        expandedKeys: expandedKeys\n      });\n    }\n\n    this.props.onExpand(this.props.accordion ? expandedKeys[0] : expandedKeys);\n  };\n\n  Collapse.prototype.render = function render() {\n    var _classNames;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        className = _props.className,\n        style = _props.style,\n        disabled = _props.disabled,\n        dataSource = _props.dataSource;\n    var collapseClassName = classNames((_classNames = {}, _classNames[prefix + 'collapse'] = true, _classNames[prefix + 'collapse-disabled'] = disabled, _classNames[className] = Boolean(className), _classNames));\n    var others = obj.pickOthers(Collapse.propTypes, this.props);\n    return React.createElement('div', _extends({\n      className: collapseClassName,\n      style: style\n    }, others), dataSource ? this.getItemsByDataSource() : this.getItemsByChildren());\n  };\n\n  return Collapse;\n}(React.Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 组件接受行内样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 使用数据模型构建\n   */\n  dataSource: PropTypes.array,\n\n  /**\n   * 默认展开keys\n   */\n  defaultExpandedKeys: PropTypes.array,\n\n  /**\n   * 受控展开keys\n   */\n  expandedKeys: PropTypes.array,\n\n  /**\n   * 展开状态发升变化时候的回调\n   */\n  onExpand: PropTypes.func,\n\n  /**\n   * 所有禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 扩展class\n   */\n  className: PropTypes.string,\n\n  /**\n   * 手风琴模式，一次只能打开一个\n   */\n  accordion: PropTypes.bool,\n  children: PropTypes.node\n}, _class.defaultProps = {\n  accordion: false,\n  prefix: 'next-',\n  onExpand: func.noop\n}, _class.contextTypes = {\n  prefix: PropTypes.string\n}, _temp);\nCollapse.displayName = 'Collapse';\nexport default ConfigProvider.config(Collapse);","map":null,"metadata":{},"sourceType":"module"}