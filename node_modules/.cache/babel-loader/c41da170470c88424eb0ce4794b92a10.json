{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from '../../icon';\nimport Checkbox from '../../checkbox';\nimport Animate from '../../animate';\nimport { func, obj, KEYCODE } from '../../util';\nimport TreeNodeInput from './tree-node-input';\nvar Expand = Animate.Expand;\nvar bindCtx = func.bindCtx;\nvar isPromise = obj.isPromise,\n    pickOthers = obj.pickOthers;\n\nvar isRoot = function isRoot(pos) {\n  return /^0-(\\d)+$/.test(pos);\n};\n/**\n * Tree.Node\n */\n\n\nvar TreeNode = (_temp = _class = function (_Component) {\n  _inherits(TreeNode, _Component);\n\n  function TreeNode(props) {\n    _classCallCheck(this, TreeNode);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      editing: false,\n      loading: false,\n      label: props.label\n    };\n    bindCtx(_this, ['handleExpand', 'handleSelect', 'handleCheck', 'handleEditStart', 'handleEditFinish', 'handleRightClick', 'handleDragStart', 'handleDragEnter', 'handleDragOver', 'handleDragLeave', 'handleDragEnd', 'handleDrop', 'handleInputKeyDown']);\n    return _this;\n  }\n\n  TreeNode.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('label' in nextProps) {\n      this.setState({\n        label: nextProps.label\n      });\n    }\n  };\n\n  TreeNode.prototype.getParentNode = function getParentNode() {\n    return this.props.root.getParentNode(this.props.pos);\n  };\n\n  TreeNode.prototype.handleExpand = function handleExpand(e) {\n    var _this2 = this;\n\n    var _props = this.props,\n        root = _props.root,\n        expanded = _props.expanded,\n        eventKey = _props.eventKey;\n\n    if (root.props.isNodeBlock) {\n      e.stopPropagation();\n    }\n\n    var loading = this.state.loading;\n\n    if (loading) {\n      return;\n    }\n\n    var returnValue = root.handleExpand(!expanded, eventKey, this);\n\n    if (isPromise(returnValue)) {\n      this.setLoading(true);\n      return returnValue.then(function () {\n        _this2.setLoading(false);\n      }, function () {\n        _this2.setLoading(false);\n      });\n    }\n  };\n\n  TreeNode.prototype.setLoading = function setLoading(loading) {\n    this.setState({\n      loading: loading\n    });\n  };\n\n  TreeNode.prototype.handleSelect = function handleSelect(e) {\n    e.preventDefault();\n    var _props2 = this.props,\n        root = _props2.root,\n        selected = _props2.selected,\n        eventKey = _props2.eventKey;\n    root.handleSelect(!selected, eventKey, this);\n  };\n\n  TreeNode.prototype.handleCheck = function handleCheck() {\n    var _props3 = this.props,\n        root = _props3.root,\n        checked = _props3.checked,\n        eventKey = _props3.eventKey;\n    root.handleCheck(!checked, eventKey, this);\n  };\n\n  TreeNode.prototype.handleEditStart = function handleEditStart(e) {\n    e.preventDefault();\n    this.setState({\n      editing: true\n    });\n  };\n\n  TreeNode.prototype.handleEditFinish = function handleEditFinish(e) {\n    var label = e.target.value;\n    this.setState({\n      editing: false,\n      label: label\n    });\n    var _props4 = this.props,\n        root = _props4.root,\n        eventKey = _props4.eventKey;\n    root.props.onEditFinish(eventKey, label, this);\n  };\n\n  TreeNode.prototype.handleRightClick = function handleRightClick(e) {\n    this.props.root.props.onRightClick({\n      event: e,\n      node: this\n    });\n  };\n\n  TreeNode.prototype.handleDragStart = function handleDragStart(e) {\n    e.stopPropagation();\n    this.props.root.handleDragStart(e, this);\n  };\n\n  TreeNode.prototype.handleDragEnter = function handleDragEnter(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.props.root.handleDragEnter(e, this);\n  };\n\n  TreeNode.prototype.handleDragOver = function handleDragOver(e) {\n    if (this.props.root.canDrop(this)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.props.root.handleDragOver(e, this);\n    }\n  };\n\n  TreeNode.prototype.handleDragLeave = function handleDragLeave(e) {\n    e.stopPropagation();\n    this.props.root.handleDragLeave(e, this);\n  };\n\n  TreeNode.prototype.handleDragEnd = function handleDragEnd(e) {\n    e.stopPropagation();\n    this.props.root.handleDragEnd(e, this);\n  };\n\n  TreeNode.prototype.handleDrop = function handleDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.props.root.handleDrop(e, this);\n  };\n\n  TreeNode.prototype.handleInputKeyDown = function handleInputKeyDown(e) {\n    if (e.keyCode === KEYCODE.ENTER) {\n      this.handleEditFinish(e);\n    }\n  };\n\n  TreeNode.prototype.addCallbacks = function addCallbacks(props) {\n    var _props5 = this.props,\n        disabled = _props5.disabled,\n        root = _props5.root;\n\n    if (!disabled) {\n      var selectable = typeof this.props.selectable !== 'undefined' ? this.props.selectable : root.props.selectable;\n\n      if (selectable) {\n        props.onClick = this.handleSelect;\n      }\n\n      var editable = typeof this.props.editable !== 'undefined' ? this.props.editable : root.props.editable;\n\n      if (editable) {\n        props.onDoubleClick = this.handleEditStart;\n      }\n\n      var draggable = typeof this.props.draggable !== 'undefined' ? this.props.draggable : root.props.draggable;\n\n      if (draggable) {\n        props.draggable = true;\n        props.onDragStart = this.handleDragStart;\n        props.onDragEnd = this.handleDragEnd;\n      }\n\n      props.onContextMenu = this.handleRightClick;\n    }\n  };\n\n  TreeNode.prototype.renderSwitcher = function renderSwitcher() {\n    var _cx;\n\n    var _props6 = this.props,\n        prefix = _props6.prefix,\n        disabled = _props6.disabled,\n        expanded = _props6.expanded,\n        root = _props6.root;\n    var loadData = root.props.loadData;\n    var loading = this.state.loading;\n    var showLine = this.showLine;\n    var lineState = showLine ? 'line' : 'noline';\n    var className = cx((_cx = {}, _cx[prefix + 'tree-switcher'] = true, _cx['' + prefix + lineState] = !loading, _cx[prefix + 'close'] = !loading && !showLine && !expanded, _cx[prefix + 'disabled'] = disabled, _cx[prefix + 'loading'] = loading, _cx[prefix + 'loading-' + lineState] = loading, _cx));\n    var iconType = loadData && loading ? 'loading' : showLine ? expanded ? 'minus' : 'add' : 'arrow-down';\n    return React.createElement('span', {\n      className: className,\n      onClick: disabled ? null : this.handleExpand\n    }, this.renderRightAngle(), React.createElement(Icon, {\n      className: prefix + 'tree-switcher-icon',\n      type: iconType\n    }));\n  };\n\n  TreeNode.prototype.renderNoopSwitcher = function renderNoopSwitcher() {\n    var _cx2;\n\n    var _props7 = this.props,\n        prefix = _props7.prefix,\n        pos = _props7.pos;\n    var showLine = this.showLine;\n    var lineState = showLine ? 'line' : 'noline';\n    var className = cx((_cx2 = {}, _cx2[prefix + 'tree-switcher'] = true, _cx2[prefix + 'noop-' + lineState] = true, _cx2[prefix + 'noop-line-noroot'] = showLine && !isRoot(pos), _cx2));\n    return React.createElement('span', {\n      className: className\n    }, this.renderRightAngle());\n  };\n\n  TreeNode.prototype.renderRightAngle = function renderRightAngle() {\n    var _props8 = this.props,\n        prefix = _props8.prefix,\n        pos = _props8.pos;\n    return this.showLine && !isRoot(pos) ? React.createElement('span', {\n      className: prefix + 'tree-right-angle'\n    }) : null;\n  };\n\n  TreeNode.prototype.renderCheckbox = function renderCheckbox() {\n    var _props9 = this.props,\n        checked = _props9.checked,\n        indeterminate = _props9.indeterminate,\n        disabled = _props9.disabled,\n        checkboxDisabled = _props9.checkboxDisabled;\n    return React.createElement(Checkbox, {\n      checked: checked,\n      indeterminate: indeterminate,\n      disabled: disabled || checkboxDisabled,\n      onChange: this.handleCheck\n    });\n  };\n\n  TreeNode.prototype.renderLabel = function renderLabel() {\n    var _cx3;\n\n    var _props10 = this.props,\n        prefix = _props10.prefix,\n        root = _props10.root,\n        disabled = _props10.disabled;\n    var isNodeBlock = root.props.isNodeBlock;\n    var label = this.state.label;\n    var selectable = typeof this.props.selectable !== 'undefined' ? this.props.selectable : root.props.selectable;\n    var labelProps = {\n      className: cx((_cx3 = {}, _cx3[prefix + 'tree-node-label'] = true, _cx3[prefix + 'tree-node-label-selectable'] = selectable && !disabled, _cx3))\n    };\n\n    if (!isNodeBlock) {\n      this.addCallbacks(labelProps);\n    }\n\n    return React.createElement('div', {\n      className: prefix + 'tree-node-label-wrapper',\n      ref: 'labelWrapper'\n    }, React.createElement('div', labelProps, label));\n  };\n\n  TreeNode.prototype.renderInput = function renderInput() {\n    var prefix = this.props.prefix;\n    var label = this.state.label;\n    return React.createElement('div', {\n      className: prefix + 'tree-node-label-wrapper',\n      ref: 'labelWrapper'\n    }, React.createElement(TreeNodeInput, {\n      prefix: prefix,\n      defaultValue: label,\n      onBlur: this.handleEditFinish,\n      onKeyDown: this.handleInputKeyDown\n    }));\n  };\n\n  TreeNode.prototype.renderChildTree = function renderChildTree(hasChildTree) {\n    var _props11 = this.props,\n        prefix = _props11.prefix,\n        children = _props11.children,\n        expanded = _props11.expanded,\n        root = _props11.root;\n    var animation = root.props.animation;\n    var childTree = expanded && hasChildTree ? React.createElement('ul', {\n      className: prefix + 'tree-child-tree'\n    }, children) : null;\n\n    if (animation) {\n      childTree = React.createElement(Expand, {\n        animationAppear: false\n      }, childTree);\n    }\n\n    return childTree;\n  };\n\n  TreeNode.prototype.render = function render() {\n    var _cx4, _cx5;\n\n    var _props12 = this.props,\n        prefix = _props12.prefix,\n        className = _props12.className,\n        children = _props12.children,\n        isLeaf = _props12.isLeaf,\n        root = _props12.root,\n        pos = _props12.pos,\n        selected = _props12.selected,\n        disabled = _props12.disabled,\n        dragOver = _props12.dragOver,\n        dragOverGapTop = _props12.dragOverGapTop,\n        dragOverGapBottom = _props12.dragOverGapBottom;\n    var _root$props = root.props,\n        loadData = _root$props.loadData,\n        isNodeBlock = _root$props.isNodeBlock,\n        showLine = _root$props.showLine,\n        rootDraggable = _root$props.draggable,\n        filterTreeNode = _root$props.filterTreeNode;\n    this.showLine = !isNodeBlock && showLine;\n    var others = pickOthers(Object.keys(TreeNode.propTypes), this.props);\n\n    if (rootDraggable) {\n      others.onDragEnter = this.handleDragEnter;\n      others.onDragOver = this.handleDragOver;\n      others.onDragLeave = this.handleDragLeave;\n      others.onDrop = this.handleDrop;\n    }\n\n    var newClassName = cx((_cx4 = {}, _cx4[prefix + 'tree-node'] = true, _cx4[prefix + 'filtered'] = !!filterTreeNode && !!root.filterTreeNode(this), _cx4[className] = !!className, _cx4));\n    var innerClassName = cx((_cx5 = {}, _cx5[prefix + 'tree-node-inner'] = true, _cx5[prefix + 'selected'] = selected, _cx5[prefix + 'disabled'] = disabled, _cx5[prefix + 'drag-over'] = dragOver, _cx5[prefix + 'drag-over-gap-top'] = dragOverGapTop, _cx5[prefix + 'drag-over-gap-bottom'] = dragOverGapBottom, _cx5));\n    var defaultPaddingLeft = (typeof isNodeBlock === 'undefined' ? 'undefined' : _typeof(isNodeBlock)) === 'object' ? parseInt(isNodeBlock.defaultPaddingLeft || 0) : 0;\n    var indent = (typeof isNodeBlock === 'undefined' ? 'undefined' : _typeof(isNodeBlock)) === 'object' ? parseInt(isNodeBlock.indent || 24) : 24;\n    var level = pos.split('-').length - 2;\n    var innerStyle = isNodeBlock ? {\n      paddingLeft: indent * level + defaultPaddingLeft + 'px'\n    } : null;\n    var innerProps = {\n      className: innerClassName,\n      style: innerStyle\n    };\n\n    if (isNodeBlock) {\n      this.addCallbacks(innerProps);\n    }\n\n    var hasChildTree = children && Children.count(children);\n    var canExpand = hasChildTree || loadData && !isLeaf;\n    var checkable = typeof this.props.checkable !== 'undefined' ? this.props.checkable : root.props.checkable;\n    var editing = this.state.editing;\n    return React.createElement('li', _extends({\n      className: newClassName\n    }, others), React.createElement('div', innerProps, canExpand ? this.renderSwitcher() : this.renderNoopSwitcher(), checkable ? this.renderCheckbox() : null, editing ? this.renderInput() : this.renderLabel()), this.renderChildTree(hasChildTree));\n  };\n\n  return TreeNode;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  className: PropTypes.string,\n\n  /**\n   * 树节点\n   */\n  children: PropTypes.node,\n\n  /**\n   * 节点文本内容\n   */\n  label: PropTypes.node,\n\n  /**\n   * 单独设置是否支持选中，覆盖 Tree 的 selectable\n   */\n  selectable: PropTypes.bool,\n\n  /**\n   * 单独设置是否出现复选框，覆盖 Tree 的 checkable\n   */\n  checkable: PropTypes.bool,\n\n  /**\n   * 单独设置是否支持编辑，覆盖 Tree 的 editable\n   */\n  editable: PropTypes.bool,\n\n  /**\n   * 单独设置是否支持拖拽，覆盖 Tree 的 draggable\n   */\n  draggable: PropTypes.bool,\n\n  /**\n   * 是否禁止节点响应\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 是否禁止勾选节点复选框\n   */\n  checkboxDisabled: PropTypes.bool,\n\n  /**\n   * 是否是叶子节点，设置loadData时生效\n   */\n  isLeaf: PropTypes.bool,\n  root: PropTypes.object,\n  eventKey: PropTypes.string,\n  pos: PropTypes.string,\n  expanded: PropTypes.bool,\n  selected: PropTypes.bool,\n  checked: PropTypes.bool,\n  indeterminate: PropTypes.bool,\n  dragOver: PropTypes.bool,\n  dragOverGapTop: PropTypes.bool,\n  dragOverGapBottom: PropTypes.bool,\n  parentNode: PropTypes.object\n}, _class.defaultProps = {\n  label: '---',\n  disabled: false,\n  checkboxDisabled: false,\n  isLeaf: false\n}, _temp);\nTreeNode.displayName = 'TreeNode';\nexport { TreeNode as default };","map":null,"metadata":{},"sourceType":"module"}