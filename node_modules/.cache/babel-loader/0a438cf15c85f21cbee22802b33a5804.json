{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Overlay from '../overlay';\nimport ConfigProvider from '../config-provider';\nimport { guid } from '../util';\nimport Message from './message';\nvar config = ConfigProvider.config;\nvar instance = void 0;\nvar timeouts = {};\nvar Mask = (_temp2 = _class = function (_React$Component) {\n  _inherits(Mask, _React$Component);\n\n  function Mask() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Mask);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      visible: true\n    }, _this.handleClose = function () {\n      var silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      _this.setState({\n        visible: false\n      });\n\n      if (!silent) {\n        _this.props.onClose && _this.props.onClose();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Mask.prototype.componentWillUnmount = function componentWillUnmount() {\n    var timeoutId = this.props.timeoutId;\n\n    if (timeoutId in timeouts) {\n      var timeout = timeouts[timeoutId];\n      clearTimeout(timeout);\n      delete timeouts[timeoutId];\n    }\n  };\n\n  Mask.prototype.render = function render() {\n    /* eslint-disable no-unused-vars */\n    var _props = this.props,\n        prefix = _props.prefix,\n        type = _props.type,\n        title = _props.title,\n        content = _props.content,\n        align = _props.align,\n        offset = _props.offset,\n        hasMask = _props.hasMask,\n        afterClose = _props.afterClose,\n        animation = _props.animation,\n        overlayProps = _props.overlayProps,\n        timeoutId = _props.timeoutId,\n        others = _objectWithoutProperties(_props, ['prefix', 'type', 'title', 'content', 'align', 'offset', 'hasMask', 'afterClose', 'animation', 'overlayProps', 'timeoutId']);\n    /* eslint-enable */\n\n\n    var visible = this.state.visible;\n    return React.createElement(Overlay, _extends({}, overlayProps, {\n      prefix: prefix,\n      animation: animation,\n      visible: visible,\n      align: align,\n      offset: offset,\n      hasMask: hasMask,\n      afterClose: afterClose\n    }), React.createElement(Message, _extends({}, others, {\n      prefix: prefix,\n      visible: true,\n      type: type,\n      shape: 'toast',\n      title: title,\n      className: prefix + 'message-wrapper',\n      onClose: this.handleClose\n    }), content));\n  };\n\n  return Mask;\n}(React.Component), _class.contextTypes = {\n  prefix: PropTypes.string\n}, _class.propTypes = {\n  prefix: PropTypes.string,\n  type: PropTypes.string,\n  title: PropTypes.node,\n  content: PropTypes.node,\n  align: PropTypes.string,\n  offset: PropTypes.array,\n  hasMask: PropTypes.bool,\n  afterClose: PropTypes.func,\n  animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  overlayProps: PropTypes.object,\n  onClose: PropTypes.func,\n  timeoutId: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  align: 'tc tc',\n  offset: [0, 30],\n  hasMask: false,\n  animation: {\n    in: 'pulse',\n    out: 'zoomOut'\n  }\n}, _temp2);\nMask.displayName = 'Mask';\nvar NewMask = config(Mask);\n\nvar create = function create(props) {\n  /* eslint-disable no-unused-vars */\n  var duration = props.duration,\n      afterClose = props.afterClose,\n      others = _objectWithoutProperties(props, ['duration', 'afterClose']);\n  /* eslint-enable no-unused-vars */\n\n\n  var div = document.createElement('div');\n  document.body.appendChild(div);\n\n  var closeChain = function closeChain() {\n    ReactDOM.unmountComponentAtNode(div);\n    document.body.removeChild(div);\n    afterClose && afterClose();\n  };\n\n  var newContext = ConfigProvider.getContext();\n  var mask = void 0,\n      myRef = void 0,\n      destroyed = false;\n\n  var destroy = function destroy() {\n    var inc = mask && mask.getInstance();\n    inc && inc.handleClose(true);\n    destroyed = true;\n  };\n\n  ReactDOM.render(React.createElement(ConfigProvider, newContext, React.createElement(NewMask, _extends({\n    afterClose: closeChain\n  }, others, {\n    ref: function ref(_ref) {\n      myRef = _ref;\n    }\n  }))), div, function () {\n    mask = myRef;\n\n    if (mask && destroyed) {\n      destroy();\n    }\n  });\n  return {\n    component: mask,\n    destroy: destroy\n  };\n};\n\nfunction handleConfig(config, type) {\n  var newConfig = {};\n\n  if (typeof config === 'string' || React.isValidElement(config)) {\n    newConfig.title = config;\n  } else if (isObject(config)) {\n    newConfig = _extends({}, config);\n  }\n\n  if (typeof newConfig.duration !== 'number') {\n    newConfig.duration = 3000;\n  }\n\n  if (type) {\n    newConfig.type = type;\n  }\n\n  return newConfig;\n}\n\nfunction isObject(obj) {\n  return {}.toString.call(obj) === '[object Object]';\n}\n\nfunction open(config, type) {\n  close();\n  config = handleConfig(config, type);\n  var timeoutId = guid();\n  instance = create(_extends({}, config, {\n    timeoutId: timeoutId\n  }));\n\n  if (config.duration > 0) {\n    var timeout = setTimeout(close, config.duration);\n    timeouts[timeoutId] = timeout;\n  }\n}\n\nfunction close() {\n  if (instance) {\n    instance.destroy();\n    instance = null;\n  }\n}\n/**\n * 创建提示弹层\n * @exportName show\n * @param {Object} props 属性对象\n */\n\n\nfunction show(config) {\n  open(config);\n}\n/**\n * 关闭提示弹层\n * @exportName hide\n */\n\n\nfunction hide() {\n  close();\n}\n/**\n * 创建成功提示弹层\n * @exportName success\n * @param {Object} props 属性对象\n */\n\n\nfunction success(config) {\n  open(config, 'success');\n}\n/**\n * 创建警告提示弹层\n * @exportName warning\n * @param {Object} props 属性对象\n */\n\n\nfunction warning(config) {\n  open(config, 'warning');\n}\n/**\n * 创建错误提示弹层\n * @exportName error\n * @param {Object} props 属性对象\n */\n\n\nfunction error(config) {\n  open(config, 'error');\n}\n/**\n * 创建帮助提示弹层\n * @exportName help\n * @param {Object} props 属性对象\n */\n\n\nfunction help(config) {\n  open(config, 'help');\n}\n/**\n * 创建加载中提示弹层\n * @exportName loading\n * @param {Object} props 属性对象\n */\n\n\nfunction loading(config) {\n  open(config, 'loading');\n}\n/**\n * 创建通知提示弹层\n * @exportName notice\n * @param {Object} props 属性对象\n */\n\n\nfunction notice(config) {\n  open(config, 'notice');\n}\n\nexport default {\n  show: show,\n  hide: hide,\n  success: success,\n  warning: warning,\n  error: error,\n  help: help,\n  loading: loading,\n  notice: notice\n};","map":null,"metadata":{},"sourceType":"module"}