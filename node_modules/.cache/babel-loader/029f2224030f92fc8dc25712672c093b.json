{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { obj, func } from '../util';\nimport Base from './base';\nimport Group from './group'; // preventDefault here can stop onBlur to keep focus state\n\nfunction preventDefault(e) {\n  e.preventDefault();\n}\n/** Input */\n\n\nvar Input = (_temp = _class = function (_Base) {\n  _inherits(Input, _Base);\n\n  function Input(props) {\n    _classCallCheck(this, Input);\n\n    var _this = _possibleConstructorReturn(this, _Base.call(this, props));\n\n    _this.handleKeyDown = function (e) {\n      if (e.keyCode === 13) {\n        _this.props.onPressEnter(e);\n      }\n\n      _this.onKeyDown(e);\n    };\n\n    _this.handleKeyDownFromClear = function (e) {\n      if (e.keyCode === 13) {\n        _this.onClear(e);\n      }\n    };\n\n    var value = void 0;\n\n    if ('value' in props) {\n      value = props.value;\n    } else {\n      value = props.defaultValue;\n    }\n\n    _this.state = {\n      value: typeof value === 'undefined' ? '' : value\n    };\n    return _this;\n  } // `Enter` was considered to be two chars in chrome , but one char in ie.\n  // so we make all `Enter` to be two chars\n\n\n  Input.prototype.getValueLength = function getValueLength(value) {\n    var nv = '' + value;\n    var strLen = this.props.getValueLength(nv);\n\n    if (typeof strLen !== 'number') {\n      strLen = nv.length;\n    }\n\n    return strLen;\n  };\n\n  Input.prototype.renderControl = function renderControl() {\n    var _props = this.props,\n        hasClear = _props.hasClear,\n        readOnly = _props.readOnly,\n        state = _props.state,\n        prefix = _props.prefix,\n        hint = _props.hint,\n        extra = _props.extra,\n        locale = _props.locale;\n    var lenWrap = this.renderLength();\n    var stateWrap = null;\n\n    if (state === 'success') {\n      stateWrap = React.createElement(Icon, {\n        type: 'success-filling'\n      });\n    } else if (state === 'loading') {\n      stateWrap = React.createElement(Icon, {\n        type: 'loading'\n      });\n    }\n\n    var clearWrap = null;\n    var showClear = hasClear && !readOnly && !!('' + this.state.value);\n\n    if (hint || showClear) {\n      var hintIcon = null;\n\n      if (hint) {\n        hintIcon = React.createElement(Icon, {\n          type: hint,\n          className: prefix + 'input-hint'\n        });\n      } else {\n        hintIcon = React.createElement(Icon, {\n          type: 'delete-filling',\n          role: 'button',\n          tabIndex: '0',\n          className: prefix + 'input-hint',\n          'aria-label': locale.clear,\n          onClick: this.onClear.bind(this),\n          onMouseDown: preventDefault,\n          onKeyDown: this.handleKeyDownFromClear\n        });\n      }\n\n      clearWrap = React.createElement('span', {\n        className: prefix + 'input-hint-wrap'\n      }, hasClear && hint ? React.createElement(Icon, {\n        type: 'delete-filling',\n        role: 'button',\n        tabIndex: '0',\n        className: prefix + 'input-clear',\n        'aria-label': locale.clear,\n        onClick: this.onClear.bind(this),\n        onMouseDown: preventDefault,\n        onKeyDown: this.handleKeyDownFromClear\n      }) : null, hintIcon);\n    }\n\n    if (state === 'loading') {\n      clearWrap = null;\n    }\n\n    return clearWrap || lenWrap || stateWrap || extra ? React.createElement('span', {\n      className: prefix + 'input-control'\n    }, clearWrap, lenWrap, stateWrap, extra) : null;\n  };\n\n  Input.prototype.renderLabel = function renderLabel() {\n    var _props2 = this.props,\n        label = _props2.label,\n        prefix = _props2.prefix,\n        id = _props2.id;\n    return label ? React.createElement('label', {\n      className: prefix + 'input-label',\n      htmlFor: id\n    }, label) : null;\n  };\n\n  Input.prototype.renderInner = function renderInner(inner, cls) {\n    return inner ? React.createElement('span', {\n      className: cls\n    }, inner) : null;\n  };\n\n  Input.prototype.onClear = function onClear(e) {\n    if (this.props.disabled) {\n      return;\n    } // 非受控模式清空内部数据\n\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value: ''\n      });\n    }\n\n    this.props.onChange('', e, 'clear');\n    this.focus();\n  };\n\n  Input.prototype.render = function render() {\n    var _classNames, _classNames2, _classNames3, _classNames4, _classNames5, _classNames6;\n\n    var _props3 = this.props,\n        size = _props3.size,\n        htmlType = _props3.htmlType,\n        htmlSize = _props3.htmlSize,\n        autoComplete = _props3.autoComplete,\n        autoFocus = _props3.autoFocus,\n        disabled = _props3.disabled,\n        style = _props3.style,\n        innerBefore = _props3.innerBefore,\n        innerAfter = _props3.innerAfter,\n        innerBeforeClassName = _props3.innerBeforeClassName,\n        innerAfterClassName = _props3.innerAfterClassName,\n        className = _props3.className,\n        hasBorder = _props3.hasBorder,\n        prefix = _props3.prefix,\n        addonBefore = _props3.addonBefore,\n        addonAfter = _props3.addonAfter,\n        addonTextBefore = _props3.addonTextBefore,\n        addonTextAfter = _props3.addonTextAfter,\n        inputRender = _props3.inputRender,\n        rtl = _props3.rtl;\n    var hasAddon = addonBefore || addonAfter || addonTextBefore || addonTextAfter;\n    var cls = classNames(this.getClass(), (_classNames = {}, _classNames['' + prefix + size] = true, _classNames[prefix + 'hidden'] = this.props.htmlType === 'hidden', _classNames[prefix + 'noborder'] = !hasBorder || this.props.htmlType === 'file', _classNames[prefix + 'input-group-auto-width'] = hasAddon, _classNames[className] = !!className && !hasAddon, _classNames));\n    var innerCls = prefix + 'input-inner';\n    var innerBeforeCls = classNames((_classNames2 = {}, _classNames2[innerCls] = true, _classNames2[prefix + 'before'] = true, _classNames2[innerBeforeClassName] = innerBeforeClassName, _classNames2));\n    var innerAfterCls = classNames((_classNames3 = {}, _classNames3[innerCls] = true, _classNames3[prefix + 'after'] = true, _classNames3[innerAfterClassName] = innerAfterClassName, _classNames3));\n    var props = this.getProps(); // custom data attributes are assigned to the top parent node\n    // data-类自定义数据属性分配到顶层node节点\n\n    var dataProps = obj.pickAttrsWith(this.props, 'data-'); // Custom props are transparently transmitted to the core input node by default\n    // 自定义属性默认透传到核心node节点：input\n\n    var others = obj.pickOthers(_extends({}, dataProps, Input.propTypes), this.props);\n    var inputEl = React.createElement('input', _extends({}, others, props, {\n      height: '100%',\n      type: htmlType,\n      size: htmlSize,\n      autoFocus: autoFocus,\n      autoComplete: autoComplete,\n      onKeyDown: this.handleKeyDown,\n      ref: this.saveRef\n    }));\n    var inputWrap = React.createElement('span', _extends({}, dataProps, {\n      dir: rtl ? 'rtl' : undefined,\n      className: cls,\n      style: hasAddon ? undefined : style\n    }), this.renderInner(innerBefore, innerBeforeCls), this.renderLabel(), inputRender(inputEl), this.renderControl(), this.renderInner(innerAfter, innerAfterCls));\n    var groupCls = classNames((_classNames4 = {}, _classNames4[prefix + 'input-group-text'] = true, _classNames4['' + prefix + size] = !!size, _classNames4[prefix + 'disabled'] = disabled, _classNames4));\n    var addonBeforeCls = classNames((_classNames5 = {}, _classNames5[groupCls] = addonTextBefore, _classNames5));\n    var addonAfterCls = classNames((_classNames6 = {}, _classNames6[groupCls] = addonTextAfter, _classNames6));\n\n    if (hasAddon) {\n      return React.createElement(Group, _extends({}, dataProps, {\n        className: className,\n        style: style,\n        addonBefore: addonBefore || addonTextBefore,\n        addonBeforeClassName: addonBeforeCls,\n        addonAfter: addonAfter || addonTextAfter,\n        addonAfterClassName: addonAfterCls\n      }), inputWrap);\n    }\n\n    return inputWrap;\n  };\n\n  return Input;\n}(Base), _class.propTypes = _extends({}, Base.propTypes, {\n  /**\n   * label\n   */\n  label: PropTypes.node,\n\n  /**\n   * 是否出现clear按钮\n   */\n  hasClear: PropTypes.bool,\n\n  /**\n   * 是否有边框\n   */\n  hasBorder: PropTypes.bool,\n\n  /**\n   * 状态\n   * @enumdesc 错误, 校验中, 成功\n   */\n  state: PropTypes.oneOf(['error', 'loading', 'success']),\n\n  /**\n   * 尺寸\n   * @enumdesc 小, 中, 大\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 按下回车的回调\n   */\n  onPressEnter: PropTypes.func,\n  onClear: PropTypes.func,\n\n  /**\n   * 原生type\n   */\n  htmlType: PropTypes.string,\n  htmlSize: PropTypes.string,\n\n  /**\n   * 水印 (Icon的type类型，和hasClear占用一个地方)\n   */\n  hint: PropTypes.string,\n\n  /**\n   * 文字前附加内容\n   */\n  innerBefore: PropTypes.node,\n\n  /**\n   * 文字后附加内容\n   */\n  innerAfter: PropTypes.node,\n\n  /**\n   * 输入框前附加内容\n   */\n  addonBefore: PropTypes.node,\n\n  /**\n   * 输入框后附加内容\n   */\n  addonAfter: PropTypes.node,\n\n  /**\n   * 输入框前附加文字\n   */\n  addonTextBefore: PropTypes.node,\n\n  /**\n   * 输入框后附加文字\n   */\n  addonTextAfter: PropTypes.node,\n\n  /**\n   * (原生input支持)\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * 自动聚焦(原生input支持)\n   */\n  autoFocus: PropTypes.bool,\n  inputRender: PropTypes.func,\n  extra: PropTypes.node,\n  innerBeforeClassName: PropTypes.string,\n  innerAfterClassName: PropTypes.string\n}), _class.defaultProps = _extends({}, Base.defaultProps, {\n  size: 'medium',\n  autoComplete: 'off',\n  hasBorder: true,\n  onPressEnter: func.noop,\n  inputRender: function inputRender(el) {\n    return el;\n  }\n}), _temp);\nexport { Input as default };","map":null,"metadata":{},"sourceType":"module"}