{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from '../../icon';\nimport Overlay from '../../overlay';\nimport { func, obj, dom } from '../../util';\nimport Item from './item';\nimport SelectableItem from './selectable-item';\nvar bindCtx = func.bindCtx;\nvar setStyle = dom.setStyle;\nvar Popup = Overlay.Popup;\n/**\n * Menu.PopupItem\n * @order 2\n */\n\nvar PopupItem = (_temp = _class = function (_Component) {\n  _inherits(PopupItem, _Component);\n\n  function PopupItem(props) {\n    _classCallCheck(this, PopupItem);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    bindCtx(_this, ['handleOpen', 'handlePopupOpen', 'handlePopupClose', 'getPopup']);\n    return _this;\n  }\n\n  PopupItem.prototype.getPopup = function getPopup(ref) {\n    this.popup = ref;\n  };\n\n  PopupItem.prototype.getOpen = function getOpen() {\n    var _props = this.props,\n        _key = _props._key,\n        root = _props.root;\n    var openKeys = root.state.openKeys;\n    return openKeys.indexOf(_key) > -1;\n  };\n\n  PopupItem.prototype.getPopupProps = function getPopupProps() {\n    var popupProps = this.props.root.props.popupProps;\n\n    if (typeof popupProps === 'function') {\n      popupProps = popupProps(this.props);\n    }\n\n    return popupProps;\n  };\n\n  PopupItem.prototype.handleOpen = function handleOpen(open, triggerType, e) {\n    var _props2 = this.props,\n        _key = _props2._key,\n        root = _props2.root;\n    root.handleOpen(_key, open, triggerType, e);\n    var popupProps = this.popupProps;\n    popupProps.onVisibleChange && popupProps.onVisibleChange(open, triggerType, e);\n  };\n\n  PopupItem.prototype.handlePopupOpen = function handlePopupOpen() {\n    var _props3 = this.props,\n        root = _props3.root,\n        level = _props3.level,\n        align = _props3.align,\n        autoWidth = _props3.autoWidth;\n    var _root$props = root.props,\n        rootPopupAutoWidth = _root$props.popupAutoWidth,\n        rootPopupAlign = _root$props.popupAlign,\n        direction = _root$props.direction;\n    var popupAlign = align || rootPopupAlign;\n    var popupAutoWidth = 'autoWidth' in this.props ? autoWidth : rootPopupAutoWidth;\n    var itemNode = findDOMNode(this);\n    var menuNode = itemNode.parentNode;\n    this.popupNode = this.popup.getInstance().overlay.getInstance().getContentNode();\n    root.popupNodes.push(this.popupNode);\n\n    if (popupAutoWidth) {\n      var targetNode = direction === 'hoz' && level === 1 ? itemNode : menuNode;\n\n      if (targetNode.offsetWidth > this.popupNode.offsetWidth) {\n        setStyle(this.popupNode, 'width', targetNode.offsetWidth + 'px');\n      }\n    }\n\n    if (popupAlign === 'outside' && !(direction === 'hoz' && level === 1)) {\n      setStyle(this.popupNode, 'height', menuNode.offsetHeight + 'px');\n      setStyle(this.popupNode, 'overflow-y', 'scroll');\n    } // removeClass(this.popupNode, `${prefix}hide`);\n\n\n    var popupProps = this.popupProps;\n    popupProps.onOpen && popupProps.onOpen();\n  };\n\n  PopupItem.prototype.handlePopupClose = function handlePopupClose() {\n    var root = this.props.root;\n    var popupNodes = root.popupNodes;\n    var index = popupNodes.indexOf(this.popupNode);\n    index > -1 && popupNodes.splice(index, 1);\n    var popupProps = this.popupProps;\n    popupProps.onClose && popupProps.onClose();\n  };\n\n  PopupItem.prototype.renderItem = function renderItem(selectable, children, others) {\n    var _props4 = this.props,\n        _key = _props4._key,\n        root = _props4.root,\n        level = _props4.level,\n        label = _props4.label,\n        className = _props4.className;\n    var prefix = root.props.prefix;\n    var NewItem = selectable ? SelectableItem : Item;\n    var open = this.getOpen();\n    var itemProps = {\n      'aria-haspopup': true,\n      'aria-expanded': open,\n      _key: _key,\n      root: root,\n      level: level,\n      type: 'submenu'\n    };\n\n    if (open) {\n      var _cx;\n\n      itemProps.className = cx((_cx = {}, _cx[prefix + 'opened'] = true, _cx[className] = !!className, _cx));\n    } else {\n      itemProps.className = className;\n    }\n\n    return React.createElement(NewItem, _extends({}, itemProps, others), React.createElement('span', {\n      className: prefix + 'menu-item-text'\n    }, label), children);\n  };\n\n  PopupItem.prototype.renderPopup = function renderPopup(trigger, triggerType, positionProps, children) {\n    var _this2 = this;\n\n    var _props5 = this.props,\n        root = _props5.root,\n        level = _props5.level,\n        selectable = _props5.selectable;\n    var direction = root.props.direction;\n    this.popupProps = this.getPopupProps();\n    var open = this.getOpen();\n\n    if (direction === 'hoz' && level === 1 && selectable) {\n      positionProps.target = function () {\n        return findDOMNode(_this2);\n      };\n    }\n\n    return React.createElement(Popup, _extends({\n      ref: this.getPopup\n    }, positionProps, this.popupProps, {\n      canCloseByEsc: false,\n      trigger: trigger,\n      triggerType: triggerType,\n      visible: open,\n      onVisibleChange: this.handleOpen,\n      onOpen: this.handlePopupOpen,\n      onClose: this.handlePopupClose\n    }), children);\n  };\n\n  PopupItem.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props6 = this.props,\n        root = _props6.root,\n        level = _props6.level,\n        hasSubMenu = _props6.hasSubMenu,\n        selectableFromProps = _props6.selectable,\n        children = _props6.children,\n        triggerType = _props6.triggerType,\n        align = _props6.align,\n        rtl = _props6.rtl;\n    var others = obj.pickOthers(Object.keys(PopupItem.propTypes), this.props);\n    var _root$props2 = root.props,\n        prefix = _root$props2.prefix,\n        selectMode = _root$props2.selectMode,\n        direction = _root$props2.direction,\n        rootPopupAlign = _root$props2.popupAlign,\n        rootTriggerType = _root$props2.triggerType;\n    var popupAlign = align || rootPopupAlign;\n    var newTriggerType = triggerType || (hasSubMenu ? rootTriggerType : 'hover');\n    var newChildren = Array.isArray(children) ? children[0] : children; // let newChildren = Array.isArray(children) ? children[0] : children;\n    // newChildren = cloneElement(newChildren, {\n    //     className: cx({\n    //         [`${prefix}menu-popup-content`]: true,\n    //         [newChildren.props.className]: !!newChildren.props.className,\n    //         [`${prefix}hide`]: popupAutoWidth || popupAlign === 'outside'\n    //     })\n    // });\n\n    var selectable = selectMode && selectableFromProps;\n    var triggerIsIcon = selectable && newTriggerType === 'click';\n    var open = this.getOpen();\n    var positionProps = {};\n    var arrowProps = void 0;\n\n    if (direction === 'hoz' && level === 1) {\n      var _cx2;\n\n      positionProps.align = 'tl bl';\n      positionProps.offset = [0, 0];\n      arrowProps = {\n        type: 'arrow-down',\n        className: cx((_cx2 = {}, _cx2[prefix + 'menu-hoz-icon-arrow'] = true, _cx2[prefix + 'open'] = open, _cx2))\n      };\n    } else {\n      if (popupAlign === 'outside') {\n        positionProps.target = function () {\n          return findDOMNode(root);\n        };\n\n        positionProps.align = 'tl tr';\n        rtl ? positionProps.offset = [-2, 0] : positionProps.offset = [2, 0];\n      } else {\n        if (triggerIsIcon) {\n          positionProps.target = function () {\n            return findDOMNode(_this3);\n          };\n        }\n\n        positionProps.align = 'tl tr';\n        rtl ? positionProps.offset = [2, -8] : positionProps.offset = [-2, -8];\n      }\n\n      arrowProps = {\n        type: 'arrow-right',\n        className: prefix + 'menu-icon-arrow'\n      };\n    }\n\n    var arrow = React.createElement(Icon, arrowProps);\n    var trigger = triggerIsIcon ? arrow : this.renderItem(selectable, arrow, others);\n    var popup = this.renderPopup(trigger, newTriggerType, positionProps, newChildren);\n    return triggerIsIcon ? this.renderItem(selectable, popup, others) : popup;\n  };\n\n  return PopupItem;\n}(Component), _class.menuChildType = 'submenu', _class.propTypes = {\n  _key: PropTypes.string,\n  root: PropTypes.object,\n  level: PropTypes.number,\n  hasSubMenu: PropTypes.bool,\n  rtl: PropTypes.bool,\n  selectable: PropTypes.bool,\n\n  /**\n   * 标签内容\n   */\n  label: PropTypes.node,\n\n  /**\n   * 自定义弹层内容\n   */\n  children: PropTypes.node,\n  className: PropTypes.string,\n  triggerType: PropTypes.oneOf(['click', 'hover']),\n  align: PropTypes.oneOf(['outside', 'follow']),\n  autoWidth: PropTypes.bool\n}, _class.defaultProps = {\n  selectable: false\n}, _temp);\nPopupItem.displayName = 'PopupItem';\nexport { PopupItem as default };","map":null,"metadata":{},"sourceType":"module"}