{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { func } from '../util';\nvar makeChain = func.makeChain; // UIState 为一些特殊元素的状态响应提供了标准的方式，\n// 尤其适合CSS无法完全定制的控件，比如checkbox，radio等。\n// 若组件 disable 则自行判断是否需要绑定状态管理。\n// 注意：disable 不会触发事件，请使用resetUIState还原状态\n\n/* eslint-disable react/prop-types */\n\nvar UIState = function (_Component) {\n  _inherits(UIState, _Component);\n\n  function UIState(props) {\n    _classCallCheck(this, UIState);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {};\n    ['_onUIFocus', '_onUIBlur'].forEach(function (item) {\n      _this[item] = _this[item].bind(_this);\n    });\n    return _this;\n  } // base 事件绑定的元素\n\n\n  UIState.prototype.getStateElement = function getStateElement(base) {\n    var _props = this.props,\n        onFocus = _props.onFocus,\n        onBlur = _props.onBlur;\n    return React.cloneElement(base, {\n      onFocus: makeChain(this._onUIFocus, onFocus),\n      onBlur: makeChain(this._onUIBlur, onBlur)\n    });\n  }; // 获取状态classname\n\n\n  UIState.prototype.getStateClassName = function getStateClassName() {\n    var focused = this.state.focused;\n    return classnames({\n      focused: focused\n    });\n  }; // 复原状态\n\n\n  UIState.prototype.resetUIState = function resetUIState() {\n    this.setState({\n      focused: false\n    });\n  };\n\n  UIState.prototype._onUIFocus = function _onUIFocus() {\n    this.setState({\n      focused: true\n    });\n  };\n\n  UIState.prototype._onUIBlur = function _onUIBlur() {\n    this.setState({\n      focused: false\n    });\n  };\n\n  return UIState;\n}(Component);\n\nUIState.displayName = 'UIState';\nexport default UIState;","map":null,"metadata":{},"sourceType":"module"}