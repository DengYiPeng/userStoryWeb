{"ast":null,"code":"import rules from './rules/';\n/**\n * {required, format} => format; {required} => required\n * @param  {function} validator [description]\n * @param  {string} ruleType  [description]\n * @return {function}           [description]\n */\n\nexport function validateFunc(validator, ruleType) {\n  return function (rule, value, cb, options) {\n    var errors = []; // 如果是非required校验\n\n    if (ruleType !== 'required') {\n      var _errors = [];\n      rules.required(rule, value, _errors, options);\n\n      if (_errors.length > 0) {\n        if ('required' in rule) {\n          cb(_errors);\n        } else {\n          cb([]); //忽略空数据的判断\n        }\n\n        return;\n      }\n    }\n\n    validator(rule, value, errors, options);\n    cb(errors);\n  };\n}\n/**\n * {required, format} => format; {required} => required\n * @param  {object} rule [description]\n * @return {function}      [description]\n */\n\nexport function getValidationMethod(rule) {\n  if (typeof rule.validator === 'function') {\n    return rule.validator;\n  }\n\n  var keys = Object.keys(rule); //required和其他校验规则共存\n  //{required, format} {required, unknown}\n\n  for (var i = 0; i < keys.length; i++) {\n    var ruleType = keys[i];\n\n    if (ruleType === 'required') {\n      continue;\n    }\n\n    if (ruleType in rules) {\n      return validateFunc(rules[ruleType], ruleType);\n    }\n  } // 有其他位置参数\n\n\n  if ('required' in rule) {\n    return validateFunc(rules.required, 'required');\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}