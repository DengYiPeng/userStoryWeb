{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { obj, dom } from '../../util';\nimport { fetchDataByPath } from '../util';\n\nvar noop = function noop() {};\n\nvar Row = (_temp2 = _class = function (_React$Component) {\n  _inherits(Row, _React$Component);\n\n  function Row() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Row);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onClick = function (e) {\n      var _this$props = _this.props,\n          record = _this$props.record,\n          rowIndex = _this$props.rowIndex;\n\n      _this.props.onClick(record, rowIndex, e);\n    }, _this.onMouseEnter = function (e) {\n      var _this$props2 = _this.props,\n          record = _this$props2.record,\n          rowIndex = _this$props2.rowIndex;\n\n      _this.onRowHover(record, rowIndex, true, e);\n    }, _this.onMouseLeave = function (e) {\n      var _this$props3 = _this.props,\n          record = _this$props3.record,\n          rowIndex = _this$props3.rowIndex;\n\n      _this.onRowHover(record, rowIndex, false, e);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Row.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    if (nextProps.pure) {\n      var isEqual = obj.shallowEqual(this.props, nextProps);\n      return !isEqual;\n    }\n\n    return true;\n  };\n\n  Row.prototype.onRowHover = function onRowHover(record, index, isEnter, e) {\n    var _props = this.props,\n        onMouseEnter = _props.onMouseEnter,\n        onMouseLeave = _props.onMouseLeave,\n        currentRow = findDOMNode(this);\n\n    if (isEnter) {\n      onMouseEnter(record, index, e);\n      currentRow && dom.addClass(currentRow, 'hovered');\n    } else {\n      onMouseLeave(record, index, e);\n      currentRow && dom.removeClass(currentRow, 'hovered');\n    }\n  };\n\n  Row.prototype.renderCells = function renderCells(record) {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        Cell = _props2.Cell,\n        columns = _props2.columns,\n        getCellProps = _props2.getCellProps,\n        cellRef = _props2.cellRef,\n        prefix = _props2.prefix,\n        rowIndex = _props2.rowIndex,\n        primaryKey = _props2.primaryKey,\n        pure = _props2.pure,\n        locale = _props2.locale;\n    var lockType = this.context.lockType;\n    return columns.map(function (child, colIndex) {\n      var _classnames;\n\n      var dataIndex = child.dataIndex,\n          align = child.align,\n          width = child.width,\n          others = _objectWithoutProperties(child, ['dataIndex', 'align', 'width']);\n\n      var value = fetchDataByPath(record, dataIndex);\n      var attrs = getCellProps(rowIndex, colIndex, dataIndex, record) || {};\n\n      if (_this2.context.notRenderCellIndex) {\n        var matchCellIndex = _this2.context.notRenderCellIndex.map(function (cellIndex) {\n          return cellIndex.toString();\n        }).indexOf([rowIndex, colIndex].toString());\n\n        if (matchCellIndex > -1) {\n          _this2.context.notRenderCellIndex.splice(matchCellIndex, 1);\n\n          return null;\n        }\n      }\n\n      if (attrs.colSpan && attrs.colSpan > 1 || attrs.rowSpan && attrs.rowSpan > 1) {\n        _this2._getNotRenderCellIndex(colIndex, rowIndex, attrs.colSpan || 1, attrs.rowSpan || 1);\n      }\n\n      var className = classnames((_classnames = {\n        first: lockType !== 'right' && colIndex === 0,\n        last: lockType !== 'left' && (colIndex === columns.length - 1 || colIndex + attrs.colSpan === columns.length)\n      }, _classnames[child.className] = child.className, _classnames));\n      return React.createElement(Cell, _extends({\n        key: colIndex\n      }, others, attrs, {\n        ref: function ref(cell) {\n          return cellRef(rowIndex, colIndex, cell);\n        },\n        prefix: prefix,\n        pure: pure,\n        primaryKey: primaryKey,\n        record: record,\n        className: className,\n        value: value,\n        colIndex: colIndex,\n        rowIndex: rowIndex,\n        align: align,\n        locale: locale,\n        width: width\n      }));\n    });\n  };\n\n  Row.prototype._getNotRenderCellIndex = function _getNotRenderCellIndex(colIndex, rowIndex, colSpan, rowSpan) {\n    var maxColIndex = colSpan;\n    var maxRowIndex = rowSpan;\n    var notRenderCellIndex = [];\n\n    for (var i = 0; i < maxColIndex; i++) {\n      for (var j = 0; j < maxRowIndex; j++) {\n        notRenderCellIndex.push([rowIndex + j, colIndex + i]);\n      }\n    }\n\n    [].push.apply(this.context.notRenderCellIndex, notRenderCellIndex);\n  };\n\n  Row.prototype.render = function render() {\n    var _classnames2;\n    /* eslint-disable no-unused-vars*/\n\n\n    var _props3 = this.props,\n        prefix = _props3.prefix,\n        className = _props3.className,\n        onClick = _props3.onClick,\n        onMouseEnter = _props3.onMouseEnter,\n        onMouseLeave = _props3.onMouseLeave,\n        columns = _props3.columns,\n        Cell = _props3.Cell,\n        getCellProps = _props3.getCellProps,\n        rowIndex = _props3.rowIndex,\n        record = _props3.record,\n        children = _props3.children,\n        primaryKey = _props3.primaryKey,\n        cellRef = _props3.cellRef,\n        colGroup = _props3.colGroup,\n        pure = _props3.pure,\n        others = _objectWithoutProperties(_props3, ['prefix', 'className', 'onClick', 'onMouseEnter', 'onMouseLeave', 'columns', 'Cell', 'getCellProps', 'rowIndex', 'record', 'children', 'primaryKey', 'cellRef', 'colGroup', 'pure']);\n\n    var cls = classnames((_classnames2 = {}, _classnames2[prefix + 'table-row'] = true, _classnames2[className] = className, _classnames2));\n    return React.createElement('tr', _extends({\n      className: cls,\n      role: 'row'\n    }, others, {\n      onClick: this.onClick,\n      onMouseEnter: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave\n    }), this.renderCells(record), children);\n  };\n\n  return Row;\n}(React.Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  pure: PropTypes.bool,\n  primaryKey: PropTypes.string,\n  className: PropTypes.string,\n  columns: PropTypes.array,\n  record: PropTypes.any,\n  Cell: PropTypes.func,\n  rowIndex: PropTypes.number,\n  getCellProps: PropTypes.func,\n  onClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  children: PropTypes.any,\n  cellRef: PropTypes.func,\n  colGroup: PropTypes.object,\n  locale: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  primaryKey: 'id',\n  columns: [],\n  record: {},\n  getCellProps: noop,\n  onClick: noop,\n  onMouseEnter: noop,\n  onMouseLeave: noop,\n  cellRef: noop,\n  colGroup: {}\n}, _class.contextTypes = {\n  notRenderCellIndex: PropTypes.array,\n  lockType: PropTypes.oneOf(['left', 'right'])\n}, _temp2);\nRow.displayName = 'Row';\nexport { Row as default };","map":null,"metadata":{},"sourceType":"module"}