{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport Animate from '../animate';\nimport ConfigProvider from '../config-provider';\nvar TYPE_MAPS = {\n  success: 'success',\n  warning: 'warning',\n  error: 'error',\n  notice: 'prompt',\n  help: 'help',\n  loading: 'loading'\n};\n\nvar noop = function noop() {};\n/**\n * Message\n */\n\n\nvar Message = (_temp2 = _class = function (_Component) {\n  _inherits(Message, _Component);\n\n  function Message() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Message);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      visible: typeof _this.props.visible === 'undefined' ? _this.props.defaultVisible : _this.props.visible\n    }, _this.onClose = function () {\n      if (!('visible' in _this.props)) {\n        _this.setState({\n          visible: false\n        });\n      }\n\n      _this.props.onClose(false);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Message.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('visible' in nextProps) {\n      this.setState({\n        visible: nextProps.visible\n      });\n    }\n  };\n\n  Message.prototype.render = function render() {\n    var _classNames;\n    /* eslint-disable no-unused-vars */\n\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        pure = _props.pure,\n        className = _props.className,\n        type = _props.type,\n        shape = _props.shape,\n        size = _props.size,\n        title = _props.title,\n        children = _props.children,\n        defaultVisible = _props.defaultVisible,\n        propsVisible = _props.visible,\n        icon = _props.iconType,\n        closeable = _props.closeable,\n        onClose = _props.onClose,\n        afterClose = _props.afterClose,\n        animation = _props.animation,\n        rtl = _props.rtl,\n        others = _objectWithoutProperties(_props, ['prefix', 'pure', 'className', 'type', 'shape', 'size', 'title', 'children', 'defaultVisible', 'visible', 'iconType', 'closeable', 'onClose', 'afterClose', 'animation', 'rtl']);\n    /* eslint-enable */\n\n\n    var visible = this.state.visible;\n    var messagePrefix = prefix + 'message';\n    var iconType = icon || TYPE_MAPS[type];\n    var classes = classNames((_classNames = {}, _classNames[messagePrefix] = true, _classNames[prefix + 'message-' + type] = type, _classNames['' + prefix + shape] = shape, _classNames['' + prefix + size] = size, _classNames[prefix + 'title-content'] = !!title, _classNames[prefix + 'only-content'] = !title && !!children, _classNames[className] = className, _classNames));\n    var newChildren = visible ? React.createElement('div', _extends({\n      role: 'alert'\n    }, others, {\n      className: classes,\n      dir: rtl ? 'rtl' : undefined\n    }), closeable ? React.createElement('a', {\n      role: 'button',\n      href: 'javascript:;',\n      className: messagePrefix + '-close',\n      onClick: this.onClose\n    }, React.createElement(Icon, {\n      type: 'close'\n    })) : null, React.createElement(Icon, {\n      className: messagePrefix + '-symbol',\n      type: iconType\n    }), title ? React.createElement('div', {\n      className: messagePrefix + '-title'\n    }, title) : null, children ? React.createElement('div', {\n      className: messagePrefix + '-content'\n    }, children) : null) : null;\n\n    if (animation) {\n      return React.createElement(Animate.Expand, {\n        animationAppear: false,\n        afterLeave: afterClose\n      }, newChildren);\n    }\n\n    return newChildren;\n  };\n\n  return Message;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  pure: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n\n  /**\n   * 反馈类型\n   */\n  type: PropTypes.oneOf(['success', 'warning', 'error', 'notice', 'help', 'loading']),\n\n  /**\n   * 反馈外观\n   */\n  shape: PropTypes.oneOf(['inline', 'addon', 'toast']),\n\n  /**\n   * 反馈大小\n   */\n  size: PropTypes.oneOf(['medium', 'large']),\n\n  /**\n   * 标题\n   */\n  title: PropTypes.node,\n\n  /**\n   * 内容\n   */\n  children: PropTypes.node,\n\n  /**\n   * 默认是否显示\n   */\n  defaultVisible: PropTypes.bool,\n\n  /**\n   * 当前是否显示\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 显示的图标类型，会覆盖内部设置的IconType\n   */\n  iconType: PropTypes.string,\n\n  /**\n   * 显示关闭按钮\n   */\n  closeable: PropTypes.bool,\n\n  /**\n   * 关闭按钮的回调\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * 关闭之后调用的函数\n   */\n  afterClose: PropTypes.func,\n\n  /**\n   * 是否开启展开收起动画\n   */\n  animation: PropTypes.bool,\n  rtl: PropTypes.bool\n}, _class.defaultProps = {\n  prefix: 'next-',\n  pure: false,\n  type: 'success',\n  shape: 'inline',\n  size: 'medium',\n  defaultVisible: true,\n  closeable: false,\n  onClose: noop,\n  afterClose: noop,\n  animation: true\n}, _temp2);\nMessage.displayName = 'Message';\nexport default ConfigProvider.config(Message);","map":null,"metadata":{},"sourceType":"module"}