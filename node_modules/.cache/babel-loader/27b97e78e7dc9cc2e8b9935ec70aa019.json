{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Item from './item';\n/**\n * Menu.Group\n * @order 5\n */\n\nvar Group = (_temp = _class = function (_Component) {\n  _inherits(Group, _Component);\n\n  function Group() {\n    _classCallCheck(this, Group);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Group.prototype.render = function render() {\n    var _cx;\n\n    var _props = this.props,\n        root = _props.root,\n        className = _props.className,\n        label = _props.label,\n        children = _props.children,\n        parentMode = _props.parentMode,\n        others = _objectWithoutProperties(_props, ['root', 'className', 'label', 'children', 'parentMode']);\n\n    var prefix = root.props.prefix;\n    var newClassName = cx((_cx = {}, _cx[prefix + 'menu-group-label'] = true, _cx[className] = !!className, _cx));\n    var newChildren = children.map(function (child) {\n      var _cx2;\n\n      var className = child.props.className;\n      var newChildClassName = cx((_cx2 = {}, _cx2[prefix + 'menu-group-item'] = true, _cx2[className] = !!className, _cx2));\n      return cloneElement(child, {\n        parentMode: parentMode,\n        className: newChildClassName\n      });\n    });\n    return [React.createElement(Item, _extends({\n      key: 'menu-group-label',\n      className: newClassName,\n      replaceClassName: true,\n      root: root,\n      parentMode: parentMode\n    }, others), label)].concat(newChildren);\n  };\n\n  return Group;\n}(Component), _class.menuChildType = 'group', _class.propTypes = {\n  root: PropTypes.object,\n  className: PropTypes.string,\n\n  /**\n   * 标签内容\n   */\n  label: PropTypes.node,\n\n  /**\n   * 菜单项\n   */\n  children: PropTypes.node,\n  parentMode: PropTypes.oneOf(['inline', 'popup'])\n}, _temp);\nGroup.displayName = 'Group';\nexport { Group as default };","map":null,"metadata":{},"sourceType":"module"}