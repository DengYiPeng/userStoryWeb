{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ConfigProvider from '../config-provider';\nimport Menu from '../menu';\n/**\n * Nav\n * @description 继承自 `Menu` 的能力请查看 `Menu` 文档\n */\n\nvar Nav = (_temp = _class = function (_Component) {\n  _inherits(Nav, _Component);\n\n  function Nav(props) {\n    _classCallCheck(this, Nav);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.getMenuRef = _this.getMenuRef.bind(_this);\n    return _this;\n  }\n\n  Nav.prototype.getChildContext = function getChildContext() {\n    var _props = this.props,\n        prefix = _props.prefix,\n        direction = _props.direction,\n        mode = _props.mode,\n        iconOnly = _props.iconOnly,\n        hasTooltip = _props.hasTooltip,\n        hasArrow = _props.hasArrow;\n    return {\n      prefix: prefix,\n      mode: direction === 'hoz' ? 'popup' : mode,\n      iconOnly: iconOnly,\n      hasTooltip: hasTooltip,\n      hasArrow: hasArrow\n    };\n  };\n\n  Nav.prototype.getMenuRef = function getMenuRef(ref) {\n    this.menu = ref;\n  };\n\n  Nav.prototype.render = function render() {\n    var _classNames, _classNames2; // eslint-disable-next-line\n\n\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        className = _props2.className,\n        style = _props2.style,\n        children = _props2.children,\n        type = _props2.type,\n        direction = _props2.direction,\n        activeDirection = _props2.activeDirection,\n        mode = _props2.mode,\n        triggerType = _props2.triggerType,\n        inlineIndent = _props2.inlineIndent,\n        openMode = _props2.openMode,\n        popupAlign = _props2.popupAlign,\n        popupClassName = _props2.popupClassName,\n        iconOnly = _props2.iconOnly,\n        hasArrow = _props2.hasArrow,\n        hasTooltip = _props2.hasTooltip,\n        _popupProps = _props2.popupProps,\n        rtl = _props2.rtl,\n        others = _objectWithoutProperties(_props2, ['prefix', 'className', 'style', 'children', 'type', 'direction', 'activeDirection', 'mode', 'triggerType', 'inlineIndent', 'openMode', 'popupAlign', 'popupClassName', 'iconOnly', 'hasArrow', 'hasTooltip', 'popupProps', 'rtl']);\n\n    var realActiveDirection = activeDirection;\n\n    if (realActiveDirection && (direction === 'hoz' && (realActiveDirection === 'left' || realActiveDirection === 'right') || direction === 'ver' && (realActiveDirection === 'top' || realActiveDirection === 'bottom'))) {\n      realActiveDirection = null;\n    }\n\n    if (!iconOnly && realActiveDirection === undefined) {\n      realActiveDirection = direction === 'hoz' ? 'bottom' : type === 'line' ? 'right' : 'left';\n    }\n\n    var cls = classNames((_classNames = {}, _classNames[prefix + 'nav'] = true, _classNames['' + prefix + type] = type, _classNames[prefix + 'active'] = realActiveDirection, _classNames['' + prefix + realActiveDirection] = realActiveDirection, _classNames[prefix + 'icon-only'] = iconOnly, _classNames[prefix + 'no-arrow'] = !hasArrow, _classNames[className] = !!className, _classNames));\n    var newStyle = iconOnly ? _extends({}, style, {\n      width: '60px'\n    }) : style;\n    var props = {\n      prefix: prefix,\n      direction: direction,\n      openMode: openMode,\n      triggerType: triggerType,\n      mode: direction === 'hoz' ? 'popup' : mode,\n      popupAlign: direction === 'hoz' ? 'follow' : popupAlign,\n      inlineIndent: iconOnly ? 0 : inlineIndent,\n      hasSelectedIcon: false,\n      popupAutoWidth: true,\n      selectMode: 'single',\n      itemClassName: prefix + 'nav-item',\n      popupClassName: classNames((_classNames2 = {}, _classNames2[cls.replace(prefix + 'icon-only', '')] = mode === 'popup', _classNames2[prefix + 'icon-only'] = iconOnly && mode === 'inline', _classNames2[popupClassName] = !!popupClassName, _classNames2)),\n      popupProps: function popupProps(popupItemProps) {\n        return _extends({\n          offset: direction === 'hoz' && popupItemProps.level === 1 ? [0, 2] : [-2, 0]\n        }, _popupProps);\n      }\n    };\n    return React.createElement(Menu, _extends({\n      className: cls,\n      style: newStyle\n    }, props, others, {\n      ref: this.getMenuRef\n    }), children);\n  };\n\n  return Nav;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  pure: PropTypes.bool,\n  rtl: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n\n  /**\n   * 导航项和子导航\n   */\n  children: PropTypes.node,\n\n  /**\n   * 导航类型\n   * @enumdesc 普通, 主要, 次要, 线形\n   */\n  type: PropTypes.oneOf(['normal', 'primary', 'secondary', 'line']),\n\n  /**\n   * 导航布局\n   * @enumdesc 水平, 垂直\n   */\n  direction: PropTypes.oneOf(['hoz', 'ver']),\n\n  /**\n   * 横向导航条 items 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效\n   */\n  hozAlign: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * 设置组件选中状态的 active 边方向\n   * @enumdesc 无, 上, 下, 左, 右\n   * @default 当 direction 为 'hoz' 时，默认值为 'bottom'，当 direction 为 'ver' 时，默认值为 'left'\n   */\n  activeDirection: PropTypes.oneOf([null, 'top', 'bottom', 'left', 'right']),\n\n  /**\n   * 子导航打开的模式（水平导航只支持弹出）\n   * @eumdesc 行内, 弹出\n   */\n  mode: PropTypes.oneOf(['inline', 'popup']),\n\n  /**\n   * 子导航打开的触发方式\n   */\n  triggerType: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * 内联子导航缩进距离\n   */\n  inlineIndent: PropTypes.number,\n\n  /**\n   * 初始展开所有的子导航，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效\n   */\n  defaultOpenAll: PropTypes.bool,\n\n  /**\n   * 内联子导航的展开模式，同时可以展开一个同级子导航还是多个同级子导航，该属性仅在 mode 为 inline 时生效\n   * @eumdesc 一个, 多个\n   */\n  openMode: PropTypes.oneOf(['single', 'multiple']),\n\n  /**\n   * 当前选中导航项的 key 值\n   */\n  selectedKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * 初始选中导航项的 key 值\n   */\n  defaultSelectedKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * 选中或取消选中导航项触发的回调函数\n   * @param {Array} selectedKeys 选中的所有导航项的 key\n   * @param {Object} item 选中或取消选中的导航项\n   * @param {Object} extra 额外参数\n   * @param {Boolean} extra.select 是否是选中\n   * @param {Array} extra.key 导航项的 key\n   * @param {Object} extra.label 导航项的文本\n   * @param {Array} extra.keyPath 导航项 key 的路径\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * 弹出子导航的对齐方式（水平导航只支持 follow ）\n   * @eumdesc Item 顶端对齐, Nav 顶端对齐\n   */\n  popupAlign: PropTypes.oneOf(['follow', 'outside']),\n\n  /**\n   * 弹出子导航的自定义类名\n   */\n  popupClassName: PropTypes.string,\n\n  /**\n   * 是否只显示图标\n   */\n  iconOnly: PropTypes.bool,\n\n  /**\n   * 是否显示右侧的箭头（仅在 iconOnly=true 时生效）\n   */\n  hasArrow: PropTypes.bool,\n\n  /**\n   * 是否有 ToolTips （仅在 iconOnly=true 时生效）\n   */\n  hasTooltip: PropTypes.bool,\n\n  /**\n   * 自定义导航头部\n   */\n  header: PropTypes.node,\n\n  /**\n   * 自定义导航尾部\n   */\n  footer: PropTypes.node,\n  popupProps: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  pure: false,\n  type: 'normal',\n  direction: 'ver',\n  hozAlign: 'left',\n  mode: 'inline',\n  triggerType: 'click',\n  inlineIndent: 20,\n  defaultOpenAll: false,\n  openMode: 'multiple',\n  defaultSelectedKeys: [],\n  popupAlign: 'follow',\n  hasTooltip: false,\n  hasArrow: true,\n  popupProps: {}\n}, _class.childContextTypes = {\n  prefix: PropTypes.string,\n  mode: PropTypes.string,\n  iconOnly: PropTypes.bool,\n  hasTooltip: PropTypes.bool,\n  hasArrow: PropTypes.bool\n}, _temp);\nNav.displayName = 'Nav';\nexport default ConfigProvider.config(Nav);","map":null,"metadata":{},"sourceType":"module"}