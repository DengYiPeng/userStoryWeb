{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport { isValidElement, cloneElement } from 'react';\n/**\n * 从组件事件中获取数据\n * @param e Event或者value\n * @returns value\n */\n\nexport function getValueFromEvent(e) {\n  // support custom element\n  if (!e || !e.target) {\n    return e;\n  }\n\n  var target = e.target;\n\n  if (target.type === 'checkbox') {\n    return target.checked;\n  } else if (target.type === 'radio') {\n    //兼容原生radioGroup\n    if (target.value) {\n      return target.value;\n    } else {\n      return target.checked;\n    }\n  }\n\n  return target.value;\n}\nexport function getErrorStrs(errors) {\n  if (errors) {\n    return errors.map(function (e) {\n      if ('message' in e) {\n        var message = e.message; // add key for jsx to ignore key warning\n\n        if (message && isValidElement(message) && !message.props.key) {\n          return cloneElement(message, {\n            key: 'error'\n          });\n        }\n\n        return message;\n      }\n\n      return e;\n    });\n  }\n\n  return errors;\n}\nexport function getParams(ns, cb) {\n  var names = typeof ns === 'string' ? [ns] : ns;\n  var callback = cb;\n\n  if (cb === undefined && typeof names === 'function') {\n    callback = names;\n    names = undefined;\n  }\n\n  return {\n    names: names,\n    callback: callback\n  };\n}\n\nvar setInWithPath = function setInWithPath(state, value, path, pathIndex) {\n  var _extends2;\n\n  if (pathIndex >= path.length) {\n    return value;\n  }\n\n  var first = path[pathIndex];\n  var next = setInWithPath(state && state[first], value, path, pathIndex + 1);\n\n  if (!state) {\n    var initialized = isNaN(first) ? {} : [];\n    initialized[first] = next;\n    return initialized;\n  }\n\n  if (Array.isArray(state)) {\n    var copy = [].concat(state);\n    copy[first] = next;\n    return copy;\n  }\n\n  return _extends({}, state, (_extends2 = {}, _extends2[first] = next, _extends2));\n};\n\nexport function setIn(state, name, value) {\n  return setInWithPath(state, value, name.replace(/\\[/, '.').replace(/\\]/, '').split('.'), 0);\n}\nexport function getIn(state, name) {\n  if (!state) {\n    return state;\n  }\n\n  var path = name.replace(/\\[/, '.').replace(/\\]/, '').split('.');\n  var length = path.length;\n\n  if (!length) {\n    return undefined;\n  }\n\n  var result = state;\n\n  for (var i = 0; i < length && !!result; ++i) {\n    result = result[path[i]];\n  }\n\n  return result;\n}\n\nfunction validateMap(rulesMap, rule, defaultTrigger) {\n  var nrule = _extends({}, rule);\n\n  if (!nrule.trigger) {\n    nrule.trigger = [defaultTrigger];\n  }\n\n  if (typeof nrule.trigger === 'string') {\n    nrule.trigger = [nrule.trigger];\n  }\n\n  for (var i = 0; i < nrule.trigger.length; i++) {\n    var trigger = nrule.trigger[i];\n\n    if (trigger in rulesMap) {\n      rulesMap[trigger].push(nrule);\n    } else {\n      rulesMap[trigger] = [nrule];\n    }\n  }\n\n  delete nrule.trigger;\n}\n/**\n * 提取rule里面的trigger并且做映射\n * @param  {Array} rules   规则\n * @param  {String} defaultTrigger 默认触发\n * @return {Object} {onChange:rule1, onBlur: rule2}\n */\n\n\nexport function mapValidateRules(rules, defaultTrigger) {\n  var rulesMap = {};\n  rules.forEach(function (rule) {\n    validateMap(rulesMap, rule, defaultTrigger);\n  });\n  return rulesMap;\n}","map":null,"metadata":{},"sourceType":"module"}