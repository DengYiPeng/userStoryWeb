{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nvar Line = (_temp = _class = function (_React$PureComponent) {\n  _inherits(Line, _React$PureComponent);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));\n  }\n\n  Line.prototype.render = function render() {\n    var _classNames, _classNames2;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        size = _props.size,\n        state = _props.state,\n        color = _props.color,\n        percent = _props.percent,\n        progressive = _props.progressive,\n        hasBorder = _props.hasBorder,\n        textRender = _props.textRender,\n        className = _props.className,\n        rtl = _props.rtl,\n        others = _objectWithoutProperties(_props, ['prefix', 'size', 'state', 'color', 'percent', 'progressive', 'hasBorder', 'textRender', 'className', 'rtl']);\n\n    var suffixText = textRender(percent, {\n      rtl: rtl\n    });\n    var wrapCls = classNames((_classNames = {}, _classNames[prefix + 'progress-line'] = true, _classNames[prefix + 'progress-line-show-info'] = suffixText, _classNames[prefix + 'progress-line-show-border'] = hasBorder, _classNames['' + (prefix + size)] = size, _classNames[className] = className, _classNames));\n    var lineCls = classNames((_classNames2 = {}, _classNames2[prefix + 'progress-line-overlay'] = true, _classNames2[prefix + 'progress-line-overlay-' + state] = !color && !progressive && state, _classNames2[prefix + 'progress-line-overlay-started'] = !color && progressive && percent <= 30, _classNames2[prefix + 'progress-line-overlay-middle'] = !color && progressive && percent > 30 && percent < 80, _classNames2[prefix + 'progress-line-overlay-finishing'] = !color && progressive && percent >= 80, _classNames2));\n    var lineStyle = {\n      width: percent + '%',\n      backgroundColor: color\n    };\n    return React.createElement('div', _extends({}, others, {\n      className: wrapCls,\n      dir: rtl ? 'rtl' : undefined\n    }), React.createElement('div', {\n      className: prefix + 'progress-line-container'\n    }, React.createElement('div', {\n      className: prefix + 'progress-line-underlay'\n    }, React.createElement('div', {\n      className: lineCls,\n      style: lineStyle\n    }))), suffixText ? React.createElement('div', {\n      className: prefix + 'progress-line-text'\n    }, suffixText) : null);\n  };\n\n  return Line;\n}(React.PureComponent), _class.propTypes = {\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  percent: PropTypes.number,\n  state: PropTypes.oneOf(['normal', 'success', 'error']),\n  progressive: PropTypes.bool,\n  hasBorder: PropTypes.bool,\n  textRender: PropTypes.func,\n  color: PropTypes.string,\n  rtl: PropTypes.bool\n}, _temp);\nexport { Line as default };","map":null,"metadata":{},"sourceType":"module"}