{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { func, dom } from '../util';\nimport Animate from './animate';\n\nvar noop = function noop() {};\n\nvar getStyle = dom.getStyle;\nvar Expand = (_temp = _class = function (_Component) {\n  _inherits(Expand, _Component);\n\n  function Expand(props) {\n    _classCallCheck(this, Expand);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    func.bindCtx(_this, ['beforeEnter', 'onEnter', 'afterEnter', 'beforeLeave', 'onLeave', 'afterLeave']);\n    return _this;\n  }\n\n  Expand.prototype.beforeEnter = function beforeEnter(node) {\n    if (this.leaving) {\n      this.afterLeave(node);\n    }\n\n    this.cacheCurrentStyle(node);\n    this.cacheComputedStyle(node);\n    this.setCurrentStyleToZero(node);\n    this.props.beforeEnter(node);\n  };\n\n  Expand.prototype.onEnter = function onEnter(node) {\n    this.setCurrentStyleToComputedStyle(node);\n    this.props.onEnter(node);\n  };\n\n  Expand.prototype.afterEnter = function afterEnter(node) {\n    this.restoreCurrentStyle(node);\n    this.props.afterEnter(node);\n  };\n\n  Expand.prototype.beforeLeave = function beforeLeave(node) {\n    this.leaving = true;\n    this.cacheCurrentStyle(node);\n    this.cacheComputedStyle(node);\n    this.setCurrentStyleToComputedStyle(node);\n    this.props.beforeLeave(node);\n  };\n\n  Expand.prototype.onLeave = function onLeave(node) {\n    this.setCurrentStyleToZero(node);\n    this.props.onLeave(node);\n  };\n\n  Expand.prototype.afterLeave = function afterLeave(node) {\n    this.leaving = false;\n    this.restoreCurrentStyle(node);\n    this.props.afterLeave(node);\n  };\n\n  Expand.prototype.cacheCurrentStyle = function cacheCurrentStyle(node) {\n    this.styleBorderTopWidth = node.style.borderTopWidth;\n    this.stylePaddingTop = node.style.paddingTop;\n    this.styleHeight = node.style.height;\n    this.stylePaddingBottom = node.style.paddingBottom;\n    this.styleBorderBottomWidth = node.style.borderBottomWidth;\n  };\n\n  Expand.prototype.cacheComputedStyle = function cacheComputedStyle(node) {\n    this.borderTopWidth = getStyle(node, 'borderTopWidth');\n    this.paddingTop = getStyle(node, 'paddingTop');\n    this.height = node.offsetHeight;\n    this.paddingBottom = getStyle(node, 'paddingBottom');\n    this.borderBottomWidth = getStyle(node, 'borderBottomWidth');\n  };\n\n  Expand.prototype.setCurrentStyleToZero = function setCurrentStyleToZero(node) {\n    node.style.borderTopWidth = '0px';\n    node.style.paddingTop = '0px';\n    node.style.height = '0px';\n    node.style.paddingBottom = '0px';\n    node.style.borderBottomWidth = '0px';\n  };\n\n  Expand.prototype.setCurrentStyleToComputedStyle = function setCurrentStyleToComputedStyle(node) {\n    node.style.borderTopWidth = this.borderTopWidth + 'px';\n    node.style.paddingTop = this.paddingTop + 'px';\n    node.style.height = this.height + 'px';\n    node.style.paddingBottom = this.paddingBottom + 'px';\n    node.style.borderBottomWidth = this.borderBottomWidth + 'px';\n  };\n\n  Expand.prototype.restoreCurrentStyle = function restoreCurrentStyle(node) {\n    node.style.borderTopWidth = this.styleBorderTopWidth;\n    node.style.paddingTop = this.stylePaddingTop;\n    node.style.height = this.styleHeight;\n    node.style.paddingBottom = this.stylePaddingBottom;\n    node.style.borderBottomWidth = this.styleBorderBottomWidth;\n  };\n\n  Expand.prototype.render = function render() {\n    var _props = this.props,\n        animation = _props.animation,\n        others = _objectWithoutProperties(_props, ['animation']);\n\n    var newAnimation = animation || 'expand';\n    return React.createElement(Animate, _extends({}, others, {\n      animation: newAnimation,\n      beforeEnter: this.beforeEnter,\n      onEnter: this.onEnter,\n      afterEnter: this.afterEnter,\n      beforeLeave: this.beforeLeave,\n      onLeave: this.onLeave,\n      afterLeave: this.afterLeave\n    }));\n  };\n\n  return Expand;\n}(Component), _class.propTypes = {\n  animation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  beforeEnter: PropTypes.func,\n  onEnter: PropTypes.func,\n  afterEnter: PropTypes.func,\n  beforeLeave: PropTypes.func,\n  onLeave: PropTypes.func,\n  afterLeave: PropTypes.func\n}, _class.defaultProps = {\n  beforeEnter: noop,\n  onEnter: noop,\n  afterEnter: noop,\n  beforeLeave: noop,\n  onLeave: noop,\n  afterLeave: noop\n}, _temp);\nExpand.displayName = 'Expand';\nexport { Expand as default };","map":null,"metadata":{},"sourceType":"module"}