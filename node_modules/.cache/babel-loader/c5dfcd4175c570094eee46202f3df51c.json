{"ast":null,"code":"var formatRegExp = /%[sdj%]/g;\nexport function format() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var i = 1;\n  var f = args[0];\n  var len = args.length;\n\n  if (typeof f === 'function') {\n    return f(args.slice(1));\n  }\n\n  if (typeof f === 'string') {\n    var str = String(f).replace(formatRegExp, function (x) {\n      if (x === '%%') {\n        return '%';\n      }\n\n      if (i >= len) {\n        return x;\n      }\n\n      switch (x) {\n        case '%s':\n          return String(args[i++]);\n\n        case '%d':\n          return Number(args[i++]);\n\n        case '%j':\n          try {\n            return JSON.stringify(args[i++]);\n          } catch (_) {\n            return '[Circular]';\n          }\n\n        default:\n          return x;\n      }\n    });\n    return str;\n  }\n\n  return f;\n}\n\nfunction asyncSerialArray(arr, func, callback) {\n  var index = 0;\n  var arrLength = arr.length;\n\n  function next(errors) {\n    if (errors && errors.length) {\n      callback(errors);\n      return;\n    }\n\n    var original = index;\n    index = index + 1;\n\n    if (original < arrLength) {\n      func(arr[original], next);\n    } else {\n      callback([]);\n    }\n  }\n\n  next([]);\n}\n/**\n * 平铺规则\n * @param  {object} objArr [description]\n * @return {Array}        [description]\n */\n\n\nfunction flattenObjArr(objArr) {\n  var ret = [];\n  Object.keys(objArr).forEach(function (k) {\n    Object.keys(objArr[k]).forEach(function (r) {\n      ret.push(objArr[k][r]);\n    });\n  });\n  return ret;\n}\n/**\n * 异步调用\n * @param  {map}   objArr   校验规则对象列表\n * @param  {object}   option   配置项\n * @param  {Function} func     每个校验规则\n * @param  {Function} callback 全部完成后的执行\n */\n\n\nexport function asyncMap(objArr, option, func, callback) {\n  // 发现第一个错误即返回\n  if (option.first) {\n    var flattenArr = flattenObjArr(objArr);\n    return asyncSerialArray(flattenArr, func, callback);\n  }\n\n  var objArrKeys = Object.keys(objArr);\n  var objArrLength = objArrKeys.length;\n  var total = 0;\n  var results = [];\n\n  var next = function next(errors) {\n    results.push(errors);\n    total++;\n\n    if (total === objArrLength) {\n      callback(results);\n    }\n  };\n\n  objArrKeys.forEach(function (key) {\n    var arr = objArr[key];\n    asyncSerialArray(arr, func, next);\n  });\n}\nexport function complementError(rule) {\n  return function (oe) {\n    if (oe && oe.message) {\n      oe.field = rule.field;\n      return oe;\n    }\n\n    return {\n      message: oe,\n      field: rule.field\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"module"}