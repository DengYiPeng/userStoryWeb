{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Checkbox from '../../checkbox';\nimport Search from '../../search';\nimport Menu from '../../menu';\nimport { func } from '../../util';\nimport TransferItem from './transfer-item';\nvar bindCtx = func.bindCtx;\nvar TransferPanel = (_temp = _class = function (_Component) {\n  _inherits(TransferPanel, _Component);\n\n  function TransferPanel(props, context) {\n    _classCallCheck(this, TransferPanel);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.state = {\n      searchedValue: '',\n      dragValue: null,\n      dragOverValue: null\n    };\n    bindCtx(_this, ['handleCheck', 'handleAllCheck', 'handleSearch', 'handleItemDragStart', 'handleItemDragOver', 'handleItemDragEnd', 'handleItemDrop', 'getListDOM']);\n    _this.firstRender = true;\n    return _this;\n  }\n\n  TransferPanel.prototype.componentDidMount = function componentDidMount() {\n    this.firstRender = false;\n  };\n\n  TransferPanel.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.dataSource.length !== this.props.dataSource.length && this.list) {\n      if (this.list.scrollTop > 0) {\n        this.list.scrollTop = 0;\n      }\n    }\n\n    this.searched = false;\n  };\n\n  TransferPanel.prototype.getListDOM = function getListDOM(ref) {\n    this.list = ref;\n  };\n\n  TransferPanel.prototype.handleAllCheck = function handleAllCheck(allChecked) {\n    var _props = this.props,\n        position = _props.position,\n        onChange = _props.onChange;\n    var newValue = void 0;\n\n    if (allChecked) {\n      newValue = this.enabledDatasource.map(function (item) {\n        return item.value;\n      });\n    } else {\n      newValue = [];\n    }\n\n    onChange && onChange(position, newValue);\n  };\n\n  TransferPanel.prototype.handleCheck = function handleCheck(itemValue, checked) {\n    var _props2 = this.props,\n        position = _props2.position,\n        value = _props2.value,\n        onChange = _props2.onChange;\n    var newValue = [].concat(value);\n    var index = value.indexOf(itemValue);\n\n    if (checked && index === -1) {\n      newValue.push(itemValue);\n    } else if (!checked && index > -1) {\n      newValue.splice(index, 1);\n    }\n\n    onChange && onChange(position, newValue);\n  };\n\n  TransferPanel.prototype.handleSearch = function handleSearch(searchedValue) {\n    this.setState({\n      searchedValue: searchedValue\n    });\n    this.searched = true;\n    var _props3 = this.props,\n        onSearch = _props3.onSearch,\n        position = _props3.position;\n    onSearch(searchedValue, position);\n  };\n\n  TransferPanel.prototype.handleItemDragStart = function handleItemDragStart(position, value) {\n    this.setState({\n      dragPosition: position,\n      dragValue: value\n    });\n  };\n\n  TransferPanel.prototype.handleItemDragOver = function handleItemDragOver(value) {\n    this.setState({\n      dragOverValue: value\n    });\n  };\n\n  TransferPanel.prototype.handleItemDragEnd = function handleItemDragEnd() {\n    this.setState({\n      dragOverValue: null\n    });\n  };\n\n  TransferPanel.prototype.handleItemDrop = function handleItemDrop() {\n    var _props4;\n\n    this.setState({\n      dragOverValue: null\n    });\n\n    (_props4 = this.props).onSort.apply(_props4, arguments);\n  };\n\n  TransferPanel.prototype.renderHeader = function renderHeader() {\n    var _props5 = this.props,\n        title = _props5.title,\n        prefix = _props5.prefix;\n    return React.createElement('div', {\n      className: prefix + 'transfer-panel-header'\n    }, title);\n  };\n\n  TransferPanel.prototype.renderSearch = function renderSearch() {\n    var _props6 = this.props,\n        prefix = _props6.prefix,\n        searchPlaceholder = _props6.searchPlaceholder,\n        locale = _props6.locale;\n    return React.createElement(Search, {\n      shape: 'simple',\n      className: prefix + 'transfer-panel-search',\n      placeholder: searchPlaceholder || locale.searchPlaceholder,\n      onChange: this.handleSearch\n    });\n  };\n\n  TransferPanel.prototype.renderList = function renderList(dataSource) {\n    var _cx,\n        _this2 = this;\n\n    var _props7 = this.props,\n        prefix = _props7.prefix,\n        position = _props7.position,\n        mode = _props7.mode,\n        value = _props7.value,\n        onMove = _props7.onMove,\n        disabled = _props7.disabled,\n        listClassName = _props7.listClassName,\n        listStyle = _props7.listStyle,\n        itemRender = _props7.itemRender,\n        sortable = _props7.sortable;\n    var _state = this.state,\n        dragPosition = _state.dragPosition,\n        dragValue = _state.dragValue,\n        dragOverValue = _state.dragOverValue;\n    var newClassName = cx((_cx = {}, _cx[prefix + 'transfer-panel-list'] = true, _cx[listClassName] = !!listClassName, _cx));\n    return dataSource.length ? React.createElement(Menu, {\n      className: newClassName,\n      style: listStyle,\n      ref: this.getListDOM\n    }, dataSource.map(function (item) {\n      return React.createElement(TransferItem, {\n        key: item.value,\n        prefix: prefix,\n        mode: mode,\n        checked: value.indexOf(item.value) > -1,\n        disabled: disabled || item.disabled,\n        item: item,\n        onCheck: _this2.handleCheck,\n        onClick: onMove,\n        needHighlight: !_this2.firstRender && !_this2.searched,\n        itemRender: itemRender,\n        draggable: sortable,\n        onDragStart: _this2.handleItemDragStart,\n        onDragOver: _this2.handleItemDragOver,\n        onDragEnd: _this2.handleItemDragEnd,\n        onDrop: _this2.handleItemDrop,\n        dragPosition: dragPosition,\n        dragValue: dragValue,\n        dragOverValue: dragOverValue,\n        panelPosition: position\n      });\n    })) : React.createElement('div', {\n      className: newClassName,\n      style: listStyle\n    }, this.renderNotFoundContent());\n  };\n\n  TransferPanel.prototype.renderNotFoundContent = function renderNotFoundContent() {\n    var _props8 = this.props,\n        prefix = _props8.prefix,\n        notFoundContent = _props8.notFoundContent;\n    return React.createElement('div', {\n      className: prefix + 'transfer-panel-not-found-container'\n    }, React.createElement('div', {\n      className: prefix + 'transfer-panel-not-found'\n    }, notFoundContent));\n  };\n\n  TransferPanel.prototype.renderFooter = function renderFooter() {\n    var _props9 = this.props,\n        prefix = _props9.prefix,\n        position = _props9.position,\n        mode = _props9.mode,\n        disabled = _props9.disabled,\n        locale = _props9.locale;\n\n    if (mode === 'simple') {\n      var _cx2;\n\n      var onMoveAll = this.props.onMoveAll;\n      var classNames = cx((_cx2 = {}, _cx2[prefix + 'transfer-panel-move-all'] = true, _cx2[prefix + 'disabled'] = disabled, _cx2));\n      return React.createElement('div', {\n        className: prefix + 'transfer-panel-footer'\n      }, React.createElement('a', {\n        className: classNames,\n        onClick: onMoveAll.bind(this, position === 'left' ? 'right' : 'left')\n      }, locale.moveAll));\n    }\n\n    var _props10 = this.props,\n        value = _props10.value,\n        dataSource = _props10.dataSource;\n    var checkedCount = value.length;\n    var totalCount = dataSource.length;\n    var totalEnabledCount = this.enabledDatasource.length;\n    var checked = checkedCount > 0 && checkedCount >= totalEnabledCount;\n    var indeterminate = checkedCount > 0 && checkedCount < totalEnabledCount;\n    var items = totalCount > 1 ? locale.items : locale.item;\n    var countLabel = checkedCount === 0 ? totalCount + ' ' + items : checkedCount + '/' + totalCount + ' ' + items;\n    return React.createElement('div', {\n      className: prefix + 'transfer-panel-footer'\n    }, React.createElement(Checkbox, {\n      disabled: disabled,\n      checked: checked,\n      indeterminate: indeterminate,\n      onChange: this.handleAllCheck\n    }), React.createElement('span', {\n      className: prefix + 'transfer-panel-count'\n    }, countLabel));\n  };\n\n  TransferPanel.prototype.render = function render() {\n    var _props11 = this.props,\n        prefix = _props11.prefix,\n        title = _props11.title,\n        showSearch = _props11.showSearch,\n        filter = _props11.filter;\n    var searchedValue = this.state.searchedValue;\n    var dataSource = this.props.dataSource;\n    this.enabledDatasource = dataSource.filter(function (item) {\n      return !item.disabled;\n    });\n\n    if (showSearch && searchedValue) {\n      dataSource = dataSource.filter(function (item) {\n        return filter(searchedValue, item);\n      });\n    }\n\n    return React.createElement('div', {\n      className: prefix + 'transfer-panel'\n    }, title ? this.renderHeader() : null, showSearch ? this.renderSearch() : null, this.renderList(dataSource), this.renderFooter());\n  };\n\n  return TransferPanel;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  position: PropTypes.oneOf(['left', 'right']),\n  mode: PropTypes.oneOf(['normal', 'simple']),\n  dataSource: PropTypes.array,\n  value: PropTypes.array,\n  onChange: PropTypes.func,\n  onMove: PropTypes.func,\n  onMoveAll: PropTypes.func,\n  disabled: PropTypes.bool,\n  locale: PropTypes.object,\n  title: PropTypes.string,\n  showSearch: PropTypes.bool,\n  filter: PropTypes.func,\n  onSearch: PropTypes.func,\n  searchPlaceholder: PropTypes.string,\n  notFoundContent: PropTypes.node,\n  listClassName: PropTypes.string,\n  listStyle: PropTypes.object,\n  itemRender: PropTypes.func,\n  sortable: PropTypes.bool,\n  onSort: PropTypes.func\n}, _temp);\nTransferPanel.displayName = 'TransferPanel';\nexport { TransferPanel as default };","map":null,"metadata":{},"sourceType":"module"}