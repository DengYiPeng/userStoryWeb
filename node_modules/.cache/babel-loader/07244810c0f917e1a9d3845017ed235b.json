{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _initialiseProps;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Input from '../input';\nimport Select from '../select';\nimport Button from '../button';\nimport Icon from '../icon';\nimport { obj, func, KEYCODE } from '../util';\nvar Group = Input.Group;\nvar AutoComplete = Select.AutoComplete;\n/**\n * Search\n * @description 输入框部分继承 Select.AutoComplete 的能力，可以直接用AutoComplete 的 api\n */\n\nvar Search = (_temp = _class = function (_React$Component) {\n  _inherits(Search, _React$Component);\n\n  function Search(props) {\n    _classCallCheck(this, Search);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var value = 'value' in props ? props.value : props.defaultValue;\n    var filterValue = 'filterValue' in props ? props.filterValue : props.defaultFilterValue;\n    _this.state = {\n      value: typeof value === 'undefined' ? '' : value,\n      filterValue: filterValue\n    };\n    return _this;\n  }\n\n  Search.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var state = {};\n\n    if ('value' in nextProps) {\n      state.value = typeof nextProps.value === 'undefined' ? '' : nextProps.value;\n    }\n\n    if ('filterValue' in nextProps) {\n      state.filterValue = typeof nextProps.filterValue === 'undefined' ? '' : nextProps.filterValue;\n    }\n\n    this.setState(state);\n  };\n\n  Search.prototype.render = function render() {\n    var _classNames;\n\n    var _props = this.props,\n        shape = _props.shape,\n        filter = _props.filter,\n        hasIcon = _props.hasIcon,\n        placeholder = _props.placeholder,\n        type = _props.type,\n        className = _props.className,\n        style = _props.style,\n        size = _props.size,\n        prefix = _props.prefix,\n        searchText = _props.searchText,\n        dataSource = _props.dataSource,\n        filterProps = _props.filterProps,\n        buttonProps = _props.buttonProps,\n        popupContent = _props.popupContent,\n        hasClear = _props.hasClear,\n        visible = _props.visible,\n        rtl = _props.rtl,\n        others = _objectWithoutProperties(_props, ['shape', 'filter', 'hasIcon', 'placeholder', 'type', 'className', 'style', 'size', 'prefix', 'searchText', 'dataSource', 'filterProps', 'buttonProps', 'popupContent', 'hasClear', 'visible', 'rtl']);\n\n    var cls = classNames((_classNames = {}, _classNames[prefix + 'search'] = true, _classNames[prefix + 'search-' + shape] = true, _classNames['' + prefix + type] = type, _classNames['' + prefix + size] = size, _classNames[className] = !!className, _classNames));\n    var searchIcon = null,\n        filterSelect = null,\n        searchBtn = null;\n\n    if (shape === 'simple') {\n      var _classNames2;\n\n      var _cls = classNames((_classNames2 = {}, _classNames2[prefix + 'search-icon'] = true, _classNames2[buttonProps.className] = !!buttonProps.className, _classNames2));\n\n      searchIcon = React.createElement(Icon, _extends({}, buttonProps, {\n        type: 'search',\n        tabIndex: '0',\n        role: 'button',\n        className: _cls,\n        onClick: this.onSearch,\n        onKeyDown: this.onKeyDown\n      }));\n    } else {\n      var _classNames3;\n\n      var _cls2 = classNames((_classNames3 = {}, _classNames3[prefix + 'search-btn'] = true, _classNames3[buttonProps.className] = !!buttonProps.className, _classNames3));\n\n      searchBtn = React.createElement(Button, _extends({}, buttonProps, {\n        tabIndex: '0',\n        className: _cls2,\n        onClick: this.onSearch,\n        onKeyDown: this.onKeyDown\n      }), hasIcon ? React.createElement(Icon, {\n        type: 'search'\n      }) : null, searchText ? React.createElement('span', {\n        className: prefix + 'search-btn-text'\n      }, searchText) : null);\n    }\n\n    if (filter.length > 0) {\n      filterSelect = React.createElement(Select, _extends({}, filterProps, {\n        hasBorder: false,\n        dataSource: filter,\n        size: size,\n        value: this.state.filterValue,\n        onChange: this.onFilterChange\n      }));\n    }\n\n    var othersAttributes = obj.pickOthers(Search.propTypes, others);\n\n    if (visible !== undefined) {\n      // 受控属性 visible 不能直接写在组件上\n      othersAttributes.visible = Boolean(visible);\n    }\n\n    var dataAttr = obj.pickAttrsWith(others, 'data-');\n    var left = React.createElement(Group, {\n      addonBefore: filterSelect,\n      className: prefix + 'search-left',\n      addonBeforeClassName: prefix + 'search-left-addon'\n    }, React.createElement(AutoComplete, _extends({}, othersAttributes, {\n      hasClear: hasClear,\n      className: prefix + 'search-input',\n      size: size,\n      placeholder: placeholder,\n      dataSource: dataSource,\n      innerAfter: searchIcon,\n      onPressEnter: this.onSearch,\n      value: this.state.value,\n      onChange: this.onChange,\n      popupContent: popupContent\n    })));\n    return React.createElement('span', _extends({\n      className: cls,\n      style: style\n    }, dataAttr, {\n      dir: rtl ? 'rtl' : undefined\n    }), searchBtn ? React.createElement(Group, {\n      addonAfter: searchBtn\n    }, left) : left);\n  };\n\n  return Search;\n}(React.Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 形状\n   */\n  shape: PropTypes.oneOf(['normal', 'simple']),\n\n  /**\n   * 类型 shape=normal: primary/secondary; shape=simple: normal/dark;\n   */\n  type: PropTypes.oneOf(['primary', 'secondary', 'normal', 'dark']),\n\n  /**\n   * 大小\n   * @enumdesc '大', '小'\n   */\n  size: PropTypes.oneOf(['large', 'medium']),\n\n  /**\n   * 搜索框默认值\n   */\n  defaultValue: PropTypes.string,\n\n  /**\n   * 搜索框数值\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * 输入关键字时的回掉\n   * @param {Object} value 输入值\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 点击搜索按钮触发的回调\n   * @param {Object} value 输入值\n   */\n  onSearch: PropTypes.func,\n\n  /**\n   * 选择器默认值\n   */\n  defaultFilterValue: PropTypes.string,\n\n  /**\n   * 选择器\n   */\n  filter: PropTypes.array,\n\n  /**\n   * 选择器值\n   */\n  filterValue: PropTypes.string,\n\n  /**\n   * 选择器发生变化时回调\n   * @param {Object} filter value\n   */\n  onFilterChange: PropTypes.func,\n\n  /**\n   * 搜索框下拉联想列表\n   */\n  dataSource: PropTypes.array,\n\n  /**\n   * 默认提示\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * button 的内容\n   */\n  searchText: PropTypes.node,\n\n  /**\n   * 自定义样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 样式名称\n   */\n  className: PropTypes.string,\n\n  /**\n   * 选择器的props\n   */\n  filterProps: PropTypes.object,\n\n  /**\n   * 按钮的额外属性\n   */\n  buttonProps: PropTypes.object,\n\n  /**\n   * 自定义渲染的的下拉框\n   */\n  popupContent: PropTypes.node,\n\n  /**\n   * 自定义渲染的的下拉框\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 是否显示清除按钮\n   */\n  hasClear: PropTypes.bool,\n  locale: PropTypes.object,\n  rtl: PropTypes.bool\n}, _class.defaultProps = {\n  prefix: 'next-',\n  shape: 'normal',\n  type: 'normal',\n  size: 'medium',\n  hasIcon: true,\n  filter: [],\n  buttonProps: {},\n  onChange: func.noop,\n  onSearch: func.noop,\n  onFilterChange: func.noop,\n  hasClear: false\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onChange = function (value) {\n    if (!('value' in _this2.props)) {\n      _this2.setState({\n        value: value\n      });\n    }\n\n    _this2.props.onChange(value);\n  };\n\n  this.onSearch = function () {\n    _this2.props.onSearch(_this2.state.value, _this2.state.filterValue);\n  };\n\n  this.onFilterChange = function (filterValue) {\n    if (!('filterValue' in _this2.props)) {\n      _this2.setState({\n        filterValue: filterValue\n      });\n    }\n\n    _this2.props.onFilterChange(filterValue);\n  };\n\n  this.onKeyDown = function (e) {\n    if (e.keyCode !== KEYCODE.ENTER) {\n      return;\n    }\n\n    _this2.onSearch();\n  };\n}, _temp);\nSearch.displayName = 'Search';\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}