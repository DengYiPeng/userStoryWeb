{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _extends from 'babel-runtime/helpers/extends';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { dom } from '../../util';\n/**\n * Slider Track\n * 内容轨道\n */\n\nvar getSlideClasses = function getSlideClasses(specProps) {\n  var _classNames;\n\n  var prefix = specProps.prefix;\n  var slickActive = void 0,\n      slickCenter = void 0;\n  var centerOffset = void 0,\n      index = void 0;\n\n  if (specProps.rtl) {\n    index = specProps.slideCount - 1 - specProps.activeIndex;\n  } else {\n    index = specProps.activeIndex;\n  }\n\n  var slickCloned = index < 0 || index >= specProps.slideCount;\n\n  if (specProps.centerMode) {\n    centerOffset = Math.floor(specProps.slidesToShow / 2);\n    slickCenter = (index - specProps.currentSlide) % specProps.slideCount === 0;\n\n    if (index > specProps.currentSlide - centerOffset - 1 && index <= specProps.currentSlide + centerOffset) {\n      slickActive = true;\n    }\n  } else {\n    slickActive = specProps.currentSlide <= index && index < specProps.currentSlide + specProps.slidesToShow;\n  }\n\n  return classNames(prefix + 'slick-slide', (_classNames = {}, _classNames[prefix + 'slick-active'] = slickActive, _classNames[prefix + 'slick-center'] = slickCenter, _classNames[prefix + 'slick-cloned'] = slickCloned, _classNames));\n};\n\nvar getSlideStyle = function getSlideStyle(specProps) {\n  var style = {};\n\n  if (specProps.variableWidth === undefined || specProps.variableWidth === false) {\n    style.width = specProps.slideWidth;\n  }\n\n  if (specProps.animation === 'fade') {\n    style.position = 'relative';\n    style.opacity = specProps.currentSlide === specProps.activeIndex ? 1 : 0;\n    style.visibility = specProps.currentSlide >= specProps.activeIndex ? 'visible' : 'hidden';\n    style.transition = 'opacity ' + specProps.speed + 'ms ' + specProps.cssEase;\n    style.WebkitTransition = 'opacity ' + specProps.speed + 'ms ' + specProps.cssEase;\n\n    if (specProps.vertical) {\n      style.top = -specProps.activeIndex * specProps.slideHeight;\n    } else {\n      style.left = -specProps.activeIndex * specProps.slideWidth;\n    }\n  }\n\n  return style;\n};\n\nvar getKey = function getKey(child, fallbackKey) {\n  // key could be a zero\n  return child.key === null || child.key === undefined ? fallbackKey : child.key;\n};\n\nvar renderSlides = function renderSlides(specProps) {\n  var key = void 0;\n  var slides = [];\n  var preCloneSlides = [];\n  var postCloneSlides = [];\n  var count = React.Children.count(specProps.children);\n  var child = void 0;\n  React.Children.forEach(specProps.children, function (elem, index) {\n    var childOnClickOptions = {\n      message: 'children',\n      index: index,\n      slidesToScroll: specProps.slidesToScroll,\n      currentSlide: specProps.currentSlide\n    };\n\n    if (!specProps.lazyLoad | (specProps.lazyLoad && specProps.lazyLoadedList.indexOf(index) >= 0)) {\n      child = elem;\n    } else {\n      child = elem.key ? React.createElement('div', {\n        key: elem.key\n      }) : React.createElement('div', null);\n    }\n\n    var childStyle = getSlideStyle(_extends({}, specProps, {\n      activeIndex: index\n    }));\n    var slickClasses = getSlideClasses(_extends({\n      activeIndex: index\n    }, specProps));\n    var cssClasses = void 0;\n\n    if (child.props.className) {\n      cssClasses = classNames(slickClasses, child.props.className);\n    } else {\n      cssClasses = slickClasses;\n    }\n\n    var onClick = function onClick(e) {\n      // only child === elem, it will has .props.onClick;\n      child.props && child.props.onClick && elem.props.onClick(e);\n\n      if (specProps.focusOnSelect) {\n        specProps.focusOnSelect(childOnClickOptions);\n      }\n    };\n\n    slides.push(React.cloneElement(child, {\n      key: 'original' + getKey(child, index),\n      'data-index': index,\n      className: cssClasses,\n      tabIndex: '-1',\n      // server-side render depend on elements of their own style\n      style: !dom.hasDOM ? _extends({\n        outline: 'none'\n      }, childStyle, child.props.style) : _extends({\n        outline: 'none'\n      }, child.props.style, childStyle),\n      onClick: onClick\n    })); // variableWidth doesn't wrap properly.\n\n    if (specProps.infinite && specProps.animation !== 'fade') {\n      var infiniteCount = specProps.variableWidth ? specProps.slidesToShow + 1 : specProps.slidesToShow;\n\n      if (index >= count - infiniteCount) {\n        key = -(count - index);\n        preCloneSlides.push(React.cloneElement(child, {\n          key: 'precloned' + getKey(child, key),\n          'data-index': key,\n          className: cssClasses,\n          style: _extends({}, child.props.style, childStyle)\n        }));\n      }\n\n      if (index < infiniteCount) {\n        key = count + index;\n        postCloneSlides.push(React.cloneElement(child, {\n          key: 'postcloned' + getKey(child, key),\n          'data-index': key,\n          className: cssClasses,\n          style: _extends({}, child.props.style, childStyle)\n        }));\n      }\n    }\n  }); // To support server-side rendering\n\n  if (!dom.hasDOM) {\n    return slides.slice(specProps.currentSlide, specProps.currentSlide + specProps.slidesToShow);\n  }\n\n  if (specProps.rtl) {\n    return preCloneSlides.concat(slides, postCloneSlides).reverse();\n  } else {\n    return preCloneSlides.concat(slides, postCloneSlides);\n  }\n};\n\nvar Track = (_temp = _class = function (_Component) {\n  _inherits(Track, _Component);\n\n  function Track() {\n    _classCallCheck(this, Track);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Track.prototype.render = function render() {\n    var slides = renderSlides(this.props);\n    return React.createElement('div', {\n      className: this.props.prefix + 'slick-track',\n      style: this.props.trackStyle\n    }, slides);\n  };\n\n  return Track;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  trackStyle: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-'\n}, _temp);\nTrack.displayName = 'Track';\nexport { Track as default };","map":null,"metadata":{},"sourceType":"module"}