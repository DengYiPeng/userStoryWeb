{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ConfigProvider from '../config-provider';\nimport { obj } from '../util';\nimport Radio from './radio';\nvar pickOthers = obj.pickOthers;\n/**\n * Radio.Group\n * @order 2\n */\n\nvar RadioGroup = (_temp = _class = function (_Component) {\n  _inherits(RadioGroup, _Component);\n\n  function RadioGroup(props) {\n    _classCallCheck(this, RadioGroup);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    var value = '';\n\n    if ('value' in props) {\n      value = props.value;\n    } else if ('defaultValue' in props) {\n      value = props.defaultValue;\n    }\n\n    _this.state = {\n      value: value\n    };\n    _this.onChange = _this.onChange.bind(_this);\n    return _this;\n  }\n\n  RadioGroup.prototype.getChildContext = function getChildContext() {\n    return {\n      __group__: true,\n      isButton: this.props.shape === 'button',\n      onChange: this.onChange,\n      selectedValue: this.state.value,\n      disabled: this.props.disabled\n    };\n  };\n\n  RadioGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var value = nextProps.value;\n\n    if ('value' in nextProps) {\n      if (value === undefined) {\n        value = '';\n      }\n\n      this.setState({\n        value: value\n      });\n    }\n  };\n\n  RadioGroup.prototype.onChange = function onChange(currentValue, e) {\n    if (!('value' in this.props)) {\n      this.setState({\n        value: currentValue\n      });\n    }\n\n    if (currentValue !== this.state.value) {\n      this.props.onChange(currentValue, e);\n    }\n  };\n\n  RadioGroup.prototype.render = function render() {\n    var _this2 = this,\n        _classnames;\n\n    var _props = this.props,\n        rtl = _props.rtl,\n        className = _props.className,\n        shape = _props.shape,\n        size = _props.size,\n        style = _props.style,\n        prefix = _props.prefix,\n        itemDirection = _props.itemDirection;\n    var others = pickOthers(Object.keys(RadioGroup.propTypes), this.props);\n    var disabled = this.props.disabled;\n\n    if (rtl) {\n      others.dir = 'rtl';\n    }\n\n    var children = void 0;\n\n    if (this.props.children) {\n      children = this.props.children;\n    } else {\n      children = this.props.dataSource.map(function (item, index) {\n        var option = item;\n\n        if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== 'object') {\n          option = {\n            label: item,\n            value: item,\n            disabled: disabled\n          };\n        }\n\n        var checked = _this2.state.value === option.value;\n        return React.createElement(Radio, {\n          key: index,\n          tabIndex: index === 0 && !_this2.state.value || checked ? 0 : -1,\n          value: option.value,\n          checked: checked,\n          label: option.label,\n          disabled: disabled || option.disabled\n        });\n      });\n    }\n\n    var isButtonShape = shape === 'button';\n    var cls = classnames((_classnames = {}, _classnames[prefix + 'radio-group'] = true, _classnames[prefix + 'radio-group-' + itemDirection] = !isButtonShape, _classnames[prefix + 'radio-button'] = isButtonShape, _classnames[prefix + 'radio-button-' + size] = isButtonShape, _classnames[className] = !!className, _classnames.disabled = disabled, _classnames));\n    return React.createElement('div', _extends({}, others, {\n      'aria-disabled': disabled,\n      role: 'radiogroup',\n      className: cls,\n      style: style\n    }), children);\n  };\n\n  return RadioGroup;\n}(Component), _class.propTypes = {\n  /**\n   * 样式类名的品牌前缀\n   */\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 自定义类名\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内敛样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * name\n   */\n  name: PropTypes.string,\n\n  /**\n   * radio group的选中项的值\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n\n  /**\n   * radio group的默认值\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n\n  /**\n   * 选中值改变时的事件\n   * @param {String/Number} value 选中项的值\n   * @param {Event} e Dom 事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 表示radio被禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 可以设置成 button 展示形状\n   * @enumdesc 按钮状\n   */\n  shape: PropTypes.oneOf(['button']),\n\n  /**\n   * 与 `shape` 属性配套使用，shape设为button时有效\n   * @enumdesc 大, 中, 小\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`\n   */\n  dataSource: PropTypes.arrayOf(PropTypes.any),\n\n  /**\n   * 通过子元素方式设置内部radio\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]),\n\n  /**\n   * 子项目的排列方式\n   * - hoz: 水平排列 (default)\n   * - ver: 垂直排列\n   */\n  itemDirection: PropTypes.oneOf(['hoz', 'ver'])\n}, _class.defaultProps = {\n  dataSource: [],\n  size: 'medium',\n  onChange: function onChange() {},\n  prefix: 'next-',\n  itemDirection: 'hoz'\n}, _class.childContextTypes = {\n  onChange: PropTypes.func,\n  __group__: PropTypes.bool,\n  isButton: PropTypes.bool,\n  selectedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n  disabled: PropTypes.bool\n}, _temp);\nRadioGroup.displayName = 'RadioGroup';\nexport default ConfigProvider.config(RadioGroup);","map":null,"metadata":{},"sourceType":"module"}