{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../../icon';\nimport { obj, func } from '../../util';\n/**\n * slider arrow\n * 左右控制箭头\n */\n\nvar noop = func.noop;\nvar Arrow = (_temp = _class = function (_Component) {\n  _inherits(Arrow, _Component);\n\n  function Arrow() {\n    _classCallCheck(this, Arrow);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Arrow.isDisabled = function isDisabled(props) {\n    var infinite = props.infinite,\n        type = props.type,\n        centerMode = props.centerMode,\n        currentSlide = props.currentSlide,\n        slideCount = props.slideCount,\n        slidesToShow = props.slidesToShow;\n\n    if (infinite) {\n      return false;\n    } // 下一个 index 大于总数？？\n\n\n    if (slideCount <= slidesToShow) {\n      return true;\n    } // 向前箭头：当前是第 0 个\n\n\n    if (type === 'prev') {\n      return currentSlide <= 0;\n    }\n\n    if (centerMode && currentSlide >= slideCount - 1) {\n      // 向后箭头：居中模式，当前 index 大于最大 index\n      return true;\n    } else if (currentSlide >= slideCount - slidesToShow) {\n      // 向后箭头：普通模式，当前 index 大于 总数 - 下一个 index ？？？\n      return true;\n    }\n\n    return false;\n  };\n\n  Arrow.prototype.handleClick = function handleClick(options, e) {\n    e && e.preventDefault(); // TODO hack\n\n    if (options.message === 'prev') {\n      options.message = 'previous';\n    }\n\n    this.props.clickHandler(options, e);\n  };\n\n  Arrow.prototype.render = function render() {\n    var _props = this.props,\n        prefix = _props.prefix,\n        type = _props.type,\n        arrowSize = _props.arrowSize,\n        arrowPosition = _props.arrowPosition,\n        arrowDirection = _props.arrowDirection,\n        onMouseEnter = _props.onMouseEnter,\n        onMouseLeave = _props.onMouseLeave,\n        children = _props.children;\n    var others = obj.pickOthers(Arrow.propTypes, this.props);\n    var iconType = Arrow.ARROW_ICON_TYPES[arrowDirection][type];\n    var disabled = Arrow.isDisabled(this.props);\n    var arrowClazz = classNames([prefix + 'slick-arrow', prefix + 'slick-' + type, arrowPosition, arrowSize, arrowDirection], {\n      disabled: disabled\n    });\n\n    var arrowProps = _extends({}, others, {\n      key: type,\n      'data-role': 'none',\n      className: arrowClazz,\n      style: {\n        display: 'block'\n      },\n      onClick: disabled ? null : this.handleClick.bind(this, {\n        message: type\n      }),\n      onMouseEnter: disabled ? null : onMouseEnter,\n      onMouseLeave: disabled ? null : onMouseLeave\n    });\n\n    if (children) {\n      return React.cloneElement(React.Children.only(children), arrowProps);\n    } else {\n      return React.createElement('div', arrowProps, React.createElement(Icon, {\n        type: iconType\n      }));\n    }\n  };\n\n  return Arrow;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n  type: PropTypes.oneOf(['prev', 'next']).isRequired,\n  centerMode: PropTypes.bool,\n  currentSlide: PropTypes.number,\n  infinite: PropTypes.bool,\n  clickHandler: PropTypes.func,\n  slideCount: PropTypes.number,\n  slidesToShow: PropTypes.number,\n  arrow: PropTypes.element,\n  arrowSize: PropTypes.string,\n  arrowPosition: PropTypes.string,\n  arrowDirection: PropTypes.oneOf(['hoz', 'ver']),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  children: PropTypes.node\n}, _class.defaultProps = {\n  onMouseEnter: noop,\n  onMouseLeave: noop\n}, _class.ARROW_ICON_TYPES = {\n  hoz: {\n    prev: 'arrow-left',\n    next: 'arrow-right'\n  },\n  ver: {\n    prev: 'arrow-up',\n    next: 'arrow-down'\n  }\n}, _temp);\nArrow.displayName = 'Arrow';\nexport { Arrow as default };","map":null,"metadata":{},"sourceType":"module"}