{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from '../select';\nimport Cascader from '../cascader';\nimport Menu from '../menu';\nimport { func, obj, dom } from '../util';\nvar bindCtx = func.bindCtx;\nvar pickOthers = obj.pickOthers;\nvar getStyle = dom.getStyle;\n/**\n * CascaderSelect\n */\n\nvar CascaderSelect = (_temp = _class = function (_Component) {\n  _inherits(CascaderSelect, _Component);\n\n  function CascaderSelect(props, context) {\n    _classCallCheck(this, CascaderSelect);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.state = {\n      value: _this.normalizeValue('value' in props ? props.value : props.defaultValue),\n      searchValue: '',\n      visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible\n    };\n    bindCtx(_this, ['handleVisibleChange', 'handleAfterOpen', 'handleChange', 'handleClear', 'handleRemove', 'handleSearch', 'getPopup']);\n    return _this;\n  }\n\n  CascaderSelect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var st = {};\n\n    if ('value' in nextProps) {\n      st.value = this.normalizeValue(nextProps.value);\n    }\n\n    if ('visible' in nextProps) {\n      st.visible = nextProps.visible;\n    }\n\n    if (Object.keys(st).length) {\n      this.setState(st);\n    }\n  };\n\n  CascaderSelect.prototype.normalizeValue = function normalizeValue(value) {\n    if (value) {\n      if (Array.isArray(value)) {\n        return value;\n      }\n\n      return [value];\n    }\n\n    return [];\n  };\n\n  CascaderSelect.prototype.updateCache = function updateCache(dataSource) {\n    var _this2 = this;\n\n    this._v2n = {};\n    this._p2n = {};\n\n    var loop = function loop(data) {\n      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n      return data.forEach(function (item, index) {\n        var value = item.value,\n            children = item.children;\n        var pos = prefix + '-' + index;\n        _this2._v2n[value] = _this2._p2n[pos] = _extends({}, item, {\n          pos: pos\n        });\n\n        if (children && children.length) {\n          loop(children, pos);\n        }\n      });\n    };\n\n    loop(dataSource);\n  };\n\n  CascaderSelect.prototype.flatValue = function flatValue(value) {\n    var _this3 = this;\n\n    var getDepth = function getDepth(v) {\n      var pos = _this3.getPos(v);\n\n      if (!pos) {\n        return 0;\n      }\n\n      return pos.split('-').length;\n    };\n\n    var newValue = value.slice(0).sort(function (prev, next) {\n      return getDepth(prev) - getDepth(next);\n    });\n\n    for (var i = 0; i < newValue.length; i++) {\n      for (var j = 0; j < newValue.length; j++) {\n        if (i !== j && this.isDescendantOrSelf(this.getPos(newValue[i]), this.getPos(newValue[j]))) {\n          newValue.splice(j, 1);\n          j--;\n        }\n      }\n    }\n\n    return newValue;\n  };\n\n  CascaderSelect.prototype.isDescendantOrSelf = function isDescendantOrSelf(currentPos, targetPos) {\n    if (!currentPos || !targetPos) {\n      return false;\n    }\n\n    var currentNums = currentPos.split('-');\n    var targetNums = targetPos.split('-');\n    return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {\n      return num === targetNums[index];\n    });\n  };\n\n  CascaderSelect.prototype.getValue = function getValue(pos) {\n    return this._p2n[pos] ? this._p2n[pos].value : null;\n  };\n\n  CascaderSelect.prototype.getPos = function getPos(value) {\n    return this._v2n[value] ? this._v2n[value].pos : null;\n  };\n\n  CascaderSelect.prototype.getData = function getData(value) {\n    var _this4 = this;\n\n    return value.map(function (v) {\n      return _this4._v2n[v];\n    });\n  };\n\n  CascaderSelect.prototype.getLabelPath = function getLabelPath(data) {\n    var _this5 = this;\n\n    var nums = data.pos.split('-');\n    return nums.slice(1).reduce(function (ret, num, index) {\n      var p = nums.slice(0, index + 2).join('-');\n      ret.push(_this5._p2n[p].label);\n      return ret;\n    }, []);\n  };\n\n  CascaderSelect.prototype.getSignleData = function getSignleData(value) {\n    if (!value.length) {\n      return null;\n    }\n\n    var data = this._v2n[value];\n\n    if (!data) {\n      return null;\n    }\n\n    var labelPath = this.getLabelPath(data);\n\n    var displayRender = this.props.displayRender || function (labels) {\n      return labels.join(' / ');\n    };\n\n    return _extends({}, data, {\n      label: displayRender(labelPath, data)\n    });\n  };\n\n  CascaderSelect.prototype.getMultipleData = function getMultipleData(value) {\n    var _this6 = this;\n\n    var _props = this.props,\n        checkStrictly = _props.checkStrictly,\n        canOnlyCheckLeaf = _props.canOnlyCheckLeaf,\n        displayRender = _props.displayRender;\n    var data = this.getData(checkStrictly || canOnlyCheckLeaf ? value : this.flatValue(value));\n\n    if (displayRender) {\n      data = data.map(function (item) {\n        var labelPath = _this6.getLabelPath(item);\n\n        return _extends({}, item, {\n          label: displayRender(labelPath, item)\n        });\n      });\n    }\n\n    return data;\n  };\n\n  CascaderSelect.prototype.getIndeterminate = function getIndeterminate(value) {\n    var _this7 = this;\n\n    var indeterminate = [];\n    var positions = value.map(this.getPos.bind(this));\n    positions.forEach(function (pos) {\n      var nums = pos.split('-');\n\n      for (var i = nums.length; i > 2; i--) {\n        var parentPos = nums.slice(0, i - 1).join('-');\n\n        var parentValue = _this7.getValue(parentPos);\n\n        if (indeterminate.indexOf(parentValue) === -1) {\n          indeterminate.push(parentValue);\n        }\n      }\n    });\n    return indeterminate;\n  };\n\n  CascaderSelect.prototype.completeValue = function completeValue(value) {\n    var newValue = [];\n    var flatValue = this.flatValue(value).reverse();\n    var ps = Object.keys(this._p2n);\n\n    for (var i = 0; i < ps.length; i++) {\n      for (var j = 0; j < flatValue.length; j++) {\n        var v = flatValue[j];\n\n        if (this.isDescendantOrSelf(this.getPos(v), ps[i])) {\n          newValue.push(this.getValue(ps[i]));\n          ps.splice(i, 1);\n          i--;\n          break;\n        }\n      }\n    }\n\n    return newValue;\n  };\n\n  CascaderSelect.prototype.isLeaf = function isLeaf(data) {\n    return !(data.children && data.children.length || !!this.props.loadData && !data.isLeaf);\n  };\n\n  CascaderSelect.prototype.handleVisibleChange = function handleVisibleChange(visible, type) {\n    if (!('visible' in this.props)) {\n      this.setState({\n        visible: visible\n      });\n    }\n\n    this.props.onVisibleChange(visible, type);\n  };\n\n  CascaderSelect.prototype.getPopup = function getPopup(ref) {\n    this.popup = ref;\n\n    if (typeof this.props.popupProps.ref === 'function') {\n      this.props.popupProps.ref(ref);\n    }\n  };\n\n  CascaderSelect.prototype.handleAfterOpen = function handleAfterOpen() {\n    if (!this.popup) {\n      return;\n    }\n\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        popupProps = _props2.popupProps;\n    var dropDownNode = this.popup.getInstance().overlay.getInstance().getContentNode();\n    var cascaderNode = dropDownNode.querySelector('.' + prefix + 'cascader');\n\n    if (cascaderNode) {\n      this.cascaderHeight = getStyle(cascaderNode, 'height');\n    }\n\n    if (typeof popupProps.afterOpen === 'function') {\n      popupProps.afterOpen();\n    }\n  };\n\n  CascaderSelect.prototype.handleChange = function handleChange(value, data, extra) {\n    var _props3 = this.props,\n        multiple = _props3.multiple,\n        changeOnSelect = _props3.changeOnSelect,\n        onChange = _props3.onChange;\n    var _state = this.state,\n        visible = _state.visible,\n        searchValue = _state.searchValue;\n    var st = {};\n\n    if (!multiple && (!changeOnSelect || this.isLeaf(data) || !!searchValue)) {\n      this.handleVisibleChange(!visible, 'fromCascader');\n    }\n\n    if (!('value' in this.props)) {\n      st.value = value;\n    }\n\n    if (!multiple && searchValue) {\n      st.searchValue = '';\n    }\n\n    if (Object.keys(st).length) {\n      this.setState(st);\n    }\n\n    if (onChange) {\n      onChange(value, data, extra);\n    }\n  };\n\n  CascaderSelect.prototype.handleClear = function handleClear() {\n    // 单选时点击清空按钮\n    var _props4 = this.props,\n        hasClear = _props4.hasClear,\n        multiple = _props4.multiple,\n        treeCheckable = _props4.treeCheckable;\n\n    if (hasClear && (!multiple || !treeCheckable)) {\n      if (!('value' in this.props)) {\n        this.setState({\n          value: []\n        });\n      }\n\n      this.props.onChange(null, null);\n    }\n  };\n\n  CascaderSelect.prototype.handleRemove = function handleRemove(currentData) {\n    var currentValue = currentData.value;\n    var value = void 0;\n    var _props5 = this.props,\n        multiple = _props5.multiple,\n        checkStrictly = _props5.checkStrictly,\n        onChange = _props5.onChange;\n\n    if (multiple) {\n      value = [].concat(this.state.value);\n      value.splice(value.indexOf(currentValue), 1);\n\n      if (this.props.onChange) {\n        var data = this.getData(value);\n        var checked = false;\n\n        if (checkStrictly) {\n          this.props.onChange(value, data, {\n            checked: checked,\n            currentData: currentData,\n            checkedData: data\n          });\n        } else {\n          var checkedValue = this.completeValue(value);\n          var checkedData = this.getData(checkedValue);\n          var indeterminateValue = this.getIndeterminate(value);\n          var indeterminateData = this.getData(indeterminateValue);\n          this.props.onChange(value, data, {\n            checked: checked,\n            currentData: currentData,\n            checkedData: checkedData,\n            indeterminateData: indeterminateData\n          });\n        }\n      }\n    } else {\n      value = [];\n      onChange(null, null);\n    }\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value: value\n      });\n    }\n  };\n\n  CascaderSelect.prototype.handleSearch = function handleSearch(searchValue) {\n    this.setState({\n      searchValue: searchValue\n    });\n  };\n\n  CascaderSelect.prototype.getPath = function getPath(pos) {\n    var items = [];\n    var nums = pos.split('-');\n\n    if (nums === 2) {\n      items.push(this._p2n[pos]);\n    } else {\n      for (var i = 1; i < nums.length; i++) {\n        var p = nums.slice(0, i + 1).join('-');\n        items.push(this._p2n[p]);\n      }\n    }\n\n    return items;\n  };\n\n  CascaderSelect.prototype.filterItems = function filterItems() {\n    var _this8 = this;\n\n    var _props6 = this.props,\n        multiple = _props6.multiple,\n        changeOnSelect = _props6.changeOnSelect,\n        canOnlyCheckLeaf = _props6.canOnlyCheckLeaf,\n        filter = _props6.filter;\n    var searchValue = this.state.searchValue;\n    var items = Object.keys(this._p2n).map(function (p) {\n      return _this8._p2n[p];\n    });\n\n    if (!multiple && !changeOnSelect || multiple && canOnlyCheckLeaf) {\n      items = items.filter(function (item) {\n        return !item.children || !item.children.length;\n      });\n    }\n\n    return items.map(function (item) {\n      return _this8.getPath(item.pos);\n    }).filter(function (path) {\n      return filter(searchValue, path);\n    });\n  };\n\n  CascaderSelect.prototype.renderNotFound = function renderNotFound() {\n    var _props7 = this.props,\n        prefix = _props7.prefix,\n        notFoundContent = _props7.notFoundContent;\n    return React.createElement(Menu, {\n      className: prefix + 'cascader-select-not-found'\n    }, React.createElement(Menu.Item, null, notFoundContent));\n  };\n\n  CascaderSelect.prototype.renderCascader = function renderCascader() {\n    var dataSource = this.props.dataSource;\n\n    if (dataSource.length === 0) {\n      return this.renderNotFound();\n    }\n\n    var searchValue = this.state.searchValue;\n    var filteredPaths = [];\n\n    if (searchValue) {\n      filteredPaths = this.filterItems();\n\n      if (filteredPaths.length === 0) {\n        return this.renderNotFound();\n      }\n    }\n\n    var _props8 = this.props,\n        multiple = _props8.multiple,\n        useVirtual = _props8.useVirtual,\n        changeOnSelect = _props8.changeOnSelect,\n        checkStrictly = _props8.checkStrictly,\n        canOnlyCheckLeaf = _props8.canOnlyCheckLeaf,\n        defaultExpandedValue = _props8.defaultExpandedValue,\n        expandTriggerType = _props8.expandTriggerType,\n        onExpand = _props8.onExpand,\n        listStyle = _props8.listStyle,\n        listClassName = _props8.listClassName,\n        loadData = _props8.loadData,\n        showSearch = _props8.showSearch,\n        resultRender = _props8.resultRender,\n        readOnly = _props8.readOnly,\n        itemRender = _props8.itemRender;\n    var value = this.state.value;\n    var props = {\n      dataSource: dataSource,\n      value: value,\n      multiple: multiple,\n      useVirtual: useVirtual,\n      canOnlySelectLeaf: !changeOnSelect,\n      checkStrictly: checkStrictly,\n      canOnlyCheckLeaf: canOnlyCheckLeaf,\n      defaultExpandedValue: defaultExpandedValue,\n      expandTriggerType: expandTriggerType,\n      onExpand: onExpand,\n      listStyle: listStyle,\n      listClassName: listClassName,\n      loadData: loadData,\n      itemRender: itemRender\n    };\n\n    if (!readOnly) {\n      props.onChange = this.handleChange;\n    }\n\n    if (showSearch) {\n      props.searchValue = searchValue;\n      props.filteredPaths = filteredPaths;\n      props.resultRender = resultRender;\n      props.filteredListStyle = {\n        height: this.cascaderHeight\n      };\n    }\n\n    return React.createElement(Cascader, props);\n  };\n\n  CascaderSelect.prototype.renderPopupContent = function renderPopupContent() {\n    var _props9 = this.props,\n        prefix = _props9.prefix,\n        header = _props9.header,\n        footer = _props9.footer;\n    return React.createElement('div', {\n      className: prefix + 'cascader-select-dropdown'\n    }, header, this.renderCascader(), footer);\n  };\n\n  CascaderSelect.prototype.render = function render() {\n    var _props10 = this.props,\n        prefix = _props10.prefix,\n        size = _props10.size,\n        hasArrow = _props10.hasArrow,\n        hasBorder = _props10.hasBorder,\n        hasClear = _props10.hasClear,\n        label = _props10.label,\n        readOnly = _props10.readOnly,\n        placeholder = _props10.placeholder,\n        dataSource = _props10.dataSource,\n        disabled = _props10.disabled,\n        multiple = _props10.multiple,\n        className = _props10.className,\n        showSearch = _props10.showSearch,\n        popupStyle = _props10.popupStyle,\n        popupClassName = _props10.popupClassName,\n        popupContainer = _props10.popupContainer,\n        popupProps = _props10.popupProps;\n    var _state2 = this.state,\n        value = _state2.value,\n        searchValue = _state2.searchValue,\n        visible = _state2.visible;\n    var others = pickOthers(Object.keys(CascaderSelect.propTypes), this.props);\n    var popupContent = this.renderPopupContent();\n    this.updateCache(dataSource);\n    var props = {\n      prefix: prefix,\n      className: className,\n      size: size,\n      placeholder: placeholder,\n      disabled: disabled,\n      hasArrow: hasArrow,\n      hasBorder: hasBorder,\n      hasClear: hasClear,\n      label: label,\n      readOnly: readOnly,\n      autoWidth: false,\n      mode: multiple ? 'multiple' : 'single',\n      value: multiple ? this.getMultipleData(value) : this.getSignleData(value),\n      onChange: this.handleClear,\n      onRemove: this.handleRemove,\n      visible: visible,\n      onVisibleChange: this.handleVisibleChange,\n      showSearch: showSearch,\n      searchValue: searchValue,\n      onSearch: this.handleSearch,\n      popupContent: popupContent,\n      popupStyle: popupStyle,\n      popupClassName: popupClassName,\n      popupContainer: popupContainer,\n      popupProps: popupProps\n    };\n\n    if (showSearch) {\n      props.popupProps = _extends({}, popupProps, {\n        ref: this.getPopup,\n        afterOpen: this.handleAfterOpen\n      });\n      props.autoWidth = showSearch && !!searchValue;\n    }\n\n    return React.createElement(Select, _extends({}, props, others));\n  };\n\n  return CascaderSelect;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  pure: PropTypes.bool,\n  className: PropTypes.string,\n\n  /**\n   * 选择框大小\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 选择框占位符\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 是否有下拉箭头\n   */\n  hasArrow: PropTypes.bool,\n\n  /**\n   * 是否有边框\n   */\n  hasBorder: PropTypes.bool,\n\n  /**\n   * 是否有清除按钮\n   */\n  hasClear: PropTypes.bool,\n\n  /**\n   * 自定义内联 label\n   */\n  label: PropTypes.node,\n\n  /**\n   * 是否只读，只读模式下可以展开弹层但不能选\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * 数据源，结构可参考下方说明\n   */\n  dataSource: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * （非受控）默认值\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * （受控）当前值\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * 选中值改变时触发的回调函数\n   * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n   * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n   * @param {Object} extra 额外参数\n   * @param {Array} extra.selectedPath 单选时选中的数据的路径\n   * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中\n   * @param {Object} extra.currentData 多选时当前操作的数据\n   * @param {Array} extra.checkedData 多选时所有被选中的数据\n   * @param {Array} extra.indeterminateData 多选时半选的数据\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置\n   */\n  defaultExpandedValue: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * 展开触发的方式\n   */\n  expandTriggerType: PropTypes.oneOf(['click', 'hover']),\n  onExpand: PropTypes.func,\n\n  /**\n   * 是否开启虚拟滚动\n   */\n  useVirtual: PropTypes.bool,\n\n  /**\n   * 是否多选\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * 是否选中即发生改变, 该属性仅在单选模式下有效\n   */\n  changeOnSelect: PropTypes.bool,\n\n  /**\n   * 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效\n   */\n  canOnlyCheckLeaf: PropTypes.bool,\n\n  /**\n   * 父子节点是否选中不关联\n   */\n  checkStrictly: PropTypes.bool,\n\n  /**\n   * 每列列表样式对象\n   */\n  listStyle: PropTypes.object,\n\n  /**\n   * 每列列表类名\n   */\n  listClassName: PropTypes.string,\n\n  /**\n   * 选择框单选时展示结果的自定义渲染函数\n   * @param {Array} label 选中路径的文本数组\n   * @return {ReactNode} 渲染在选择框中的内容\n   * @default 单选时：labelPath => labelPath.join(' / ')；多选时：labelPath => labelPath[labelPath.length - 1]\n   */\n  displayRender: PropTypes.func,\n\n  /**\n   * 渲染 item 内容的方法\n   * @param {Object} item 渲染节点的item\n   * @return {ReactNode} item node\n   */\n  itemRender: PropTypes.func,\n\n  /**\n   * 是否显示搜索框\n   */\n  showSearch: PropTypes.bool,\n\n  /**\n   * 自定义搜索函数\n   * @param {String} searchValue 搜索的关键字\n   * @param {Array} path 节点路径\n   * @return {Boolean} 是否匹配\n   * @default 根据路径所有节点的文本值模糊匹配\n   */\n  filter: PropTypes.func,\n\n  /**\n   * 搜索结果自定义渲染函数\n   * @param {String} searchValue 搜索的关键字\n   * @param {Array} path 匹配到的节点路径\n   * @return {ReactNode} 渲染的内容\n   * @default 按照节点文本 a / b / c 的模式渲染\n   */\n  resultRender: PropTypes.func,\n\n  /**\n   * 搜索结果列表是否和选择框等宽\n   */\n  resultAutoWidth: PropTypes.bool,\n\n  /**\n   * 无数据时显示内容\n   */\n  notFoundContent: PropTypes.node,\n\n  /**\n   * 异步加载数据函数\n   * @param {Object} data 当前点击异步加载的数据\n   */\n  loadData: PropTypes.func,\n\n  /**\n   * 自定义下拉框头部\n   */\n  header: PropTypes.node,\n\n  /**\n   * 自定义下拉框底部\n   */\n  footer: PropTypes.node,\n\n  /**\n   * 初始下拉框是否显示\n   */\n  defaultVisible: PropTypes.bool,\n\n  /**\n   * 当前下拉框是否显示\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 下拉框显示或关闭时触发事件的回调函数\n   * @param {Boolean} visible 是否显示\n   * @param {String} type 触发显示关闭的操作类型\n   */\n  onVisibleChange: PropTypes.func,\n\n  /**\n   * 下拉框自定义样式对象\n   */\n  popupStyle: PropTypes.object,\n\n  /**\n   * 下拉框样式自定义类名\n   */\n  popupClassName: PropTypes.string,\n\n  /**\n   * 下拉框挂载的容器节点\n   */\n  popupContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\n   * 透传到 Popup 的属性对象\n   */\n  popupProps: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  pure: false,\n  size: 'medium',\n  disabled: false,\n  hasArrow: true,\n  hasBorder: true,\n  hasClear: false,\n  dataSource: [],\n  defaultValue: null,\n  expandTriggerType: 'click',\n  onExpand: function onExpand() {},\n  useVirtual: false,\n  multiple: false,\n  changeOnSelect: false,\n  canOnlyCheckLeaf: false,\n  checkStrictly: false,\n  showSearch: false,\n  filter: function filter(searchValue, path) {\n    return path.some(function (item) {\n      return item.label.indexOf(searchValue) > -1;\n    });\n  },\n  resultRender: function resultRender(searchValue, path) {\n    var parts = [];\n    path.forEach(function (item, i) {\n      var others = item.label.split(searchValue);\n      others.forEach(function (other, j) {\n        if (other) {\n          parts.push(other);\n        }\n\n        if (j < others.length - 1) {\n          parts.push(React.createElement('em', {\n            key: i + '-' + j\n          }, searchValue));\n        }\n      });\n\n      if (i < path.length - 1) {\n        parts.push(' / ');\n      }\n    });\n    return React.createElement('span', null, parts);\n  },\n  resultAutoWidth: true,\n  notFoundContent: 'Not Found',\n  defaultVisible: false,\n  onVisibleChange: function onVisibleChange() {},\n  popupProps: {}\n}, _temp);\nCascaderSelect.displayName = 'CascaderSelect';\nexport { CascaderSelect as default };","map":null,"metadata":{},"sourceType":"module"}