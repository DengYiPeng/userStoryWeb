{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { KEYCODE } from '../util';\nimport ConfigProvider from '../config-provider';\n/** Switch*/\n\nvar Switch = (_temp = _class = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch(props, context) {\n    _classCallCheck(this, Switch);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    var checked = props.checked || props.defaultChecked;\n    _this.onChange = _this.onChange.bind(_this);\n    _this.onKeyDown = _this.onKeyDown.bind(_this);\n    _this.state = {\n      checked: checked\n    };\n    return _this;\n  }\n\n  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('checked' in nextProps) {\n      var checked = nextProps.checked;\n\n      if (checked === undefined) {\n        checked = false;\n      }\n\n      this.setState({\n        checked: checked\n      });\n    }\n  };\n\n  Switch.prototype.onChange = function onChange(ev) {\n    var checked = !this.state.checked;\n\n    if (!('checked' in this.props)) {\n      this.setState({\n        checked: checked\n      });\n    }\n\n    this.props.onChange(checked, ev);\n    this.props.onClick && this.props.onClick(ev);\n  };\n\n  Switch.prototype.onKeyDown = function onKeyDown(e) {\n    if (e.keyCode === KEYCODE.ENTER || e.keyCode === KEYCODE.SPACE) {\n      this.onChange(e);\n    }\n\n    this.props.onKeyDown && this.props.onKeyDown(e);\n  };\n\n  Switch.prototype.render = function render() {\n    var _classNames;\n    /* eslint-disable no-unused-vars */\n\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        className = _props.className,\n        disabled = _props.disabled,\n        size = _props.size,\n        checkedChildren = _props.checkedChildren,\n        unCheckedChildren = _props.unCheckedChildren,\n        rtl = _props.rtl,\n        others = _objectWithoutProperties(_props, ['prefix', 'className', 'disabled', 'size', 'checkedChildren', 'unCheckedChildren', 'rtl']),\n        status = this.state.checked ? 'on' : 'off';\n\n    var children = this.state.checked ? checkedChildren : unCheckedChildren;\n    var _size = size;\n\n    if (_size !== 'small' && _size !== 'medium') {\n      _size = 'medium';\n    }\n\n    var classes = classNames((_classNames = {}, _classNames[prefix + 'switch'] = true, _classNames[prefix + 'switch-' + status] = true, _classNames[prefix + 'switch-' + _size] = true, _classNames[className] = className, _classNames));\n    var attrs = void 0;\n\n    if (!disabled) {\n      attrs = {\n        onClick: this.onChange,\n        tabIndex: 0,\n        onKeyDown: this.onKeyDown,\n        disabled: disabled\n      };\n    } else {\n      attrs = {\n        disabled: disabled\n      };\n    }\n\n    return React.createElement('div', _extends({}, others, {\n      className: classes\n    }, attrs, {\n      'aria-checked': this.state.checked\n    }), React.createElement('div', {\n      className: this.props.prefix + 'switch-children'\n    }, children));\n  };\n\n  return Switch;\n}(React.Component), _class.contextTypes = {\n  prefix: PropTypes.string\n}, _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n  pure: PropTypes.bool,\n\n  /**\n   * 自定义类名\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内敛样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 打开时的内容\n   */\n  checkedChildren: PropTypes.any,\n\n  /**\n   * 关闭时的内容\n   */\n  unCheckedChildren: PropTypes.any,\n\n  /**\n   * 开关状态改变是触发此事件\n   * @param {Boolean} checked 是否为打开状态\n   * @param {Event} e DOM事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 开关当前的值(针对受控组件)\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * 开关默认值 (针对非受控组件)\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * 表示开关被禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * switch的尺寸\n   * @enumdesc 正常大小, 缩小版大小\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * 鼠标点击事件\n   * @param {Event} e DOM事件对象\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * 键盘按键事件\n   * @param {Event} e DOM事件对象\n   */\n  onKeyDown: PropTypes.func\n}, _class.defaultProps = {\n  prefix: 'next-',\n  disabled: false,\n  size: 'medium',\n  onChange: function onChange() {}\n}, _temp);\nSwitch.displayName = 'Switch';\nexport default ConfigProvider.config(Switch);","map":null,"metadata":{},"sourceType":"module"}