{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { obj } from '../../util';\nimport ConfigProvider from '../../config-provider';\nimport locale from '../../locale/zh-cn';\n/** Timeline */\n\nvar Timeline = (_temp = _class = function (_Component) {\n  _inherits(Timeline, _Component);\n\n  function Timeline(props, context) {\n    _classCallCheck(this, Timeline);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.state = {\n      fold: props.fold\n    };\n    return _this;\n  }\n\n  Timeline.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('fold' in nextProps) {\n      this.setState({\n        fold: nextProps.fold\n      });\n    }\n  };\n\n  Timeline.prototype.toggleFold = function toggleFold(folderIndex, total) {\n    var fold = this.state.fold.map(function (item) {\n      return _extends({}, item);\n    });\n\n    if (folderIndex) {\n      for (var i = 0; i < fold.length; i++) {\n        var _fold$i = fold[i],\n            foldArea = _fold$i.foldArea,\n            foldShow = _fold$i.foldShow;\n\n        if (foldArea[1] && folderIndex === foldArea[1] || !foldArea[1] && folderIndex === total - 1) {\n          fold[i].foldShow = !foldShow;\n        }\n      }\n\n      this.setState({\n        fold: fold\n      });\n    }\n  };\n\n  Timeline.prototype.render = function render() {\n    var _this2 = this,\n        _classNames;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        rtl = _props.rtl,\n        className = _props.className,\n        children = _props.children,\n        locale = _props.locale,\n        animation = _props.animation,\n        others = _objectWithoutProperties(_props, ['prefix', 'rtl', 'className', 'children', 'locale', 'animation']);\n\n    var fold = this.state.fold; // 修改子节点属性\n\n    var childrenCount = React.Children.count(children);\n    var cloneChildren = Children.map(children, function (child, i) {\n      var folderIndex = null;\n      var foldNodeShow = false;\n      fold.forEach(function (item) {\n        var foldArea = item.foldArea,\n            foldShow = item.foldShow;\n\n        if (foldArea[0] && i >= foldArea[0] && (i <= foldArea[1] || !foldArea[1])) {\n          folderIndex = foldArea[1] || childrenCount - 1;\n          foldNodeShow = foldShow;\n        }\n      });\n      return React.cloneElement(child, {\n        prefix: prefix,\n        locale: locale,\n        total: childrenCount,\n        index: i,\n        folderIndex: folderIndex,\n        foldShow: foldNodeShow,\n        toggleFold: folderIndex === i ? _this2.toggleFold.bind(_this2, folderIndex, childrenCount) : function () {},\n        animation: animation\n      });\n    });\n    var timelineCls = classNames((_classNames = {}, _classNames[prefix + 'timeline'] = true, _classNames), className);\n\n    if (rtl) {\n      others.dir = 'rtl';\n    }\n\n    return React.createElement('ul', _extends({}, obj.pickOthers(Timeline.propTypes, others), {\n      className: timelineCls\n    }), cloneChildren);\n  };\n\n  return Timeline;\n}(Component), _class.propTypes = {\n  /**\n   * 样式的品牌前缀\n   */\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]`\n   */\n  fold: PropTypes.array,\n\n  /**\n   * 自定义类名\n   */\n  className: PropTypes.string,\n  children: PropTypes.any,\n  locale: PropTypes.object,\n  animation: PropTypes.bool\n}, _class.defaultProps = {\n  prefix: 'next-',\n  rtl: false,\n  fold: [],\n  locale: locale.Timeline,\n  animation: true\n}, _temp);\nTimeline.displayName = 'Timeline';\nexport default ConfigProvider.config(Timeline);","map":null,"metadata":{},"sourceType":"module"}