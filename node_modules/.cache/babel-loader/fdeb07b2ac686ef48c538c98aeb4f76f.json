{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Button from '../button';\nimport Icon from '../icon';\nimport Menu from '../menu';\nimport Overlay from '../overlay';\nimport { obj, func } from '../util';\nvar Popup = Overlay.Popup;\n/**\n * MenuButton\n */\n\nvar MenuButton = (_temp = _class = function (_React$Component) {\n  _inherits(MenuButton, _React$Component);\n\n  function MenuButton(props, context) {\n    _classCallCheck(this, MenuButton);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.clickMenuItem = function (key) {\n      var _this$props;\n\n      for (var _len = arguments.length, others = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        others[_key - 1] = arguments[_key];\n      }\n\n      (_this$props = _this.props).onItemClick.apply(_this$props, [key].concat(others));\n\n      _this.onPopupVisibleChange(false, 'menuSelect');\n    };\n\n    _this.selectMenu = function (keys) {\n      var _this$props2;\n\n      for (var _len2 = arguments.length, others = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        others[_key2 - 1] = arguments[_key2];\n      }\n\n      if (!('selectedKeys' in _this.props)) {\n        _this.setState({\n          selectedKeys: keys\n        });\n      }\n\n      (_this$props2 = _this.props).onSelect.apply(_this$props2, [keys].concat(others));\n    };\n\n    _this.onPopupOpen = function () {\n      var button = findDOMNode(_this);\n\n      if (_this.props.autoWidth && button && _this.menu) {\n        _this.menu.style.width = button.offsetWidth + 'px';\n      }\n    };\n\n    _this.onPopupVisibleChange = function (visible, type) {\n      if (!('visible' in _this.props)) {\n        _this.setState({\n          visible: visible\n        });\n      }\n\n      _this.props.onVisibleChange(visible, type);\n    };\n\n    _this._menuRefHandler = function (ref) {\n      _this.menu = findDOMNode(ref);\n      var refFn = _this.props.menuProps.ref;\n\n      if (typeof refFn === 'function') {\n        refFn(ref);\n      }\n    };\n\n    _this.state = {\n      selectedKeys: props.selectedKeys || props.defaultSelectedKeys,\n      visible: props.visible || props.defaultVisible\n    };\n    return _this;\n  }\n\n  MenuButton.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('visible' in nextProps) {\n      this.setState({\n        visible: nextProps.visible\n      });\n    }\n\n    if ('selectedKeys' in nextProps) {\n      this.setState({\n        selectedKeys: nextProps.selectedKeys\n      });\n    }\n  };\n\n  MenuButton.prototype.render = function render() {\n    var _classnames, _classnames2;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        style = _props.style,\n        className = _props.className,\n        label = _props.label,\n        popupTriggerType = _props.popupTriggerType,\n        popupContainer = _props.popupContainer,\n        popupStyle = _props.popupStyle,\n        popupClassName = _props.popupClassName,\n        popupProps = _props.popupProps,\n        selectMode = _props.selectMode,\n        menuProps = _props.menuProps,\n        children = _props.children,\n        others = _objectWithoutProperties(_props, ['prefix', 'style', 'className', 'label', 'popupTriggerType', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'selectMode', 'menuProps', 'children']);\n\n    var state = this.state;\n    var classNames = classnames((_classnames = {}, _classnames[prefix + 'menu-btn'] = true, _classnames[prefix + 'expand'] = state.visible, _classnames.opened = state.visible, _classnames), className);\n    var popupClassNames = classnames((_classnames2 = {}, _classnames2[prefix + 'menu-btn-popup'] = true, _classnames2), popupClassName);\n    var trigger = React.createElement(Button, _extends({\n      style: style,\n      className: classNames\n    }, obj.pickOthers(MenuButton.propTypes, others)), label, ' ', React.createElement(Icon, {\n      type: 'arrow-down',\n      className: prefix + 'menu-btn-arrow'\n    }));\n    return React.createElement(Popup, _extends({}, popupProps, {\n      visible: state.visible,\n      onVisibleChange: this.onPopupVisibleChange,\n      trigger: trigger,\n      triggerType: popupTriggerType,\n      container: popupContainer,\n      onOpen: this.onPopupOpen,\n      style: popupStyle,\n      className: popupClassNames\n    }), React.createElement(Menu, _extends({}, menuProps, {\n      ref: this._menuRefHandler,\n      selectedKeys: state.selectedKeys,\n      selectMode: selectMode,\n      onSelect: this.selectMenu,\n      onItemClick: this.clickMenuItem\n    }), children));\n  };\n\n  return MenuButton;\n}(React.Component), _class.propTypes = {\n  prefix: PropTypes.string,\n\n  /**\n   * 按钮上的文本内容\n   */\n  label: PropTypes.node,\n\n  /**\n   * 弹层是否与按钮宽度相同\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * 弹层触发方式\n   */\n  popupTriggerType: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * 弹层容器\n   */\n  popupContainer: PropTypes.func,\n\n  /**\n   * 弹层展开状态\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 弹层默认是否展开\n   */\n  defaultVisible: PropTypes.bool,\n\n  /**\n   * 弹层在显示和隐藏触发的事件\n   */\n  onVisibleChange: PropTypes.func,\n\n  /**\n   * 弹层自定义样式\n   */\n  popupStyle: PropTypes.object,\n\n  /**\n   * 弹层自定义样式类\n   */\n  popupClassName: PropTypes.string,\n\n  /**\n   * 弹层属性透传\n   */\n  popupProps: PropTypes.object,\n\n  /**\n   * 默认激活的菜单项（用法同 Menu 非受控）\n   */\n  defaultSelectedKeys: PropTypes.array,\n\n  /**\n   * 激活的菜单项（用法同 Menu 受控）\n   */\n  selectedKeys: PropTypes.array,\n\n  /**\n   * 菜单的选择模式，同 Menu\n   */\n  selectMode: PropTypes.string,\n\n  /**\n   * 点击菜单项后的回调，同 Menu\n   */\n  onItemClick: PropTypes.func,\n\n  /**\n   * 选择菜单后的回调，同 Menu\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * 菜单属性透传\n   */\n  menuProps: PropTypes.object,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.any\n}, _class.defaultProps = {\n  prefix: 'next-',\n  autoWidth: true,\n  popupTriggerType: 'click',\n  onVisibleChange: func.noop,\n  onItemClick: func.noop,\n  onSelect: func.noop,\n  defaultSelectedKeys: [],\n  menuProps: {}\n}, _temp);\nMenuButton.displayName = 'MenuButton';\nMenuButton.Item = Menu.Item;\nMenuButton.Group = Menu.Group;\nMenuButton.Divider = Menu.Divider;\nexport default MenuButton;","map":null,"metadata":{},"sourceType":"module"}