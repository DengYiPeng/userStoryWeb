{"ast":null,"code":"export function normalizeToArray(keys) {\n  if (keys) {\n    if (Array.isArray(keys)) {\n      return [].concat(keys);\n    }\n\n    return [keys];\n  }\n\n  return [];\n}\n/**\n * 过滤子节点\n * @param {Array} keys\n * @param {Object} _k2n\n */\n\nexport function filterChildKey(keys, _k2n) {\n  var newKeys = [].concat(keys).sort(function (prev, next) {\n    return getDepth(prev, _k2n) - getDepth(next, _k2n);\n  });\n\n  for (var i = 0; i < newKeys.length; i++) {\n    for (var j = 0; j < newKeys.length; j++) {\n      if (i !== j && isDescendantOrSelf(_k2n[newKeys[i]].pos, _k2n[newKeys[j]].pos)) {\n        newKeys.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  return newKeys;\n}\nexport function filterParentKey(keys, _k2n) {\n  var newKeys = [].concat(keys).sort(function (prev, next) {\n    return getDepth(next, _k2n) - getDepth(prev, _k2n);\n  });\n\n  for (var i = 0; i < newKeys.length; i++) {\n    for (var j = 0; j < newKeys.length; j++) {\n      if (i !== j && isDescendantOrSelf(_k2n[newKeys[j]].pos, _k2n[newKeys[i]].pos)) {\n        newKeys.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  return newKeys;\n}\nexport function isDescendantOrSelf(currentPos, targetPos) {\n  if (!currentPos || !targetPos) {\n    return false;\n  }\n\n  var currentNums = currentPos.split('-');\n  var targetNums = targetPos.split('-');\n  return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {\n    return num === targetNums[index];\n  });\n}\nexport function isSiblingOrSelf(currentPos, targetPos) {\n  var currentNums = currentPos.split('-').slice(0, -1);\n  var targetNums = targetPos.split('-').slice(0, -1);\n  return currentNums.length === targetNums.length && currentNums.every(function (num, index) {\n    return num === targetNums[index];\n  });\n}\nexport function getAllCheckedKeys(checkedKeys, _k2n, _p2n) {\n  checkedKeys = normalizeToArray(checkedKeys);\n  var filteredKeys = checkedKeys.filter(function (key) {\n    return !!_k2n[key];\n  });\n  var flatKeys = filterChildKey(filteredKeys, _k2n);\n\n  var childChecked = function childChecked(child) {\n    return flatKeys.indexOf(child.key) > -1;\n  };\n\n  var removeKey = function removeKey(child) {\n    return flatKeys.splice(flatKeys.indexOf(child.key), 1);\n  };\n\n  var addParentKey = function addParentKey(i, parent) {\n    return flatKeys.splice(i, 0, parent.key);\n  };\n\n  var keys = [].concat(flatKeys);\n\n  for (var i = 0; i < keys.length; i++) {\n    var pos = _k2n[keys[i]].pos;\n    var nums = pos.split('-');\n\n    if (nums.length === 2) {\n      break;\n    }\n\n    for (var j = nums.length - 2; j > 0; j--) {\n      var parentPos = nums.slice(0, j + 1).join('-');\n      var parent = _p2n[parentPos];\n      var parentChecked = parent.children.every(childChecked);\n\n      if (parentChecked) {\n        parent.children.forEach(removeKey);\n        addParentKey(i, parent);\n      } else {\n        break;\n      }\n    }\n  }\n\n  var newKeys = [];\n\n  if (flatKeys.length) {\n    flatKeys = flatKeys.reverse();\n    var ps = Object.keys(_p2n);\n\n    for (var _i = 0; _i < flatKeys.length; _i++) {\n      var _pos = _k2n[flatKeys[_i]].pos;\n\n      for (var _j = 0; _j < ps.length; _j++) {\n        if (isDescendantOrSelf(_pos, ps[_j])) {\n          newKeys.push(_p2n[ps[_j]].key);\n          ps.splice(_j, 1);\n          _j--;\n        }\n      }\n    }\n  }\n\n  return newKeys;\n}\n\nfunction getDepth(key, _k2n) {\n  return _k2n[key].pos.split('-').length;\n}","map":null,"metadata":{},"sourceType":"module"}