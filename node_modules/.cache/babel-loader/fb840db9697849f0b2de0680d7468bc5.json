{"ast":null,"code":"export { _off as off };\n/**\n * 取消事件绑定\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   [useCapture=false] 是否开启事件捕获优先\n */\n\nfunction _off(node, eventName, callback, useCapture) {\n  /* istanbul ignore else */\n  if (node.removeEventListener) {\n    node.removeEventListener(eventName, callback, useCapture || false);\n  }\n}\n/**\n * 绑定事件\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   useCapture 是否开启事件捕获优先\n * @return {Object}               返回的object中包含一个off方法，用于取消事件监听\n *\n * @example\n * const handler = events.on(document.body, 'click', e => {\n *     // handle click ...\n * });\n * // 取消事件绑定\n * handler.off();\n */\n\n\nexport function on(node, eventName, callback, useCapture) {\n  /* istanbul ignore else */\n  if (node.addEventListener) {\n    node.addEventListener(eventName, callback, useCapture || false);\n  }\n\n  return {\n    off: function off() {\n      return _off(node, eventName, callback, useCapture);\n    }\n  };\n}\n/**\n * 绑定事件，只执行一次后销毁\n * @param  {*}   node       DOM节点或任何可以绑定事件的对象\n * @param  {String}   eventName  事件名\n * @param  {Function} callback   回调方法\n * @param  {Boolean}   useCapture 是否开启事件捕获优先\n * @return {Function}             返回的object中包含一个off方法，用于取消事件监听\n */\n\nexport function once(node, eventName, callback, useCapture) {\n  return on(node, eventName, function __fn() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args); // 由于addEventListener中的参数options只在Chrome 55、Firefox(Gecko)以上版本支持，故还是用传统的方法实现once\n\n    _off(node, eventName, __fn, useCapture);\n  }, useCapture);\n}","map":null,"metadata":{},"sourceType":"module"}