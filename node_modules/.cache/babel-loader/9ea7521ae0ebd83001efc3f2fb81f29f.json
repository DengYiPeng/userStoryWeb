{"ast":null,"code":"import * as util from '../util';\nvar pattern = {\n  email: /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/,\n  url: new RegExp(\"^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$\", 'i'),\n  number: /\\d*/,\n  tel: /^(1\\d{10})$|(((400)-(\\d{3})-(\\d{4}))|^((\\d{7,8})|(\\d{3,4})-(\\d{7,8})|(\\d{7,8})-(\\d{1,4}))$)$|^([ ]?)$/\n};\nvar types = {\n  number: function number(value) {\n    if (isNaN(value)) {\n      return false;\n    }\n\n    return typeof value === 'number' || typeof value === 'string' && !!value.match(pattern.number);\n  },\n  email: function email(value) {\n    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;\n  },\n  url: function url(value) {\n    return typeof value === 'string' && !!value.match(pattern.url);\n  },\n  tel: function tel(value) {\n    return typeof value === 'string' && !!value.match(pattern.tel);\n  }\n};\n/**\n *  Rule for validating the type of a value.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\nfunction format(rule, value, errors, options) {\n  var custom = ['email', 'number', 'url', 'tel'];\n  var ruleType = rule.format;\n\n  if (custom.indexOf(ruleType) > -1 && !types[ruleType](value)) {\n    errors.push(util.format(options.messages.format[ruleType], rule.field, rule.format));\n  }\n}\n\nexport default format;","map":null,"metadata":{},"sourceType":"module"}