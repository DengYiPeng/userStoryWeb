{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport DateTableHead from './date-table-head';\nimport { isDisabledDate, DAYS_OF_WEEK, CALENDAR_TABLE_COL_COUNT, CALENDAR_TABLE_ROW_COUNT } from '../utils';\n\nfunction isSameDay(a, b) {\n  return a && b && a.isSame(b, 'day');\n}\n\nfunction isRangeDate(date, startDate, endDate) {\n  return date.format('L') !== startDate.format('L') && date.format('L') !== endDate.format('L') && date.valueOf() > startDate.valueOf() && date.valueOf() < endDate.valueOf();\n}\n\nfunction isLastMonthDate(date, target) {\n  if (date.year() < target.year()) {\n    return 1;\n  }\n\n  return date.year() === target.year() && date.month() < target.month();\n}\n\nfunction isNextMonthDate(date, target) {\n  if (date.year() > target.year()) {\n    return 1;\n  }\n\n  return date.year() === target.year() && date.month() > target.month();\n}\n\nvar DateTable = function (_PureComponent) {\n  _inherits(DateTable, _PureComponent);\n\n  function DateTable() {\n    _classCallCheck(this, DateTable);\n\n    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));\n  }\n\n  DateTable.prototype.render = function render() {\n    var _props = this.props,\n        prefix = _props.prefix,\n        visibleMonth = _props.visibleMonth,\n        showOtherMonth = _props.showOtherMonth,\n        endValue = _props.endValue,\n        format = _props.format,\n        today = _props.today,\n        momentLocale = _props.momentLocale,\n        dateCellRender = _props.dateCellRender,\n        disabledDate = _props.disabledDate,\n        onSelectDate = _props.onSelectDate;\n    var startValue = this.props.startValue || this.props.value;\n    var firstDayOfMonth = visibleMonth.clone().startOf('month'); // 该月的 1 号\n\n    var firstDayOfMonthInWeek = firstDayOfMonth.day(); // 星期几\n\n    var firstDayOfWeek = momentLocale.firstDayOfWeek();\n    var datesOfLastMonthCount = (firstDayOfMonthInWeek + DAYS_OF_WEEK - firstDayOfWeek) % DAYS_OF_WEEK;\n    var lastMonthDate = firstDayOfMonth.clone();\n    lastMonthDate.add(0 - datesOfLastMonthCount, 'days');\n    var counter = 0;\n    var currentDate = void 0;\n    var dateList = [];\n\n    for (var i = 0; i < CALENDAR_TABLE_ROW_COUNT; i++) {\n      for (var j = 0; j < CALENDAR_TABLE_COL_COUNT; j++) {\n        currentDate = lastMonthDate;\n\n        if (counter) {\n          currentDate = currentDate.clone();\n          currentDate.add(counter, 'days');\n        }\n\n        dateList.push(currentDate);\n        counter++;\n      }\n    }\n\n    counter = 0; // reset counter\n\n    var monthElements = [];\n\n    for (var _i = 0; _i < CALENDAR_TABLE_ROW_COUNT; _i++) {\n      var weekElements = [];\n\n      for (var _j = 0; _j < CALENDAR_TABLE_COL_COUNT; _j++) {\n        var _classNames;\n\n        currentDate = dateList[counter];\n        var isLastMonth = isLastMonthDate(currentDate, visibleMonth);\n        var isNextMonth = isNextMonthDate(currentDate, visibleMonth);\n        var isCurrentMonth = !isLastMonth && !isNextMonth;\n        var isDisabled = isDisabledDate(currentDate, disabledDate);\n        var isToday = !isDisabled && isSameDay(currentDate, today) && isCurrentMonth;\n        var isSelected = !isDisabled && (isSameDay(currentDate, startValue) || isSameDay(currentDate, endValue)) && isCurrentMonth;\n        var isInRange = !isDisabled && startValue && endValue && isRangeDate(currentDate, startValue, endValue) && isCurrentMonth;\n        var cellContent = !showOtherMonth && !isCurrentMonth ? null : dateCellRender(currentDate);\n        var elementCls = classNames((_classNames = {}, _classNames[prefix + 'calendar-cell'] = true, _classNames[prefix + 'calendar-cell-prev-month'] = isLastMonth, _classNames[prefix + 'calendar-cell-next-month'] = isNextMonth, _classNames[prefix + 'calendar-cell-current'] = isToday, _classNames[prefix + 'inrange'] = isInRange, _classNames[prefix + 'selected'] = isSelected, _classNames[prefix + 'disabled'] = cellContent && isDisabled, _classNames));\n        weekElements.push(React.createElement('td', {\n          key: counter,\n          title: currentDate.format(format),\n          onClick: isDisabled ? undefined : onSelectDate.bind(null, currentDate),\n          className: elementCls,\n          role: 'cell',\n          'aria-disabled': isDisabled ? 'true' : 'false',\n          'aria-selected': isSelected ? 'true' : 'false'\n        }, React.createElement('div', {\n          className: prefix + 'calendar-date'\n        }, cellContent)));\n        counter++;\n      }\n\n      monthElements.push(React.createElement('tr', {\n        key: _i,\n        role: 'row'\n      }, weekElements));\n    }\n\n    return React.createElement('table', {\n      className: prefix + 'calendar-table',\n      role: 'grid'\n    }, React.createElement(DateTableHead, _extends({}, this.props, {\n      momentLocale: momentLocale\n    })), React.createElement('tbody', {\n      className: prefix + 'calendar-tbody',\n      role: 'rowgroup'\n    }, monthElements));\n  };\n\n  return DateTable;\n}(PureComponent);\n\nexport default DateTable;","map":null,"metadata":{},"sourceType":"module"}