{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Menu from '../menu';\nimport Icon from '../icon';\nimport { func, obj, KEYCODE } from '../util';\nvar bindCtx = func.bindCtx;\nvar pickOthers = obj.pickOthers;\nvar CascaderMenuItem = (_temp = _class = function (_Component) {\n  _inherits(CascaderMenuItem, _Component);\n\n  function CascaderMenuItem(props) {\n    _classCallCheck(this, CascaderMenuItem);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      loading: false\n    };\n    bindCtx(_this, ['handleExpand', 'handleClick', 'handleMouseEnter', 'handleKeyDown', 'removeLoading']);\n    return _this;\n  }\n\n  CascaderMenuItem.prototype.addLoading = function addLoading() {\n    this.setState({\n      loading: true\n    });\n  };\n\n  CascaderMenuItem.prototype.removeLoading = function removeLoading() {\n    this.setState({\n      loading: false\n    });\n  };\n\n  CascaderMenuItem.prototype.setLoadingIfNeed = function setLoadingIfNeed(p) {\n    if (p && typeof p.then === 'function') {\n      this.addLoading();\n      p.then(this.removeLoading).catch(this.removeLoading);\n    }\n  };\n\n  CascaderMenuItem.prototype.handleExpand = function handleExpand(focusedFirstChild) {\n    this.setLoadingIfNeed(this.props.onExpand(focusedFirstChild));\n  };\n\n  CascaderMenuItem.prototype.handleClick = function handleClick() {\n    this.handleExpand(false);\n  };\n\n  CascaderMenuItem.prototype.handleMouseEnter = function handleMouseEnter() {\n    this.handleExpand(false);\n  };\n\n  CascaderMenuItem.prototype.handleKeyDown = function handleKeyDown(e) {\n    if (!this.props.disabled) {\n      if (e.keyCode === KEYCODE.RIGHT || e.keyCODE === KEYCODE.ENTER) {\n        if (this.props.canExpand) {\n          this.handleExpand(true);\n        }\n      } else if (e.keyCode === KEYCODE.LEFT || e.keyCode === KEYCODE.ESC) {\n        this.props.onFold();\n      } else if (e.keyCode === KEYCODE.SPACE) {\n        this.handleExpand(false);\n      }\n    }\n  };\n\n  CascaderMenuItem.prototype.render = function render() {\n    var _cx;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        className = _props.className,\n        disabled = _props.disabled,\n        selected = _props.selected,\n        onSelect = _props.onSelect,\n        expanded = _props.expanded,\n        canExpand = _props.canExpand,\n        expandTriggerType = _props.expandTriggerType,\n        checkable = _props.checkable,\n        checked = _props.checked,\n        indeterminate = _props.indeterminate,\n        checkboxDisabled = _props.checkboxDisabled,\n        onCheck = _props.onCheck,\n        children = _props.children;\n    var others = pickOthers(Object.keys(CascaderMenuItem.propTypes), this.props);\n    var loading = this.state.loading;\n\n    var itemProps = _extends({\n      className: cx((_cx = {}, _cx[prefix + 'cascader-menu-item'] = true, _cx[prefix + 'expanded'] = expanded, _cx[className] = !!className, _cx)),\n      disabled: disabled,\n      onKeyDown: this.handleKeyDown,\n      role: 'option',\n      'aria-expanded': expanded\n    }, others);\n\n    if (!disabled) {\n      if (expandTriggerType === 'hover') {\n        itemProps.onMouseEnter = this.handleMouseEnter;\n      } else {\n        itemProps.onClick = this.handleClick;\n      }\n    }\n\n    var Item = void 0;\n\n    if (checkable) {\n      Item = Menu.CheckboxItem;\n      itemProps.checked = checked;\n      itemProps.indeterminate = indeterminate;\n      itemProps.checkboxDisabled = checkboxDisabled;\n      itemProps.onChange = onCheck;\n    } else {\n      Item = Menu.Item;\n      itemProps.selected = selected;\n      itemProps.onSelect = onSelect;\n    }\n\n    return React.createElement(Item, itemProps, children, canExpand ? loading ? React.createElement(Icon, {\n      className: prefix + 'cascader-menu-icon-right ' + prefix + 'cascader-menu-icon-loading',\n      type: 'loading'\n    }) : React.createElement(Icon, {\n      className: prefix + 'cascader-menu-icon-right ' + prefix + 'cascader-menu-icon-expand',\n      type: 'arrow-right'\n    }) : null);\n  };\n\n  return CascaderMenuItem;\n}(Component), _class.menuChildType = 'item', _class.propTypes = {\n  prefix: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  selected: PropTypes.bool,\n  onSelect: PropTypes.func,\n  expanded: PropTypes.bool,\n  canExpand: PropTypes.bool,\n  expandTriggerType: PropTypes.oneOf(['click', 'hover']),\n  onExpand: PropTypes.func,\n  onFold: PropTypes.func,\n  checkable: PropTypes.bool,\n  checked: PropTypes.bool,\n  indeterminate: PropTypes.bool,\n  checkboxDisabled: PropTypes.bool,\n  onCheck: PropTypes.func,\n  children: PropTypes.node\n}, _temp);\nCascaderMenuItem.displayName = 'CascaderMenuItem';\nexport { CascaderMenuItem as default };","map":null,"metadata":{},"sourceType":"module"}