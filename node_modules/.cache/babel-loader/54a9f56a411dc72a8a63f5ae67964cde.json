{"ast":null,"code":"import PropTypes from 'prop-types';\n/**\n * Creates an object with the same values as object and keys\n * generated by running each own enumerable string keyed property\n * of object thru iteratee.\n * @param {Object} obj\n * @param {Function} fn\n * @return {Object}\n */\n\nvar mapKeys = function mapKeys(obj, fn) {\n  var result = {};\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var value = obj[key];\n      var newKey = fn(key, value);\n      result[newKey] = value;\n    }\n  }\n\n  return result;\n};\n/**\n * Replace specific key with prefix `next`\n * and lowercase first character of the result.\n * @param {String} key\n * @return {String}\n */\n\n\nvar replaceKey = function replaceKey(key) {\n  return key.replace(/^(next)([A-Z])/, function (match, p1, p2) {\n    return p2.toLowerCase();\n  });\n};\n/**\n * @param {Object} source\n * @return {Object}\n */\n\n\nvar transformContext = function transformContext(source) {\n  return mapKeys(source, replaceKey);\n};\n/**\n * Consumer\n * @param {Object} prop\n * @param {Object} context\n */\n\n\nvar Consumer = function Consumer(_ref, context) {\n  var children = _ref.children;\n  return typeof children === 'function' ? children(transformContext(context)) : null;\n};\n/**\n * PropTypes\n * @type {Object}\n * @static\n */\n\n\nConsumer.propTypes = {\n  // Render context as function\n  // Function(context: object): ReactElement\n  children: PropTypes.func\n};\n/**\n * ContextTypes (legacy context)\n * @type {Object}\n * @static\n */\n\nConsumer.contextTypes = {\n  nextPrefix: PropTypes.string,\n  nextLocale: PropTypes.object,\n  nextPure: PropTypes.bool,\n  newRtl: PropTypes.bool,\n  nextWarning: PropTypes.bool\n};\nexport default Consumer;","map":null,"metadata":{},"sourceType":"module"}