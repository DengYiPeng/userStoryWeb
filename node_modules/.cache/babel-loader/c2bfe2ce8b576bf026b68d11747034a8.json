{"ast":null,"code":"import { isPromise } from './object';\n/**\n * 一个空方法，返回入参本身或空对象\n */\n\nexport var noop = function noop() {};\n/**\n * 将N个方法合并为一个链式调用的方法\n * @return {Function}     合并后的方法\n * 参考 https://github.com/react-component/util/\n *\n * @example\n * func.makeChain(this.handleChange, this.props.onChange);\n */\n\nexport function makeChain() {\n  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function chainedFunction() {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    for (var i = 0, j = fns.length; i < j; i++) {\n      if (fns[i] && fns[i].apply) {\n        fns[i].apply(this, args);\n      }\n    }\n  };\n}\n/**\n * 批量改变方法的上下文\n * 此方法在react组件中很有用，在constructor中批量将组件上的方法执行上下文绑定到组件本身\n * 注意：用bind改变函数运行的上下文只会生效一次\n * @param  {Object} ctx 方法挂载的对象以及执行的上下文\n * @param  {Array<String>} fns 方法名列表\n *\n * @example\n * func.bindCtx(this, ['handleClick', 'handleChange']);\n */\n\nexport function bindCtx(ctx, fns, ns) {\n  if (typeof fns === 'string') {\n    fns = [fns];\n  } // 方法的挂载空间，如果不传，默认与ctx相同\n\n\n  ns = ns || ctx;\n  fns.forEach(function (fnName) {\n    // 这里不要添加空方法判断，由调用者保证正确性，否则出了问题无法排查\n    ns[fnName] = ns[fnName].bind(ctx);\n  });\n}\n/**\n * 用于执行回调方法后的逻辑\n * @param  {*} ret            回调方法执行结果\n * @param  {Function} success 执行结果返回非false的回调\n * @param  {Function} [failure=noop] 执行结果返回false的回调\n */\n\nexport function promiseCall(ret, success) {\n  var failure = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n  if (isPromise(ret)) {\n    return ret.then(function (result) {\n      success(result);\n      return result;\n    }).catch(function (e) {\n      failure(e); // throw e;\n    });\n  }\n\n  return ret !== false ? success(ret) : failure(ret);\n}","map":null,"metadata":{},"sourceType":"module"}