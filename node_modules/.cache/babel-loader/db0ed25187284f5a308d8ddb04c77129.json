{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { func, obj } from '../util';\nvar noop = func.noop,\n    bindCtx = func.bindCtx; // 评分组件的大小与icon的大小映射关系\n\nvar ICON_SIZE_MAP = {\n  small: 'xs',\n  medium: 'small',\n  large: 'medium'\n};\n/** Rating */\n\nvar Rating = (_temp = _class = function (_Component) {\n  _inherits(Rating, _Component);\n\n  function Rating(props) {\n    _classCallCheck(this, Rating);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      value: 'value' in props ? props.value : props.defaultValue,\n      hoverValue: 0,\n      iconSpace: 0,\n      iconSize: 0,\n      clicked: false // 标记组件是否被点击过\n\n    };\n    _this.timer = null;\n    bindCtx(_this, ['handleClick', 'handleHover', 'handleLeave']);\n    return _this;\n  }\n\n  Rating.prototype.componentDidMount = function componentDidMount() {\n    this.getRenderResult();\n  };\n\n  Rating.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      this.setState({\n        value: nextProps.value || 0\n      });\n    }\n  };\n\n  Rating.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.clearTimer();\n  }; // 清除延时\n\n\n  Rating.prototype.clearTimer = function clearTimer() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  };\n\n  Rating.prototype.getRenderResult = function getRenderResult() {\n    var count = this.props.count;\n    var _state = this.state,\n        iconSpace = _state.iconSpace,\n        iconSize = _state.iconSize;\n    var icon = this.refs['rating-icon-0'];\n\n    if (icon && this.underlayNode) {\n      var newIconSize = icon.offsetWidth;\n      var newIconSpace = (this.underlayNode.offsetWidth - count * newIconSize) / (count + 1);\n\n      if (newIconSize !== iconSize || newIconSpace !== iconSpace) {\n        this.setState({\n          iconSpace: newIconSpace,\n          iconSize: newIconSize\n        });\n      }\n    }\n  };\n\n  Rating.prototype.getValue = function getValue(e) {\n    // 如定位不准，优先纠正定位\n    this.getRenderResult();\n    var _props = this.props,\n        allowHalf = _props.allowHalf,\n        count = _props.count;\n    var _state2 = this.state,\n        iconSpace = _state2.iconSpace,\n        iconSize = _state2.iconSize;\n    var pos = e.pageX - this.underlayNode.getBoundingClientRect().left;\n    var fullNum = Math.floor(pos / (iconSpace + iconSize));\n    var surplusNum = (pos - fullNum * (iconSpace + iconSize)) / iconSize;\n    var value = Number(fullNum) + Number(surplusNum.toFixed(1));\n\n    if (value >= count) {\n      value = count;\n    } else if (allowHalf) {\n      var floorValue = Math.floor(value);\n      value = value - 0.5 >= floorValue ? floorValue + 1 : floorValue + 0.5;\n    } else {\n      value = Math.floor(value) + 1;\n    }\n\n    return value;\n  };\n\n  Rating.prototype.handleHover = function handleHover(e) {\n    var _this2 = this;\n\n    var value = this.getValue(e);\n    var onHoverChange = this.props.onHoverChange;\n\n    if (value !== this.state.hoverValue) {\n      this.clearTimer();\n      this.timer = setTimeout(function () {\n        _this2.setState({\n          hoverValue: value\n        }, function () {\n          onHoverChange(value);\n        });\n      }, 0);\n    }\n  };\n\n  Rating.prototype.handleLeave = function handleLeave() {\n    this.clearTimer();\n    this.setState({\n      hoverValue: 0\n    });\n  };\n\n  Rating.prototype.handleClick = function handleClick(e) {\n    var _this3 = this;\n\n    var value = this.getValue(e);\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value: value,\n        clicked: true\n      });\n    }\n\n    this.props.onChange(value);\n    setTimeout(function () {\n      _this3.setState({\n        clicked: false\n      });\n    }, 100);\n  };\n\n  Rating.prototype.currentValue = function currentValue(min, max, hoverValue, stateValue) {\n    var value = hoverValue ? hoverValue : stateValue;\n    value = value >= max ? max : value;\n    value = value <= min ? min : value;\n    return value || 0;\n  };\n\n  Rating.prototype.getOverlayWidth = function getOverlayWidth() {\n    var _state3 = this.state,\n        hoverValue = _state3.hoverValue,\n        iconSpace = _state3.iconSpace,\n        iconSize = _state3.iconSize;\n\n    if (!iconSpace || !iconSize) {\n      return 'auto';\n    }\n\n    var value = this.currentValue(0, this.props.count, hoverValue, this.state.value);\n    var floorValue = Math.floor(value);\n    return iconSize * value + (floorValue + 1) * iconSpace;\n  };\n\n  Rating.prototype.getInfoLeft = function getInfoLeft() {\n    var _state4 = this.state,\n        value = _state4.value,\n        hoverValue = _state4.hoverValue,\n        iconSpace = _state4.iconSpace,\n        iconSize = _state4.iconSize;\n    var infoValue = hoverValue || value;\n    var ceilValue = Math.ceil(infoValue);\n    return iconSize * (ceilValue - 1) + ceilValue * iconSpace;\n  };\n\n  Rating.prototype.render = function render() {\n    var _classNames,\n        _classNames2,\n        _this4 = this;\n\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        className = _props2.className,\n        showGrade = _props2.showGrade,\n        count = _props2.count,\n        size = _props2.size,\n        iconType = _props2.iconType,\n        strokeMode = _props2.strokeMode,\n        disabled = _props2.disabled;\n    var others = obj.pickOthers(Rating.propTypes, this.props);\n    var _state5 = this.state,\n        hoverValue = _state5.hoverValue,\n        clicked = _state5.clicked;\n    var underlay = [],\n        overlay = []; // 获得Value\n\n    var value = this.currentValue(0, count, hoverValue, this.state.value); // icon的sizeMap\n\n    var sizeMap = ICON_SIZE_MAP[size];\n\n    for (var i = 0; i < count; i++) {\n      var isCurrent = Math.ceil(value - 1) === i;\n      var iconCls = classNames({\n        hover: hoverValue > 0 && isCurrent,\n        clicked: clicked && isCurrent\n      });\n      var iconNode = React.createElement(Icon, {\n        type: iconType,\n        size: sizeMap,\n        className: iconCls\n      });\n      underlay.push(React.createElement('span', {\n        ref: 'rating-icon-' + i,\n        key: 'underlay-' + i,\n        className: prefix + 'rating-icon'\n      }, iconNode));\n      overlay.push(React.createElement('span', {\n        key: 'overlay-' + i,\n        className: prefix + 'rating-icon'\n      }, iconNode));\n    }\n\n    var ratingCls = classNames([prefix + 'rating', prefix + 'rating-' + size], (_classNames = {}, _classNames[prefix + 'rating-grade-low'] = value <= count * 0.4, _classNames[prefix + 'rating-grade-high'] = value > count * 0.4, _classNames[prefix + 'rating-stroke-mode'] = strokeMode, _classNames.hover = hoverValue > 0, _classNames), className);\n    var baseCls = classNames(prefix + 'rating-base', (_classNames2 = {}, _classNames2[prefix + 'rating-base-disabled'] = disabled, _classNames2));\n    var overlayStyle = {\n      width: this.getOverlayWidth()\n    };\n    var infoStyle = {\n      left: this.getInfoLeft(),\n      display: hoverValue ? 'block' : 'none'\n    };\n    var finalProps = disabled ? {} : {\n      onClick: this.handleClick,\n      onMouseOver: this.handleHover,\n      onMouseMove: this.handleHover,\n      onMouseLeave: this.handleLeave\n    };\n    return React.createElement('div', _extends({}, others, {\n      className: ratingCls\n    }), React.createElement('div', _extends({\n      className: baseCls\n    }, finalProps), React.createElement('div', {\n      className: prefix + 'rating-underlay',\n      ref: function ref(n) {\n        return _this4.underlayNode = n;\n      }\n    }, underlay), React.createElement('div', {\n      className: prefix + 'rating-overlay',\n      style: overlayStyle\n    }, overlay)), showGrade ? React.createElement('div', {\n      className: prefix + 'rating-info',\n      style: infoStyle\n    }, value) : null);\n  };\n\n  return Rating;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n\n  /**\n   * 默认值\n   */\n  defaultValue: PropTypes.number,\n\n  /**\n   * 值\n   */\n  value: PropTypes.number,\n\n  /**\n   * 评分的总数\n   */\n  count: PropTypes.number,\n\n  /**\n   * 是否显示 grade\n   */\n  showGrade: PropTypes.bool,\n\n  /**\n   * 尺寸\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 是否允许半星评分\n   */\n  allowHalf: PropTypes.bool,\n\n  /**\n   * 用户点击评分时触发的回调\n   * @param {String} value 评分值\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 用户hover评分时触发的回调\n   * @param {String} value 评分值\n   */\n  onHoverChange: PropTypes.func,\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n  // 实验属性: 自定义评分icon\n  iconType: PropTypes.string,\n  // 实验属性: 开启 `-webkit-text-stroke` 显示边框颜色，在IE中无效\n  strokeMode: PropTypes.bool,\n  className: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  size: 'medium',\n  disabled: false,\n  count: 5,\n  showGrade: false,\n  defaultValue: 0,\n  allowHalf: false,\n  iconType: 'favorites-filling',\n  onChange: noop,\n  onHoverChange: noop\n}, _temp);\nRating.displayName = 'Rating';\nexport { Rating as default };","map":null,"metadata":{},"sourceType":"module"}