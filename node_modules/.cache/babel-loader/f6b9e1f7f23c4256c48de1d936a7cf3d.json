{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport UIState from '../mixin-ui-state';\nimport ConfigProvider from '../config-provider';\nimport { obj, func } from '../util';\nvar makeChain = func.makeChain,\n    noop = func.noop;\n/**\n * Radio\n * @order 1\n */\n\nvar Radio = (_temp = _class = function (_UIState) {\n  _inherits(Radio, _UIState);\n\n  function Radio(props, context) {\n    _classCallCheck(this, Radio);\n\n    var _this = _possibleConstructorReturn(this, _UIState.call(this, props));\n\n    var checked = void 0;\n\n    if (context.__group__) {\n      checked = context.selectedValue === props.value;\n    } else if ('checked' in props) {\n      checked = props.checked;\n    } else {\n      checked = props.defaultChecked;\n    }\n\n    _this.state = {\n      checked: checked\n    };\n    _this.onChange = _this.onChange.bind(_this);\n    _this.disabled = props.disabled || context.__group__ && 'disabled' in context && context.disabled;\n    return _this;\n  }\n\n  Radio.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {\n    if (nextContext.__group__) {\n      var selectedValue = nextContext.selectedValue;\n\n      if ('selectedValue' in nextContext) {\n        this.setState({\n          checked: selectedValue === nextProps.value\n        });\n      }\n    } else if ('checked' in nextProps) {\n      this.setState({\n        checked: nextProps.checked\n      });\n    }\n\n    this.disabled = nextProps.disabled || nextContext.__group__ && 'disabled' in nextContext && nextContext.disabled; // when disabled, reset UIState\n\n    if (this.disabled) {\n      // only class has an impact, no effect on visual\n      this.resetUIState();\n    }\n  };\n\n  Radio.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {\n    var shallowEqual = obj.shallowEqual;\n    return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState) || !shallowEqual(this.nextContext, nextContext);\n  };\n\n  Radio.prototype.onChange = function onChange(e) {\n    var checked = e.target.checked;\n    var value = this.props.value;\n\n    if (this.context.__group__) {\n      this.context.onChange(value, e);\n    } else if (this.state.checked !== checked) {\n      if (!('checked' in this.props)) {\n        this.setState({\n          checked: checked\n        });\n      }\n\n      this.props.onChange(checked, e);\n    }\n  };\n\n  Radio.prototype.render = function render() {\n    var _classnames, _classnames2, _classnames3;\n    /* eslint-disable no-unused-vars */\n\n\n    var _props = this.props,\n        id = _props.id,\n        className = _props.className,\n        children = _props.children,\n        style = _props.style,\n        label = _props.label,\n        onMouseEnter = _props.onMouseEnter,\n        onMouseLeave = _props.onMouseLeave,\n        tabIndex = _props.tabIndex,\n        rtl = _props.rtl,\n        otherProps = _objectWithoutProperties(_props, ['id', 'className', 'children', 'style', 'label', 'onMouseEnter', 'onMouseLeave', 'tabIndex', 'rtl']);\n\n    var checked = !!this.state.checked;\n    var disabled = this.disabled;\n    var isButton = this.context.isButton;\n    var prefix = this.context.prefix || this.props.prefix;\n    var others = obj.pickOthers(Radio.propTypes, otherProps);\n    var othersData = obj.pickAttrsWith(others, 'data-');\n    var input = React.createElement('input', _extends({}, obj.pickOthers(othersData, others), {\n      id: id,\n      disabled: disabled,\n      checked: checked,\n      type: 'radio',\n      onChange: this.onChange,\n      'aria-checked': checked,\n      className: prefix + 'radio-input'\n    })); // disabled do not hove focus state\n\n    if (!disabled) {\n      input = this.getStateElement(input);\n    }\n\n    var cls = classnames((_classnames = {}, _classnames[prefix + 'radio'] = true, _classnames.checked = checked, _classnames.disabled = disabled, _classnames[this.getStateClassName()] = true, _classnames));\n    var clsInner = classnames((_classnames2 = {}, _classnames2[prefix + 'radio-inner'] = true, _classnames2.press = checked, _classnames2.unpress = !checked, _classnames2));\n    var clsWrapper = classnames((_classnames3 = {}, _classnames3[prefix + 'radio-wrapper'] = true, _classnames3[className] = !!className, _classnames3.checked = checked, _classnames3.disabled = disabled, _classnames3[this.getStateClassName()] = true, _classnames3));\n    var childrenCls = prefix + 'radio-label';\n    var radioComp = !isButton ? React.createElement('span', {\n      className: cls\n    }, React.createElement('span', {\n      className: clsInner\n    }), input) : React.createElement('span', {\n      className: prefix + 'radio-single-input'\n    }, input);\n    return React.createElement('label', _extends({}, othersData, {\n      role: 'radio',\n      dir: rtl ? 'rtl' : 'ltr',\n      style: style,\n      tabIndex: tabIndex,\n      'aria-checked': checked,\n      'aria-disabled': disabled,\n      className: clsWrapper,\n      onMouseEnter: disabled ? onMouseEnter : makeChain(this._onUIMouseEnter, onMouseEnter),\n      onMouseLeave: disabled ? onMouseLeave : makeChain(this._onUIMouseLeave, onMouseLeave)\n    }), radioComp, [children, label].map(function (d, i) {\n      return d !== undefined ? React.createElement('span', {\n        key: i,\n        className: childrenCls\n      }, d) : null;\n    }));\n  };\n\n  return Radio;\n}(UIState), _class.displayName = 'Radio', _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 自定义类名\n   */\n  className: PropTypes.string,\n\n  /**\n   * 组件input的id\n   */\n  id: PropTypes.string,\n\n  /**\n   * 自定义内敛样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 设置radio是否选中\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * 设置radio是否默认选中\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * 通过属性配置label\n   */\n  label: PropTypes.node,\n\n  /**\n   * 状态变化时触发的事件\n   * @param {Boolean} checked 是否选中\n   * @param {Event} e Dom 事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 鼠标进入enter事件\n   * @param {Event} e Dom 事件对象\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * 鼠标离开事件\n   * @param {Event} e Dom 事件对象\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * radio是否被禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * radio 的value\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n\n  /**\n   * name\n   */\n  name: PropTypes.string\n}, _class.defaultProps = {\n  onChange: noop,\n  onMouseLeave: noop,\n  onMouseEnter: noop,\n  tabIndex: 0,\n  prefix: 'next-'\n}, _class.contextTypes = {\n  onChange: PropTypes.func,\n  __group__: PropTypes.bool,\n  isButton: PropTypes.bool,\n  selectedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n  disabled: PropTypes.bool\n}, _temp);\nexport default ConfigProvider.config(Radio);","map":null,"metadata":{},"sourceType":"module"}