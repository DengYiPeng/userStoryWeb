{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/wanghui/user-story-web/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/wanghui/user-story-web/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/wanghui/user-story-web/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/wanghui/user-story-web/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/wanghui/user-story-web/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/wanghui/user-story-web/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _redux = require(\"redux\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _Container = _interopRequireDefault(require(\"../dnd/Container\"));\n\nvar _Draggable = _interopRequireDefault(require(\"../dnd/Draggable\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _Base = require(\"../styles/Base\");\n\nvar _Elements = require(\"../styles/Elements\");\n\nvar _Lane = _interopRequireDefault(require(\"./Lane\"));\n\nvar _NewLane = _interopRequireDefault(require(\"./NewLane\"));\n\nvar boardActions = _interopRequireWildcard(require(\"../actions/BoardActions\"));\n\nvar laneActions = _interopRequireWildcard(require(\"../actions/LaneActions\"));\n\nvar BoardContainer =\n/*#__PURE__*/\nfunction (_react$Component) {\n  _inherits(BoardContainer, _react$Component);\n\n  function BoardContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoardContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoardContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      addLaneMode: false\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"onDragStart\", function (_ref) {\n      var payload = _ref.payload;\n      var handleLaneDragStart = _this.props.handleLaneDragStart;\n      handleLaneDragStart(payload.id);\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"onLaneDrop\", function (_ref2) {\n      var removedIndex = _ref2.removedIndex,\n          addedIndex = _ref2.addedIndex,\n          payload = _ref2.payload;\n      var _this$props = _this.props,\n          actions = _this$props.actions,\n          handleLaneDragEnd = _this$props.handleLaneDragEnd;\n\n      if (removedIndex !== addedIndex) {\n        actions.moveLane({\n          oldIndex: removedIndex,\n          newIndex: addedIndex\n        });\n        handleLaneDragEnd(removedIndex, addedIndex, payload);\n      }\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"getCardDetails\", function (laneId, cardIndex) {\n      return _this.props.reducerData.lanes.find(function (lane) {\n        return lane.id === laneId;\n      }).cards[cardIndex];\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"getLaneDetails\", function (index) {\n      return _this.props.reducerData.lanes[index];\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"wireEventBus\", function () {\n      var _this$props2 = _this.props,\n          actions = _this$props2.actions,\n          eventBusHandle = _this$props2.eventBusHandle;\n      var eventBus = {\n        publish: function publish(event) {\n          switch (event.type) {\n            case 'ADD_CARD':\n              return actions.addCard({\n                laneId: event.laneId,\n                card: event.card\n              });\n\n            case 'REMOVE_CARD':\n              return actions.removeCard({\n                laneId: event.laneId,\n                cardId: event.cardId\n              });\n\n            case 'REFRESH_BOARD':\n              return actions.loadBoard(event.data);\n\n            case 'MOVE_CARD':\n              return actions.moveCardAcrossLanes({\n                fromLaneId: event.fromLaneId,\n                toLaneId: event.toLaneId,\n                cardId: event.cardId,\n                index: event.index\n              });\n\n            case 'UPDATE_LANES':\n              return actions.updateLanes(event.lanes);\n          }\n        }\n      };\n      eventBusHandle(eventBus);\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"hideEditableLane\", function () {\n      _this.setState({\n        addLaneMode: false\n      });\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"showEditableLane\", function () {\n      _this.setState({\n        addLaneMode: true\n      });\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"addNewLane\", function (params) {\n      _this.hideEditableLane();\n\n      _this.props.actions.addLane(params);\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_assertThisInitialized(_this)), \"renderNewLane\", function () {\n      var newLaneTemplate = _this.props.newLaneTemplate;\n\n      if (newLaneTemplate) {\n        var newCardWithProps = _react.default.cloneElement(newLaneTemplate, {\n          onCancel: _this.hideEditableLane,\n          onAdd: _this.addNewLane\n        });\n\n        return _react.default.createElement(\"span\", null, newCardWithProps);\n      } else {\n        return _react.default.createElement(_NewLane.default, {\n          onCancel: _this.hideEditableLane,\n          onAdd: _this.addNewLane\n        });\n      }\n    });\n    return _this;\n  }\n\n  _createClass(BoardContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props3 = this.props,\n          actions = _this$props3.actions,\n          eventBusHandle = _this$props3.eventBusHandle;\n      actions.loadBoard(this.props.data);\n\n      if (eventBusHandle) {\n        this.wireEventBus();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      // nextProps.data changes when external Board input props change and nextProps.reducerData changes due to event bus or UI changes\n      var _this$props4 = this.props,\n          data = _this$props4.data,\n          reducerData = _this$props4.reducerData,\n          onDataChange = _this$props4.onDataChange;\n\n      if (nextProps.reducerData && !(0, _isEqual.default)(reducerData, nextProps.reducerData)) {\n        onDataChange(nextProps.reducerData);\n      }\n\n      if (nextProps.data && !(0, _isEqual.default)(nextProps.data, data)) {\n        this.props.actions.loadBoard(nextProps.data);\n        onDataChange(nextProps.data);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          id = _this$props5.id,\n          reducerData = _this$props5.reducerData,\n          draggable = _this$props5.draggable,\n          laneDraggable = _this$props5.laneDraggable,\n          laneDragClass = _this$props5.laneDragClass,\n          style = _this$props5.style,\n          addLaneTitle = _this$props5.addLaneTitle,\n          editable = _this$props5.editable,\n          canAddLanes = _this$props5.canAddLanes,\n          otherProps = (0, _objectWithoutProperties2.default)(_this$props5, [\"id\", \"reducerData\", \"draggable\", \"laneDraggable\", \"laneDragClass\", \"style\", \"addLaneTitle\", \"editable\", \"canAddLanes\"]);\n      var addLaneMode = this.state.addLaneMode; // Stick to whitelisting attributes to segregate board and lane props\n\n      var passthroughProps = (0, _pick.default)(this.props, ['onLaneScroll', 'onCardClick', 'onCardDelete', 'onCardAdd', 'onLaneClick', 'addCardLink', 'laneSortFunction', 'draggable', 'cardDraggable', 'collapsibleLanes', 'editable', 'canAddLanes', 'hideCardDeleteIcon', 'customCardLayout', 'customLaneHeader', 'tagStyle', 'handleDragStart', 'handleDragEnd', 'cardDragClass', 'children', 'addLaneTitle', 'addCardTitle', 'newLaneTemplate', 'newCardTemplate']);\n      return _react.default.createElement(_Base.BoardDiv, (0, _extends2.default)({\n        style: style\n      }, otherProps, {\n        draggable: false\n      }), _react.default.createElement(_Container.default, {\n        orientation: \"horizontal\",\n        onDragStart: this.onDragStart,\n        dragClass: laneDragClass,\n        dropClass: \"\",\n        onDrop: this.onLaneDrop,\n        lockAxis: \"x\",\n        getChildPayload: function getChildPayload(index) {\n          return _this2.getLaneDetails(index);\n        },\n        groupName: this.groupName\n      }, reducerData.lanes.map(function (lane, index) {\n        var id = lane.id,\n            droppable = lane.droppable,\n            otherProps = (0, _objectWithoutProperties2.default)(lane, [\"id\", \"droppable\"]);\n\n        var laneToRender = _react.default.createElement(_Lane.default, (0, _extends2.default)({\n          key: id,\n          boardId: _this2.groupName,\n          id: id,\n          getCardDetails: _this2.getCardDetails,\n          index: index,\n          droppable: droppable === undefined ? true : droppable\n        }, otherProps, passthroughProps));\n\n        return draggable && laneDraggable ? _react.default.createElement(_Draggable.default, {\n          key: lane.id\n        }, laneToRender) : _react.default.createElement(\"span\", {\n          key: lane.id\n        }, laneToRender);\n      })));\n    }\n  }, {\n    key: \"groupName\",\n    get: function get() {\n      var id = this.props.id;\n      return \"TrelloBoard\".concat(id);\n    }\n  }]);\n\n  return BoardContainer;\n}(_react.Component);\n\nBoardContainer.propTypes = {\n  id: _propTypes.default.string,\n  actions: _propTypes.default.object,\n  data: _propTypes.default.object.isRequired,\n  reducerData: _propTypes.default.object,\n  onDataChange: _propTypes.default.func,\n  eventBusHandle: _propTypes.default.func,\n  onLaneScroll: _propTypes.default.func,\n  onCardClick: _propTypes.default.func,\n  onCardDelete: _propTypes.default.func,\n  onCardAdd: _propTypes.default.func,\n  addCardLink: _propTypes.default.node,\n  onLaneClick: _propTypes.default.func,\n  laneSortFunction: _propTypes.default.func,\n  draggable: _propTypes.default.bool,\n  collapsibleLanes: _propTypes.default.bool,\n  editable: _propTypes.default.bool,\n  canAddLanes: _propTypes.default.bool,\n  hideCardDeleteIcon: _propTypes.default.bool,\n  handleDragStart: _propTypes.default.func,\n  handleDragEnd: _propTypes.default.func,\n  handleLaneDragStart: _propTypes.default.func,\n  handleLaneDragEnd: _propTypes.default.func,\n  customCardLayout: _propTypes.default.bool,\n  customLaneHeader: _propTypes.default.element,\n  style: _propTypes.default.object,\n  tagStyle: _propTypes.default.object,\n  laneDraggable: _propTypes.default.bool,\n  cardDraggable: _propTypes.default.bool,\n  cardDragClass: _propTypes.default.string,\n  laneDragClass: _propTypes.default.string,\n  addLaneTitle: _propTypes.default.string,\n  addCardTitle: _propTypes.default.string,\n  newLaneTemplate: _propTypes.default.node\n};\nBoardContainer.defaultProps = {\n  onDataChange: function onDataChange() {},\n  handleDragStart: function handleDragStart() {},\n  handleDragEnd: function handleDragEnd() {},\n  handleLaneDragStart: function handleLaneDragStart() {},\n  handleLaneDragEnd: function handleLaneDragEnd() {},\n  editable: false,\n  canAddLanes: false,\n  hideCardDeleteIcon: false,\n  draggable: false,\n  collapsibleLanes: false,\n  laneDraggable: true,\n  cardDraggable: true,\n  cardDragClass: 'react_trello_dragClass',\n  laneDragClass: 'react_trello_dragLaneClass',\n  addLaneTitle: '+ Add another lane',\n  addCardTitle: 'Add Card'\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state.lanes ? {\n    reducerData: state\n  } : {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    actions: (0, _redux.bindActionCreators)((0, _objectSpread2.default)({}, boardActions, laneActions), dispatch)\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(BoardContainer);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}