{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport ConfigProvider from '../config-provider';\nimport Item from './item';\n/**\n * Breadcrumb\n */\n\nvar Breadcrumb = (_temp = _class = function (_Component) {\n  _inherits(Breadcrumb, _Component);\n\n  function Breadcrumb() {\n    _classCallCheck(this, Breadcrumb);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Breadcrumb.prototype.render = function render() {\n    var _props = this.props,\n        prefix = _props.prefix,\n        className = _props.className,\n        maxNode = _props.maxNode,\n        children = _props.children,\n        separator = _props.separator,\n        others = _objectWithoutProperties(_props, ['prefix', 'className', 'maxNode', 'children', 'separator']);\n\n    var clazz = classNames(prefix + 'breadcrumb', className);\n    var items = void 0;\n    var length = Children.count(children);\n\n    if (maxNode > 1 && length > maxNode) {\n      var breakpointer = length - maxNode + 1;\n      items = [];\n      Children.forEach(children, function (item, i) {\n        if (i && i === breakpointer) {\n          items.push(React.cloneElement(item, {\n            separator: separator,\n            prefix: prefix,\n            key: i,\n            activated: i === length - 1,\n            className: prefix + 'breadcrumb-text-ellipsis'\n          }, '...'));\n        } else if (!i || i > breakpointer) {\n          items.push(React.cloneElement(item, {\n            separator: separator,\n            prefix: prefix,\n            key: i,\n            activated: i === length - 1\n          }));\n        }\n      });\n    } else {\n      items = Children.map(children, function (item, i) {\n        return React.cloneElement(item, {\n          separator: separator,\n          prefix: prefix,\n          activated: i === length - 1,\n          key: i\n        });\n      });\n    }\n\n    return React.createElement('div', _extends({\n      className: clazz\n    }, others), items);\n  };\n\n  return Breadcrumb;\n}(Component), _class.Item = Item, _class.propTypes = {\n  /**\n   * 样式类名的品牌前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 面包屑子节点，需传入 Breadcrumb.Item\n   */\n  children: function children(props, propName) {\n    Children.forEach(props[propName], function (child) {\n      if (!(child && typeof child.type === 'function' && child.type._typeMark === 'breadcrumb_item')) {\n        throw new Error('Breadcrumb\\'s children must be Breadcrumb.Item!');\n      }\n    });\n  },\n\n  /**\n   * 面包屑最多显示个数，超出部分会被隐藏\n   */\n  maxNode: PropTypes.number,\n\n  /**\n   * 分隔符，可以是文本或 Icon\n   */\n  separator: PropTypes.node,\n  className: PropTypes.any\n}, _class.defaultProps = {\n  prefix: 'next-',\n  maxNode: 100,\n  separator: React.createElement(Icon, {\n    type: 'arrow-right'\n  })\n}, _temp);\nBreadcrumb.displayName = 'Breadcrumb';\nexport default ConfigProvider.config(Breadcrumb);","map":null,"metadata":{},"sourceType":"module"}