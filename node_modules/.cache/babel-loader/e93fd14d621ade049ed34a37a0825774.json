{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component, Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { func, KEYCODE } from '../util';\nimport Overlay from './overlay';\nvar noop = func.noop,\n    makeChain = func.makeChain,\n    bindCtx = func.bindCtx;\n/**\n * Overlay.Popup\n * @description 继承 Overlay 的 API，除非特别说明\n * */\n\nvar Popup = (_temp = _class = function (_Component) {\n  _inherits(Popup, _Component);\n\n  function Popup(props) {\n    _classCallCheck(this, Popup);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible\n    };\n    bindCtx(_this, ['handleTriggerClick', 'handleTriggerKeyDown', 'handleTriggerMouseEnter', 'handleTriggerMouseLeave', 'handleTriggerFocus', 'handleTriggerBlur', 'handleContentMouseEnter', 'handleContentMouseLeave', 'handleContentMouseDown', 'handleRequestClose', 'handleMaskMouseEnter', 'handleMaskMouseLeave']);\n    return _this;\n  }\n\n  Popup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('visible' in nextProps) {\n      this.setState({\n        visible: nextProps.visible\n      });\n    }\n  };\n\n  Popup.prototype.componentWillUnmount = function componentWillUnmount() {\n    var _this2 = this;\n\n    ['_timer', '_hideTimer', '_showTimer'].forEach(function (time) {\n      _this2[time] && clearTimeout(_this2[time]);\n    });\n  };\n\n  Popup.prototype.handleVisibleChange = function handleVisibleChange(visible, type, e) {\n    if (!('visible' in this.props)) {\n      this.setState({\n        visible: visible\n      });\n    }\n\n    this.props.onVisibleChange(visible, type, e);\n  };\n\n  Popup.prototype.handleTriggerClick = function handleTriggerClick(e) {\n    if (this.state.visible && !this.props.canCloseByTrigger) {\n      return;\n    }\n\n    this.handleVisibleChange(!this.state.visible, 'fromTrigger', e);\n  };\n\n  Popup.prototype.handleTriggerKeyDown = function handleTriggerKeyDown(e) {\n    if (e.keyCode === KEYCODE.SPACE || e.keyCode === KEYCODE.ENTER) {\n      e.preventDefault();\n      this.handleTriggerClick(e);\n    }\n  };\n\n  Popup.prototype.handleTriggerMouseEnter = function handleTriggerMouseEnter(e) {\n    var _this3 = this;\n\n    this._mouseNotFirstOnMask = false;\n\n    if (this._hideTimer) {\n      clearTimeout(this._hideTimer);\n      this._hideTimer = null;\n    }\n\n    if (this._showTimer) {\n      clearTimeout(this._showTimer);\n      this._showTimer = null;\n    }\n\n    if (!this.state.visible) {\n      this._showTimer = setTimeout(function () {\n        _this3.handleVisibleChange(true, 'fromTrigger', e);\n      }, this.props.delay);\n    }\n  };\n\n  Popup.prototype.handleTriggerMouseLeave = function handleTriggerMouseLeave(e, type) {\n    var _this4 = this;\n\n    if (this._showTimer) {\n      clearTimeout(this._showTimer);\n      this._showTimer = null;\n    }\n\n    if (this.state.visible) {\n      this._hideTimer = setTimeout(function () {\n        _this4.handleVisibleChange(false, type || 'fromTrigger', e);\n      }, this.props.delay);\n    }\n  };\n\n  Popup.prototype.handleTriggerFocus = function handleTriggerFocus(e) {\n    this.handleVisibleChange(true, 'fromTrigger', e);\n  };\n\n  Popup.prototype.handleTriggerBlur = function handleTriggerBlur(e) {\n    if (!this._isForwardContent) {\n      this.handleVisibleChange(false, 'fromTrigger', e);\n    }\n\n    this._isForwardContent = false;\n  };\n\n  Popup.prototype.handleContentMouseDown = function handleContentMouseDown() {\n    this._isForwardContent = true;\n  };\n\n  Popup.prototype.handleContentMouseEnter = function handleContentMouseEnter() {\n    clearTimeout(this._hideTimer);\n  };\n\n  Popup.prototype.handleContentMouseLeave = function handleContentMouseLeave(e) {\n    this.handleTriggerMouseLeave(e, 'fromContent');\n  };\n\n  Popup.prototype.handleMaskMouseEnter = function handleMaskMouseEnter() {\n    if (!this._mouseNotFirstOnMask) {\n      clearTimeout(this._hideTimer);\n      this._hideTimer = null;\n      this._mouseNotFirstOnMask = false;\n    }\n  };\n\n  Popup.prototype.handleMaskMouseLeave = function handleMaskMouseLeave() {\n    this._mouseNotFirstOnMask = true;\n  };\n\n  Popup.prototype.handleRequestClose = function handleRequestClose(type, e) {\n    this.handleVisibleChange(false, type, e);\n  };\n\n  Popup.prototype.renderTrigger = function renderTrigger() {\n    var _this5 = this;\n\n    var _props = this.props,\n        trigger = _props.trigger,\n        disabled = _props.disabled;\n    var props = {\n      key: 'trigger',\n      'aria-haspopup': true,\n      'aria-expanded': this.state.visible\n    };\n\n    if (!disabled) {\n      var triggerType = this.props.triggerType;\n      var triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];\n      var _trigger$props = trigger.props,\n          onClick = _trigger$props.onClick,\n          onKeyDown = _trigger$props.onKeyDown,\n          onMouseEnter = _trigger$props.onMouseEnter,\n          onMouseLeave = _trigger$props.onMouseLeave,\n          onFocus = _trigger$props.onFocus,\n          onBlur = _trigger$props.onBlur;\n      triggerTypes.forEach(function (triggerType) {\n        switch (triggerType) {\n          case 'click':\n            props.onClick = makeChain(_this5.handleTriggerClick, onClick);\n            props.onKeyDown = makeChain(_this5.handleTriggerKeyDown, onKeyDown);\n            break;\n\n          case 'hover':\n            props.onMouseEnter = makeChain(_this5.handleTriggerMouseEnter, onMouseEnter);\n            props.onMouseLeave = makeChain(_this5.handleTriggerMouseLeave, onMouseLeave);\n            break;\n\n          case 'focus':\n            props.onFocus = makeChain(_this5.handleTriggerFocus, onFocus);\n            props.onBlur = makeChain(_this5.handleTriggerBlur, onBlur);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    return React.cloneElement(trigger, props);\n  };\n\n  Popup.prototype.renderContent = function renderContent() {\n    var _this6 = this;\n\n    var _props2 = this.props,\n        children = _props2.children,\n        triggerType = _props2.triggerType;\n    var triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];\n    var content = Children.only(children);\n    var _content$props = content.props,\n        onMouseDown = _content$props.onMouseDown,\n        onMouseEnter = _content$props.onMouseEnter,\n        onMouseLeave = _content$props.onMouseLeave;\n    var props = {\n      key: 'portal'\n    };\n    triggerTypes.forEach(function (triggerType) {\n      switch (triggerType) {\n        case 'focus':\n          props.onMouseDown = makeChain(_this6.handleContentMouseDown, onMouseDown);\n          break;\n\n        case 'hover':\n          props.onMouseEnter = makeChain(_this6.handleContentMouseEnter, onMouseEnter);\n          props.onMouseLeave = makeChain(_this6.handleContentMouseLeave, onMouseLeave);\n          break;\n\n        default:\n          break;\n      }\n    });\n    return React.cloneElement(content, props);\n  };\n\n  Popup.prototype.renderPortal = function renderPortal() {\n    var _this7 = this;\n\n    var _props3 = this.props,\n        target = _props3.target,\n        safeNode = _props3.safeNode,\n        followTrigger = _props3.followTrigger,\n        triggerType = _props3.triggerType,\n        hasMask = _props3.hasMask,\n        wrapperStyle = _props3.wrapperStyle,\n        others = _objectWithoutProperties(_props3, ['target', 'safeNode', 'followTrigger', 'triggerType', 'hasMask', 'wrapperStyle']);\n\n    var container = this.props.container;\n\n    var findTriggerNode = function findTriggerNode() {\n      return findDOMNode(_this7) || {};\n    };\n\n    var safeNodes = Array.isArray(safeNode) ? [].concat(safeNode) : [safeNode];\n    safeNodes.unshift(findTriggerNode);\n    var newWrapperStyle = wrapperStyle || {};\n\n    if (followTrigger) {\n      container = function container(trigger) {\n        return trigger.parentNode;\n      };\n\n      newWrapperStyle.position = 'relative';\n    }\n\n    if (triggerType === 'hover' && hasMask) {\n      others.onMaskMouseEnter = this.handleMaskMouseEnter;\n      others.onMaskMouseLeave = this.handleMaskMouseLeave;\n    }\n\n    return React.createElement(Overlay, _extends({}, others, {\n      key: 'overlay',\n      ref: function ref(overlay) {\n        return _this7.overlay = overlay;\n      },\n      visible: this.state.visible,\n      target: target || findTriggerNode,\n      container: container,\n      safeNode: safeNodes,\n      wrapperStyle: newWrapperStyle,\n      triggerType: triggerType,\n      hasMask: hasMask,\n      onRequestClose: this.handleRequestClose\n    }), this.renderContent());\n  };\n\n  Popup.prototype.render = function render() {\n    return [this.renderTrigger(), this.renderPortal()];\n  };\n\n  return Popup;\n}(Component), _class.propTypes = {\n  /**\n   * 弹层内容\n   */\n  children: PropTypes.node,\n\n  /**\n   * 触发弹层显示或隐藏的元素\n   */\n  trigger: PropTypes.element,\n\n  /**\n   * 触发弹层显示或隐藏的操作类型，可以是 'click'，'hover'，'focus'，或者它们组成的数组，如 ['hover', 'focus']\n   */\n  triggerType: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * 弹层当前是否显示\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 弹层默认是否显示\n   */\n  defaultVisible: PropTypes.bool,\n\n  /**\n   * 弹层显示或隐藏时触发的回调函数\n   * @param {Boolean} visible 弹层是否显示\n   * @param {String} type 触发弹层显示或隐藏的来源\n   * @param {Object} e DOM事件\n   */\n  onVisibleChange: PropTypes.func,\n\n  /**\n   * 设置此属性，弹层无法显示或隐藏\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效\n   */\n  delay: PropTypes.number,\n\n  /**\n   * 触发元素是否可以关闭弹层\n   */\n  canCloseByTrigger: PropTypes.bool,\n\n  /**\n   * 弹层定位的参照元素\n   * @default target 属性，即触发元素\n   */\n  target: PropTypes.any,\n  safeNode: PropTypes.any,\n\n  /**\n   * 是否跟随trigger滚动\n   */\n  followTrigger: PropTypes.bool,\n  container: PropTypes.any,\n  hasMask: PropTypes.bool,\n  wrapperStyle: PropTypes.object,\n  rtl: PropTypes.bool\n}, _class.defaultProps = {\n  triggerType: 'hover',\n  defaultVisible: false,\n  onVisibleChange: noop,\n  disabled: false,\n  delay: 200,\n  canCloseByTrigger: true,\n  followTrigger: false,\n  container: function container() {\n    return document.body;\n  },\n  rtl: false\n}, _temp);\nPopup.displayName = 'Popup';\nexport { Popup as default };","map":null,"metadata":{},"sourceType":"module"}