{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Overlay from '../../overlay';\nimport { func } from '../../util';\nimport ConfigProvider from '../../config-provider';\nimport menu from './menu';\nvar bindCtx = func.bindCtx;\nvar getContextProps = ConfigProvider.getContextProps;\nvar Menu = ConfigProvider.config(menu);\nvar menuInstance = void 0;\nvar ContextMenu = (_temp = _class = function (_Component) {\n  _inherits(ContextMenu, _Component);\n\n  function ContextMenu(props) {\n    _classCallCheck(this, ContextMenu);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      visible: true\n    };\n    bindCtx(_this, ['handleOverlayClose', 'handleOverlayOpen', 'handleItemClick', 'getOverlay']);\n    return _this;\n  }\n\n  ContextMenu.prototype.getOverlay = function getOverlay(ref) {\n    this.overlay = ref;\n  };\n\n  ContextMenu.prototype.close = function close() {\n    this.setState({\n      visible: false\n    });\n    menuInstance = null;\n  };\n\n  ContextMenu.prototype.handleOverlayClose = function handleOverlayClose(triggerType, e) {\n    var clickedPopupMenu = triggerType === 'docClick' && this.popupNodes.some(function (node) {\n      return node.contains(e.target);\n    });\n\n    if (!clickedPopupMenu) {\n      this.close();\n      var overlayProps = this.props.overlayProps;\n\n      if (overlayProps && overlayProps.onRequestClose) {\n        for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          others[_key - 2] = arguments[_key];\n        }\n\n        overlayProps.onRequestClose.apply(overlayProps, [triggerType, e].concat(others));\n      }\n    }\n  };\n\n  ContextMenu.prototype.handleOverlayOpen = function handleOverlayOpen() {\n    this.popupNodes = this.overlay.getInstance().getContent().getInstance().popupNodes;\n    var overlayProps = this.props.overlayProps;\n\n    if (overlayProps && overlayProps.onOpen) {\n      overlayProps.onOpen();\n    }\n  };\n\n  ContextMenu.prototype.handleItemClick = function handleItemClick() {\n    var _props;\n\n    this.close();\n    this.props.onItemClick && (_props = this.props).onItemClick.apply(_props, arguments);\n  };\n\n  ContextMenu.prototype.render = function render() {\n    var _cx, _cx2;\n\n    var _props2 = this.props,\n        className = _props2.className,\n        popupClassName = _props2.popupClassName,\n        target = _props2.target,\n        align = _props2.align,\n        offset = _props2.offset,\n        afterClose = _props2.afterClose,\n        _props2$overlayProps = _props2.overlayProps,\n        overlayProps = _props2$overlayProps === undefined ? {} : _props2$overlayProps,\n        others = _objectWithoutProperties(_props2, ['className', 'popupClassName', 'target', 'align', 'offset', 'afterClose', 'overlayProps']);\n\n    var contextProps = getContextProps(this.props);\n    var prefix = contextProps.prefix;\n    var visible = this.state.visible;\n\n    var newOverlayProps = _extends({}, contextProps, overlayProps, {\n      target: target,\n      align: align,\n      offset: offset,\n      afterClose: afterClose,\n      visible: visible,\n      onRequestClose: this.handleOverlayClose,\n      onOpen: this.handleOverlayOpen,\n      ref: this.getOverlay\n    });\n\n    var menuProps = _extends({}, contextProps, {\n      triggerType: 'hover'\n    }, others, {\n      className: cx((_cx = {}, _cx[prefix + 'context'] = true, _cx[className] = !!className, _cx)),\n      popupClassName: cx((_cx2 = {}, _cx2[prefix + 'context'] = true, _cx2[popupClassName] = !!popupClassName, _cx2)),\n      onItemClick: this.handleItemClick\n    });\n\n    newOverlayProps.rtl = false;\n    return React.createElement(Overlay, newOverlayProps, React.createElement(Menu, menuProps));\n  };\n\n  return ContextMenu;\n}(Component), _class.propTypes = {\n  className: PropTypes.string,\n  popupClassName: PropTypes.string,\n  target: PropTypes.any,\n  align: PropTypes.string,\n  offset: PropTypes.array,\n  overlayProps: PropTypes.object,\n  afterClose: PropTypes.func,\n  mode: PropTypes.oneOf(['inline', 'popup']),\n  onOpen: PropTypes.func,\n  onItemClick: PropTypes.func\n}, _class.defaultProps = {\n  prefix: 'next-',\n  align: 'tl tl',\n  mode: 'popup'\n}, _temp);\n/**\n * 创建上下文菜单\n * @exportName create\n * @param {Object} props 属性对象\n */\n\nContextMenu.displayName = 'ContextMenu';\nexport default function create(props) {\n  if (menuInstance) {\n    menuInstance.destroy();\n  }\n  /* eslint-disable no-unused-vars */\n\n\n  var afterClose = props.afterClose,\n      others = _objectWithoutProperties(props, ['afterClose']);\n  /* eslint-enable no-unused-vars */\n\n\n  var div = document.createElement('div');\n  document.body.appendChild(div);\n\n  var closeChain = function closeChain() {\n    unmountComponentAtNode(div);\n    document.body.removeChild(div);\n    afterClose && afterClose();\n  };\n\n  var newContext = ConfigProvider.getContext();\n  var menu = void 0;\n  render(React.createElement(ConfigProvider, newContext, React.createElement(ContextMenu, _extends({\n    ref: function ref(_ref) {\n      menu = _ref;\n    },\n    afterClose: closeChain\n  }, others))), div);\n  menuInstance = {\n    destroy: function destroy() {\n      if (menu) {\n        menu.close();\n      }\n    }\n  };\n  return menuInstance;\n}","map":null,"metadata":{},"sourceType":"module"}