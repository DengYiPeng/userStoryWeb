{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React, { Component, Children } from 'react';\nimport { findDOMNode, createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { func } from '../util';\nimport findNode from './utils/find-node';\nvar makeChain = func.makeChain;\nvar Gateway = (_temp2 = _class = function (_Component) {\n  _inherits(Gateway, _Component);\n\n  function Gateway() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Gateway);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.saveChildRef = function (ref) {\n      _this.child = ref;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Gateway.prototype.componentDidMount = function componentDidMount() {\n    this.containerNode = this.getContainerNode(this.props);\n    this.forceUpdate();\n  };\n\n  Gateway.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.containerNode = this.getContainerNode(nextProps);\n  };\n\n  Gateway.prototype.getContainerNode = function getContainerNode(props) {\n    var targetNode = findNode(props.target);\n    return findNode(props.container, targetNode);\n  };\n\n  Gateway.prototype.getChildNode = function getChildNode() {\n    return findDOMNode(this.child);\n  };\n\n  Gateway.prototype.render = function render() {\n    if (!this.containerNode) {\n      return null;\n    }\n\n    var children = this.props.children;\n    var child = children ? Children.only(children) : null;\n\n    if (!child) {\n      return null;\n    }\n\n    if (typeof child.ref === 'string') {\n      throw new Error('Can not set ref by string in Gateway, use function instead.');\n    }\n\n    child = React.cloneElement(child, {\n      ref: makeChain(this.saveChildRef, child.ref)\n    });\n    return createPortal(child, this.containerNode);\n  };\n\n  return Gateway;\n}(Component), _class.propTypes = {\n  children: PropTypes.node,\n  container: PropTypes.any,\n  target: PropTypes.any\n}, _class.defaultProps = {\n  container: function container() {\n    return document.body;\n  }\n}, _temp2);\nGateway.displayName = 'Gateway';\nexport { Gateway as default };","map":null,"metadata":{},"sourceType":"module"}