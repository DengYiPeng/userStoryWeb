{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport Button from '../button';\nimport Input from '../input';\nimport ConfigProvider from '../config-provider';\nimport { func, obj } from '../util';\n/** NumberPicker */\n\nvar NumberPicker = (_temp = _class = function (_React$Component) {\n  _inherits(NumberPicker, _React$Component);\n\n  function NumberPicker(props) {\n    _classCallCheck(this, NumberPicker);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    var value = void 0;\n\n    if ('value' in props) {\n      value = props.value;\n    } else {\n      value = props.defaultValue;\n    }\n\n    _this.state = {\n      value: typeof value === 'undefined' ? '' : value,\n      hasFocused: false\n    };\n    return _this;\n  }\n\n  NumberPicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      this.setState({\n        value: nextProps.value === undefined ? '' : nextProps.value\n      });\n    }\n  };\n\n  NumberPicker.prototype.onChange = function onChange(value, e) {\n    if (this.props.editable === true) {\n      value = value.trim(); // ignore space\n\n      if (this.state.value === value) {\n        return;\n      } // in case of autoCorrect ('0.'=>0, '0.0'=>0) , we have these steps\n\n\n      if (value) {\n        // ignore when input start form '-'\n        if (value === '-' || this.state.value === '-') {\n          this.setState({\n            value: value\n          });\n          return;\n        } // ignore when next value = prev value.\n        // ps: Number('0.')=0 ; Number('0.0')=0;\n        // but take care of Number('')=0;\n\n\n        if (Number(this.state.value) === Number(value)) {\n          this.setState({\n            value: value\n          });\n          return;\n        } // ignore when value < min (because number is inputted one by one)\n\n\n        if (!isNaN(value) && Number(value) < this.props.min) {\n          this.setState({\n            value: value\n          });\n          return;\n        }\n      }\n\n      this.setInputValue(value, e);\n    }\n  };\n  /**\n   * @param {Float} currentValue correct value\n   * @param {String} oldValue input value\n   */\n\n\n  NumberPicker.prototype.onCorrect = function onCorrect(currentValue, oldValue) {\n    this.props.onCorrect({\n      currentValue: currentValue,\n      oldValue: oldValue\n    });\n  };\n\n  NumberPicker.prototype.onKeyDown = function onKeyDown(e) {\n    var _props;\n\n    if (e.keyCode === 38) {\n      this.up(e);\n    } else if (e.keyCode === 40) {\n      this.down(e);\n    }\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_props = this.props).onKeyDown.apply(_props, [e].concat(args));\n  };\n\n  NumberPicker.prototype.onFocus = function onFocus(e) {\n    var onFocus = this.props.onFocus;\n    this.setFocus(true);\n\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    onFocus && onFocus.apply(undefined, [e].concat(args));\n  };\n\n  NumberPicker.prototype.onBlur = function onBlur(e) {\n    var value = this.getCurrentValidValue(e.target.value.trim());\n\n    if (this.state.value !== value) {\n      this.setValue(value, e);\n    }\n\n    this.setFocus(false);\n    var onBlur = this.props.onBlur;\n\n    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    onBlur && onBlur.apply(undefined, [e].concat(args));\n  };\n\n  NumberPicker.prototype.getCurrentValidValue = function getCurrentValidValue(value) {\n    var val = value;\n    var props = this.props;\n\n    if (val === '') {\n      val = '';\n    } else if (!isNaN(val)) {\n      val = Number(val);\n\n      if (val < props.min) {\n        val = props.min;\n      }\n\n      if (val > props.max) {\n        val = props.max;\n      } // precision=2  and input from 1.99 to 1.999, should stay with 1.99 not 2\n\n\n      var strValue = '' + val;\n      var pointPos = strValue.indexOf('.');\n      var cutPos = pointPos + 1 + this.getPrecision();\n\n      if (pointPos !== -1 && strValue.length > cutPos) {\n        val = Number(strValue.substr(0, cutPos));\n      }\n    } else {\n      val = this.state.value;\n    }\n\n    if ('' + val !== '' + value) {\n      this.onCorrect(val, value);\n    }\n\n    return val;\n  };\n\n  NumberPicker.prototype.setValue = function setValue(v, e, triggerType) {\n    if (!('value' in this.props)) {\n      this.setState({\n        value: v\n      });\n    }\n\n    this.props.onChange(isNaN(v) || v === '' ? undefined : v, _extends({}, e, {\n      triggerType: triggerType\n    }));\n  };\n\n  NumberPicker.prototype.setInputValue = function setInputValue(v, e) {\n    var value = this.getCurrentValidValue(v);\n\n    if (this.state.value !== value) {\n      this.setValue(value, e);\n    }\n  };\n\n  NumberPicker.prototype.setFocus = function setFocus(status) {\n    var format = this.props.format; // Only trigger `setState` if `format` is settled to avoid unnecessary rendering\n\n    if (typeof format === 'function') {\n      this.setState({\n        hasFocused: status\n      });\n    }\n  };\n\n  NumberPicker.prototype.getPrecision = function getPrecision() {\n    var props = this.props;\n    var stepString = props.step.toString();\n\n    if (stepString.indexOf('e-') >= 0) {\n      return parseInt(stepString.slice(stepString.indexOf('e-')), 10);\n    }\n\n    var precision = 0;\n\n    if (stepString.indexOf('.') >= 0) {\n      precision = stepString.length - stepString.indexOf('.') - 1;\n    }\n\n    return Math.max(precision, this.props.precision);\n  };\n\n  NumberPicker.prototype.getPrecisionFactor = function getPrecisionFactor() {\n    var precision = this.getPrecision();\n    return Math.pow(10, precision);\n  };\n\n  NumberPicker.prototype.upStep = function upStep(val) {\n    var _props2 = this.props,\n        step = _props2.step,\n        min = _props2.min;\n    var precisionFactor = this.getPrecisionFactor();\n    var result = void 0;\n\n    if (typeof val === 'number') {\n      result = (precisionFactor * val + precisionFactor * step) / precisionFactor;\n      result = this.hackChrome(result);\n    } else {\n      result = min === -Infinity ? step : min;\n    }\n\n    return result;\n  };\n\n  NumberPicker.prototype.downStep = function downStep(val) {\n    var _props3 = this.props,\n        step = _props3.step,\n        min = _props3.min;\n    var precisionFactor = this.getPrecisionFactor();\n    var result = void 0;\n\n    if (typeof val === 'number') {\n      result = (precisionFactor * val - precisionFactor * step) / precisionFactor;\n      result = this.hackChrome(result);\n    } else {\n      result = min === -Infinity ? -step : min;\n    }\n\n    return result;\n  };\n  /**\n   * fix bug in chrome browser\n   * 0.28 + 0.01 = 0.29000000000000004\n   * 0.29 - 0.01 = 0.27999999999999997\n   * @param {Number} value value\n   */\n\n\n  NumberPicker.prototype.hackChrome = function hackChrome(value) {\n    var precision = this.getPrecision();\n\n    if (precision > 0) {\n      return Number(Number(value).toFixed(precision));\n    }\n\n    return value;\n  };\n\n  NumberPicker.prototype.step = function step(type, e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    var _props4 = this.props,\n        disabled = _props4.disabled,\n        min = _props4.min,\n        max = _props4.max;\n\n    if (disabled) {\n      return;\n    }\n\n    var value = this.state.value;\n\n    if (isNaN(value)) {\n      return;\n    }\n\n    var val = this[type + 'Step'](value);\n\n    if (val > max || val < min) {\n      return;\n    }\n\n    this.setValue(val, e, type);\n  };\n\n  NumberPicker.prototype.down = function down(e) {\n    this.step('down', e);\n  };\n\n  NumberPicker.prototype.up = function up(e) {\n    this.step('up', e);\n  };\n\n  NumberPicker.prototype.renderValue = function renderValue() {\n    var _state = this.state,\n        value = _state.value,\n        hasFocused = _state.hasFocused;\n    var format = this.props.format;\n    return typeof format === 'function' && !hasFocused ? format(value) : value;\n  };\n\n  NumberPicker.prototype.focus = function focus() {\n    this.inputRef.getInstance().focus();\n  };\n\n  NumberPicker.prototype.saveInputRef = function saveInputRef(ref) {\n    this.inputRef = ref;\n  };\n\n  NumberPicker.prototype.render = function render() {\n    var _classNames;\n\n    var _props5 = this.props,\n        type = _props5.type,\n        prefix = _props5.prefix,\n        disabled = _props5.disabled,\n        style = _props5.style,\n        className = _props5.className,\n        size = _props5.size,\n        max = _props5.max,\n        min = _props5.min,\n        autoFocus = _props5.autoFocus,\n        editable = _props5.editable,\n        state = _props5.state;\n    var prefixCls = prefix + 'number-picker';\n    var cls = classNames((_classNames = {}, _classNames[prefixCls] = true, _classNames[prefixCls + '-' + this.props.type] = this.props.type, _classNames['' + prefix + size] = true, _classNames[className] = className, _classNames));\n    var upDisabled = false;\n    var downDisabled = false;\n    var value = this.state.value;\n\n    if (!isNaN(value)) {\n      var val = Number(value);\n\n      if (val >= max) {\n        upDisabled = true;\n      }\n\n      if (val <= min) {\n        downDisabled = true;\n      }\n    }\n\n    var innerAfter = null,\n        innerAfterClassName = null,\n        addonBefore = null,\n        addonAfter = null;\n\n    if (type === 'normal') {\n      innerAfter = [React.createElement(Button, {\n        disabled: disabled || upDisabled,\n        onClick: this.up.bind(this),\n        key: '0'\n      }, React.createElement(Icon, {\n        size: 'xxs',\n        type: 'arrow-up'\n      })), React.createElement(Button, {\n        disabled: disabled || downDisabled,\n        onClick: this.down.bind(this),\n        key: '1'\n      }, React.createElement(Icon, {\n        size: 'xxs',\n        type: 'arrow-down'\n      }))];\n      innerAfterClassName = prefixCls + '-handler';\n    } else {\n      addonBefore = React.createElement(Button, {\n        size: size,\n        disabled: disabled || downDisabled,\n        onClick: this.down.bind(this)\n      }, React.createElement(Icon, {\n        type: 'minus',\n        size: 'xs'\n      }));\n      addonAfter = React.createElement(Button, {\n        size: size,\n        disabled: disabled || upDisabled,\n        onClick: this.up.bind(this)\n      }, React.createElement(Icon, {\n        type: 'add',\n        size: 'xs'\n      }));\n    }\n\n    var others = obj.pickOthers(NumberPicker.propTypes, this.props);\n    var dataAttrs = obj.pickAttrsWith(this.props, 'data-');\n    return React.createElement('span', _extends({\n      className: cls,\n      style: style\n    }, dataAttrs), React.createElement(Input, _extends({}, others, {\n      state: state === 'error' ? 'error' : null,\n      onBlur: this.onBlur.bind(this),\n      onFocus: this.onFocus.bind(this),\n      onKeyDown: this.onKeyDown.bind(this),\n      autoFocus: autoFocus,\n      readOnly: !editable,\n      value: this.renderValue(),\n      disabled: disabled,\n      size: size,\n      onChange: this.onChange.bind(this),\n      ref: this.saveInputRef.bind(this),\n      innerAfter: innerAfter,\n      innerAfterClassName: innerAfterClassName,\n      addonBefore: addonBefore,\n      addonAfter: addonAfter\n    })));\n  };\n\n  return NumberPicker;\n}(React.Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 设置类型\n   * @enumdesc 普通, 内联\n   */\n  type: PropTypes.oneOf(['normal', 'inline']),\n\n  /**\n   * 大小\n   */\n  size: PropTypes.oneOf(['large', 'medium']),\n\n  /**\n   * 当前值\n   */\n  value: PropTypes.number,\n\n  /**\n   * 默认值\n   */\n  defaultValue: PropTypes.number,\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 步长\n   */\n  step: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * 保留小数点后位数\n   */\n  precision: PropTypes.number,\n\n  /**\n   * 用户是否可以输入\n   */\n  editable: PropTypes.bool,\n\n  /**\n   * 自动焦点\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * 数值被改变的事件\n   * @param {Number} value 数据\n   * @param {Event} e DOM事件对象\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 键盘按下\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * 焦点获得\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * 焦点失去\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * 数值订正后的回调\n   * @param {Object} obj {currentValue,oldValue:String}\n   */\n  onCorrect: PropTypes.func,\n\n  /**\n   * 最大值\n   */\n  max: PropTypes.number,\n\n  /**\n   * 最小值\n   */\n  min: PropTypes.number,\n\n  /**\n   * 自定义class\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: PropTypes.object,\n  state: PropTypes.oneOf(['error']),\n\n  /**\n   * 格式化当前值\n   * @param {Number} value\n   * @return {String|Number}\n   */\n  format: PropTypes.func\n}, _class.defaultProps = {\n  prefix: 'next-',\n  max: Infinity,\n  min: -Infinity,\n  type: 'normal',\n  size: 'medium',\n  step: 1,\n  style: {},\n  precision: 0,\n  editable: true,\n  onChange: func.noop,\n  onKeyDown: func.noop,\n  onBlur: func.noop,\n  onCorrect: func.noop\n}, _temp);\nNumberPicker.displayName = 'NumberPicker';\nexport default ConfigProvider.config(NumberPicker);","map":null,"metadata":{},"sourceType":"module"}