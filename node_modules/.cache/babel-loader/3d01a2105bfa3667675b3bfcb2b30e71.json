{"ast":null,"code":"import _typeof from 'babel-runtime/helpers/typeof';\nimport { camelcase, hyphenate } from './string';\nimport { each } from './object';\n/**\n * 是否能使用 DOM 方法\n * @type {Boolean}\n */\n\nexport var hasDOM = typeof window !== 'undefined' && !!window.document && !!document.createElement;\n/**\n * 节点是否包含指定 className\n * @param  {Element}  node\n * @param  {String}  className\n * @return {Boolean}\n *\n * @example\n * dom.hasClass(document.body, 'foo');\n */\n\nexport function hasClass(node, className) {\n  /* istanbul ignore if */\n  if (!hasDOM || !node) {\n    return false;\n  }\n\n  if (node.classList) {\n    return node.classList.contains(className);\n  } else {\n    return node.className.indexOf(className) > -1;\n  }\n}\n/**\n * 添加 className\n * @param {Element} node\n * @param {String} className\n *\n * @example\n * dom.addClass(document.body, 'foo');\n */\n\nexport function addClass(node, className, _force) {\n  /* istanbul ignore if */\n  if (!hasDOM || !node) {\n    return;\n  }\n\n  if (node.classList) {\n    node.classList.add(className);\n  } else if (_force === true || !hasClass(node, className)) {\n    node.className += ' ' + className;\n  }\n}\n/**\n * 移除 className\n * @param  {Element} node\n * @param  {String} className\n *\n * @example\n * dom.removeClass(document.body, 'foo');\n */\n\nexport function removeClass(node, className, _force) {\n  /* istanbul ignore if */\n  if (!hasDOM || !node) {\n    return;\n  }\n\n  if (node.classList) {\n    node.classList.remove(className);\n  } else if (_force === true || hasClass(node, className)) {\n    node.className = node.className.replace(className, '').replace(/\\s+/g, ' ').trim();\n  }\n}\n/**\n * 切换 className\n * @param  {Element} node\n * @param  {String} className\n * @return {Boolean}           执行后节点上是否还有此 className\n *\n * @example\n * dom.toggleClass(document.body, 'foo');\n */\n\nexport function toggleClass(node, className) {\n  /* istanbul ignore if */\n  if (!hasDOM || !node) {\n    return false;\n  }\n\n  if (node.classList) {\n    return node.classList.toggle(className);\n  } else {\n    var flag = hasClass(node, className);\n    flag ? removeClass(node, className, true) : addClass(node, className, true);\n    return !flag;\n  }\n}\n/**\n * 元素是否匹配 CSS 选择器\n * @param  {Element} node       DOM 节点\n * @param  {String}  selector   CSS 选择器\n * @return {Boolean}\n *\n * @example\n * dom.matches(mountNode, '.container'); // boolean\n */\n\nexport var matches = function () {\n  var matchesFn = null;\n  /* istanbul ignore else */\n\n  if (hasDOM) {\n    var _body = document.body || document.head;\n\n    matchesFn = _body.matches ? 'matches' : _body.webkitMatchesSelector ? 'webkitMatchesSelector' : _body.msMatchesSelector ? 'msMatchesSelector' : _body.mozMatchesSelector ? 'mozMatchesSelector' : null;\n  }\n\n  return function (node, selector) {\n    if (!hasDOM || !node) {\n      return false;\n    }\n\n    return matchesFn ? node[matchesFn](selector) : false;\n  };\n}();\n/**\n * 获取元素计算后的样式\n * @private\n * @param  {Element} node\n * @return {Object}\n */\n\nfunction _getComputedStyle(node) {\n  return node && node.nodeType === 1 ? window.getComputedStyle(node, null) : {};\n}\n\nvar PIXEL_PATTERN = /margin|padding|width|height|max|min|offset|size/i;\nvar removePixel = {\n  left: 1,\n  top: 1,\n  right: 1,\n  bottom: 1\n};\n/**\n * 校验并修正元素的样式属性值\n * @private\n * @param  {Element} node\n * @param  {String} type\n * @param  {Number} value\n */\n\nfunction _getStyleValue(node, type, value) {\n  type = type.toLowerCase();\n\n  if (value === 'auto') {\n    if (type === 'height') {\n      return node.offsetHeight || 0;\n    }\n\n    if (type === 'width') {\n      return node.offsetWidth || 0;\n    }\n  }\n\n  if (!(type in removePixel)) {\n    // 属性值是否需要去掉 px 单位，这里假定此类的属性值都是 px 为单位的\n    removePixel[type] = PIXEL_PATTERN.test(type);\n  }\n\n  return removePixel[type] ? parseFloat(value) || 0 : value;\n}\n\nvar floatMap = {\n  cssFloat: 1,\n  styleFloat: 1,\n  float: 1\n};\n/**\n * 获取元素计算后的样式\n * @param  {Element} node DOM 节点\n * @param  {String} name 属性名\n * @return {Number|Object}\n */\n\nexport function getStyle(node, name) {\n  /* istanbul ignore if */\n  if (!hasDOM || !node) {\n    return null;\n  }\n\n  var style = _getComputedStyle(node); // 如果不指定属性名，则返回全部值\n\n\n  if (arguments.length === 1) {\n    return style;\n  }\n\n  name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;\n  return _getStyleValue(node, name, style.getPropertyValue(hyphenate(name)) || node.style[camelcase(name)]);\n}\n/**\n * 设置元素的样式\n * @param {Element} node  DOM 节点\n * @param {Object|String} name  属性名，或者是一个对象，包含多个属性\n * @param {Number|String} value 属性值\n *\n * @example\n * // 设置单个属性值\n * dom.setStyle(mountNode, 'width', 100);\n * // 设置多条属性值\n * dom.setStyle(mountNode, {\n *     width: 100,\n *     height: 200\n * });\n */\n\nexport function setStyle(node, name, value) {\n  /* istanbul ignore if */\n  if (!hasDOM || !node) {\n    return false;\n  } // 批量设置多个值\n\n\n  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object' && arguments.length === 2) {\n    each(name, function (val, key) {\n      return setStyle(node, key, val);\n    });\n  } else {\n    name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;\n\n    if (typeof value === 'number' && PIXEL_PATTERN.test(name)) {\n      value = value + 'px';\n    }\n\n    node.style[camelcase(name)] = value; // IE8 support\n  }\n}\n/**\n * 获取默认的滚动条大小\n * @return {Object} width, height\n */\n\nexport function scrollbar() {\n  var scrollDiv = document.createElement('div');\n  setStyle(scrollDiv, {\n    position: 'absolute',\n    width: '100px',\n    height: '100px',\n    overflow: 'scroll',\n    top: '-9999px'\n  });\n  document.body.appendChild(scrollDiv);\n  var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  var scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;\n  document.body.removeChild(scrollDiv);\n  return {\n    width: scrollbarWidth,\n    height: scrollbarHeight\n  };\n}\n/**\n * 获取元素距离视口顶部和左边的偏移距离\n * @return {Object} top, left\n */\n\nexport function getOffset(node) {\n  var rect = node.getBoundingClientRect();\n  var win = node.ownerDocument.defaultView;\n  return {\n    top: rect.top + win.pageYOffset,\n    left: rect.left + win.pageXOffset\n  };\n}","map":null,"metadata":{},"sourceType":"module"}