{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ConfigProvider from '../config-provider';\n/**\n * Form.Error\n * @description 自定义错误展示\n * @order 4\n */\n\nvar Error = (_temp2 = _class = function (_React$Component) {\n  _inherits(Error, _React$Component);\n\n  function Error() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Error);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.itemRender = function (errors) {\n      return errors.length ? errors : null;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Error.prototype.render = function render() {\n    var _classNames;\n\n    var _props = this.props,\n        children = _props.children,\n        name = _props.name,\n        prefix = _props.prefix,\n        style = _props.style,\n        className = _props.className,\n        _field = _props.field,\n        others = _objectWithoutProperties(_props, ['children', 'name', 'prefix', 'style', 'className', 'field']);\n\n    if (children && typeof children !== 'function') {\n      return React.createElement('div', {\n        className: prefix + 'form-item-help'\n      }, children);\n    }\n\n    var field = this.context._formField || _field;\n\n    if (!field || !name) {\n      return null;\n    }\n\n    var isSingle = typeof name === 'string';\n    var names = isSingle ? [name] : name;\n    var errorArr = [];\n\n    if (names.length) {\n      var errors = field.getErrors(names);\n      Object.keys(errors).forEach(function (key) {\n        if (errors[key]) {\n          errorArr.push(errors[key]);\n        }\n      });\n    }\n\n    var result = null;\n\n    if (typeof children === 'function') {\n      result = children(errorArr, isSingle ? field.getState(name) : undefined);\n    } else {\n      result = this.itemRender(errorArr);\n    }\n\n    if (!result) {\n      return null;\n    }\n\n    var cls = classNames((_classNames = {}, _classNames[prefix + 'form-item-help'] = true, _classNames[className] = className, _classNames));\n    return React.createElement('div', _extends({}, others, {\n      className: cls,\n      style: style\n    }), result);\n  };\n\n  return Error;\n}(React.Component), _class.propTypes = {\n  /**\n   * 表单名\n   */\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * 自定义 field (在 Form 内不需要设置)\n   */\n  field: PropTypes.object,\n  style: PropTypes.object,\n  className: PropTypes.string,\n\n  /**\n   * 自定义错误渲染, 可以是 node 或者 function(errors, state)\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  prefix: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-'\n}, _class.contextTypes = {\n  _formField: PropTypes.object\n}, _class._typeMark = 'form_error', _temp2);\nError.displayName = 'Error';\nexport default ConfigProvider.config(Error);","map":null,"metadata":{},"sourceType":"module"}