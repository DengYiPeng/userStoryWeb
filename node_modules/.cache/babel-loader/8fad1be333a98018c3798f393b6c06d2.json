{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _extends from 'babel-runtime/helpers/extends';\nimport { Children } from 'react';\n/**\n * util module\n */\n\n/**\n * 是否是单选模式\n * @param {string} mode\n * @return {boolean} is single mode\n */\n\nexport function isSingle(mode) {\n  return !mode || mode === 'single' || mode === 'combobox';\n}\n/**\n * 在 Select 中，认为 null 和 undefined 都是空值\n * @param {*} n any object\n * @return {boolean}\n */\n\nexport function isNull(n) {\n  return n === null || n === undefined;\n}\n/**\n * 将字符串中的正则表达式关键字符添加转义\n * @param {string} str\n * @return {string}\n */\n\nexport function escapeForReg(str) {\n  return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n/**\n * filter by key\n * @param {string} key filter key\n * @param {object} item item object\n * @return {boolean} it's filtered\n */\n\nexport function filter(key, item) {\n  var _key = escapeForReg('' + key);\n\n  var regExp = new RegExp('(' + _key + ')', 'ig');\n  return regExp.test('' + item.value) || regExp.test('' + item.label);\n}\n/**\n * loop map\n * @param {Array} dataSource\n * @param {function} callback\n * @return {Array}\n * ----\n * @callback ~loopCallback\n * @param {object} option\n */\n\nexport function loopMap(dataSource, callback) {\n  var result = [];\n  dataSource.forEach(function (option) {\n    if (option.children) {\n      var children = loopMap(option.children, callback);\n      children.length && result.push(_extends({}, option, {\n        children: children\n      }));\n    } else {\n      var tmp = callback(option);\n      tmp && result.push(tmp);\n    }\n  });\n  return result;\n}\n/**\n * Parse dataSource from MenuItem\n * @static\n * @param {Array<Element>} children\n * @param {number} [deep=0] recursion deep level\n */\n\nexport function parseDataSourceFromChildren(children) {\n  var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var source = [];\n  Children.forEach(children, function (child, index) {\n    var type = child.type,\n        childProps = child.props;\n    var item2 = {\n      deep: deep\n    };\n    var isOption = false;\n    var isOptionGroup = false;\n\n    if (typeof type === 'function' && type._typeMark === 'next_select_option' || type === 'option') {\n      isOption = true;\n    }\n\n    if (typeof type === 'function' && type._typeMark === 'next_select_option_group' || type === 'optgroup') {\n      isOptionGroup = true;\n    }\n\n    if (!isOption && !isOptionGroup) {\n      return;\n    }\n\n    if (isOption) {\n      // option\n      // If children is a string, it can be used as value\n      var isStrChild = typeof childProps.children === 'string'; // value > key > string children > index\n\n      item2.value = 'value' in childProps ? childProps.value : 'key' in childProps ? childProps.key : isStrChild ? childProps.children : '' + index;\n      item2.label = childProps.label || childProps.children || '' + item2.value;\n      item2.title = childProps.title;\n      childProps.disabled === true && (item2.disabled = true); // You can put your extra data here, and use it in `itemRender` or `labelRender`\n\n      _extends(item2, childProps['data-extra'] || {});\n    } else if (isOptionGroup && deep < 1) {\n      // option group\n      item2.label = childProps.label || 'Group'; // parse children nodes\n\n      item2.children = parseDataSourceFromChildren(childProps.children, deep + 1);\n    }\n\n    source.push(item2);\n  });\n  return source;\n}\n/**\n * Normalize dataSource\n * @static\n * @param {Array} dataSource\n * @param {number} [deep=0] recursion deep level\n * ----\n * value priority: value > 'index'\n * label priority: label > 'value' > 'index'\n * disabled: disabled === true\n */\n\nexport function normalizeDataSource(dataSource) {\n  var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var source = [];\n  dataSource.forEach(function (item, index) {\n    // enable array of basic type\n    if (/string|boolean|number/.test(typeof item === 'undefined' ? 'undefined' : _typeof(item))) {\n      item = {\n        label: '' + item,\n        value: item\n      };\n    } // filter off addon item\n\n\n    if (item.__isAddon) {\n      return;\n    }\n\n    var item2 = {\n      deep: deep\n    }; // deep < 1: only 2 level allowed\n\n    if (Array.isArray(item.children) && deep < 1) {\n      // handle group\n      item2.label = item.label || item.value || 'Group ' + index; // parse children\n\n      item2.children = normalizeDataSource(item.children, deep + 1);\n    } else {\n      var _item = item,\n          value = _item.value,\n          label = _item.label,\n          title = _item.title,\n          disabled = _item.disabled,\n          others = _objectWithoutProperties(_item, ['value', 'label', 'title', 'disabled']);\n\n      item2.value = !isNull(value) ? value : '' + index;\n      item2.label = label || '' + item2.value;\n      item2.title = title;\n      disabled === true && (item2.disabled = true);\n\n      _extends(item2, others);\n    }\n\n    source.push(item2);\n  });\n  return source;\n}\n/**\n * Get flatten dataSource\n * @static\n * @param  {Array} dataSource structured dataSource\n * @return {Array}\n */\n\nexport function flattingDataSource(dataSource) {\n  var source = [];\n  dataSource.forEach(function (item) {\n    if (Array.isArray(item.children)) {\n      source.push.apply(source, flattingDataSource(item.children));\n    } else {\n      source.push(item);\n    }\n  });\n  return source;\n}\nexport function filterDataSource(dataSource, key, filter, addonKey) {\n  if (!Array.isArray(dataSource)) {\n    return [];\n  }\n\n  if (typeof key === 'undefined' || key === null) {\n    return [].concat(dataSource);\n  }\n\n  var addKey = true;\n  var menuDataSource = loopMap(dataSource, function (option) {\n    if (key === '' + option.value) {\n      addKey = false;\n    }\n\n    return filter(key, option) && !option.__isAddon && option;\n  }); // if key not in menuDataSource, add key to dataSource\n\n  if (addonKey && key && addKey) {\n    menuDataSource.unshift({\n      value: key,\n      label: key,\n      title: key,\n      __isAddon: true\n    });\n  }\n\n  return menuDataSource;\n}\n\nfunction getKeyItemByValue(value, valueMap) {\n  var item = void 0;\n\n  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.hasOwnProperty('value')) {\n    item = value;\n  } else {\n    item = valueMap['' + value] || {\n      value: value,\n      label: value\n    };\n  }\n\n  return item;\n}\n/**\n * compute valueDataSource by new value\n * @param {Array/String} value 数据\n * @param {Object} mapValueDS   上个value的缓存数据 value => {value,label} 的映射关系表\n * @param {*} mapMenuDS  通过 dataSource 建立 value => {value,label} 的映射关系表\n * @returns {Object} value: [value]; valueDS: [{value,label}]; mapValueDS: {value: {value,label}}\n */\n\n\nexport function getValueDataSource(value, mapValueDS, mapMenuDS) {\n  if (isNull(value)) {\n    return {};\n  }\n\n  var newValue = [];\n  var newValueDS = [];\n  var newMapValueDS = {};\n\n  var _newMapDS = _extends({}, mapValueDS, mapMenuDS);\n\n  if (Array.isArray(value)) {\n    value.forEach(function (v) {\n      var item = getKeyItemByValue(v, _newMapDS);\n      newValueDS.push(item);\n      newMapValueDS['' + item.value] = item;\n      newValue.push(item.value);\n    });\n    return {\n      value: newValue,\n      // [value]\n      valueDS: newValueDS,\n      // [{value,label}]\n      mapValueDS: newMapValueDS // {value: {value,label}}\n\n    };\n  } else {\n    var _mapValueDS;\n\n    var item = getKeyItemByValue(value, _newMapDS);\n    return {\n      value: item.value,\n      valueDS: item,\n      mapValueDS: (_mapValueDS = {}, _mapValueDS['' + item.value] = item, _mapValueDS)\n    };\n  }\n}\n/**\n * Get flatten dataSource\n * @static\n * @param  {any} value structured dataSource\n * @return {String}\n */\n\nexport function valueToSelectKey(value) {\n  var val = void 0;\n\n  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.hasOwnProperty('value')) {\n    val = value.value;\n  } else {\n    val = value;\n  }\n\n  return '' + val;\n}\n/**\n * UP Down 改进双向链表方法\n */\n// function DoubleLinkList(element){\n//     this.prev = null;\n//     this.next = null;\n//     this.element = element;\n// }\n//\n// export function mapDoubleLinkList(dataSource){\n//\n//     const mapDS = {};\n//     let doubleLink = null;\n//\n//     let head = null;\n//     let tail = null;\n//\n//     function  append(element) {\n//         if (!doubleLink) {\n//             doubleLink = new DoubleLinkList(element);\n//             head = doubleLink;\n//             tail = doubleLink;\n//             return doubleLink;\n//         }\n//\n//         const node = new DoubleLinkList(element);\n//         tail.next = node;\n//         node.prev = tail;\n//         tail = node;\n//\n//         return tail;\n//     }\n//\n//     dataSource.forEach((item => {\n//         if (item.disabled) {\n//             return;\n//         }\n//         mapDS[`${item.value}`] = append(item);\n//     }));\n//\n//     return mapDS;\n// }\n//","map":null,"metadata":{},"sourceType":"module"}