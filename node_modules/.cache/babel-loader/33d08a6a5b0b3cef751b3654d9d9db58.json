{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '../checkbox';\nimport Radio from '../radio';\nimport { func, log } from '../util';\nimport zhCN from '../locale/zh-cn';\nimport SelectionRow from './selection/row';\nimport Col from './column';\nimport { statics } from './util';\nvar makeChain = func.makeChain;\n\nvar unique = function unique(arr) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'this';\n  var temp = {},\n      ret = [];\n  arr.forEach(function (item) {\n    var value = void 0;\n\n    if (key === 'this') {\n      value = item;\n    } else {\n      value = item[key];\n    }\n\n    if (!temp[value]) {\n      ret.push(item);\n      temp[value] = true;\n    }\n  });\n  return ret;\n};\n\nexport default function selection(BaseComponent) {\n  var _class, _temp;\n  /** Table */\n\n\n  var SelectionTable = (_temp = _class = function (_React$Component) {\n    _inherits(SelectionTable, _React$Component);\n\n    function SelectionTable(props, context) {\n      _classCallCheck(this, SelectionTable);\n\n      var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n      _this.renderSelectionHeader = function () {\n        var onChange = _this.selectAllRow,\n            attrs = {},\n            _this$props = _this.props,\n            rowSelection = _this$props.rowSelection,\n            primaryKey = _this$props.primaryKey,\n            dataSource = _this$props.dataSource,\n            locale = _this$props.locale,\n            selectedRowKeys = _this.state.selectedRowKeys,\n            mode = rowSelection.mode ? rowSelection.mode : 'multiple';\n        var checked = !!selectedRowKeys.length;\n        var indeterminate = false;\n\n        _this.flatDataSource(dataSource).filter(function (record, index) {\n          if (!rowSelection.getProps) {\n            return true;\n          } else {\n            return !(rowSelection.getProps(record, index) || {}).disabled;\n          }\n        }).map(function (record) {\n          return record[primaryKey];\n        }).forEach(function (id) {\n          if (selectedRowKeys.indexOf(id) === -1) {\n            checked = false;\n          } else {\n            indeterminate = true;\n          }\n        });\n\n        attrs.onClick = makeChain(function (e) {\n          e.stopPropagation();\n        }, attrs.onClick);\n\n        if (checked) {\n          indeterminate = false;\n        }\n\n        return mode === 'multiple' ? React.createElement(Checkbox, _extends({\n          indeterminate: indeterminate,\n          'aria-label': locale.selectAll,\n          checked: checked,\n          onChange: onChange\n        }, attrs)) : null;\n      };\n\n      _this.renderSelectionBody = function (value, index, record) {\n        var _this$props2 = _this.props,\n            rowSelection = _this$props2.rowSelection,\n            primaryKey = _this$props2.primaryKey;\n        var selectedRowKeys = _this.state.selectedRowKeys;\n        var mode = rowSelection.mode ? rowSelection.mode : 'multiple';\n        var checked = selectedRowKeys.indexOf(record[primaryKey]) > -1;\n\n        var onChange = _this.selectOneRow.bind(_this, index, record);\n\n        var attrs = rowSelection.getProps ? rowSelection.getProps(record, index) || {} : {};\n        attrs.onClick = makeChain(function (e) {\n          e.stopPropagation();\n        }, attrs.onClick);\n        return mode === 'multiple' ? React.createElement(Checkbox, _extends({\n          checked: checked,\n          onChange: onChange\n        }, attrs)) : React.createElement(Radio, _extends({\n          checked: checked,\n          onChange: onChange\n        }, attrs));\n      };\n\n      _this.selectAllRow = function (checked, e) {\n        var ret = [].concat(_this.state.selectedRowKeys),\n            _this$props3 = _this.props,\n            rowSelection = _this$props3.rowSelection,\n            primaryKey = _this$props3.primaryKey,\n            dataSource = _this$props3.dataSource,\n            entireDataSource = _this$props3.entireDataSource,\n            selectedRowKeys = _this.state.selectedRowKeys,\n            getProps = rowSelection.getProps;\n        var attrs = {},\n            records = [];\n        var source = entireDataSource ? entireDataSource : dataSource;\n\n        _this.flatDataSource(source).forEach(function (record, index) {\n          var id = record[primaryKey];\n\n          if (getProps) {\n            attrs = getProps(record, index) || {};\n          } // 反选和全选的时候不要丢弃禁用项的选中状态\n\n\n          if (checked && (!attrs.disabled || selectedRowKeys.indexOf(id) > -1)) {\n            ret.push(id);\n            records.push(record);\n          } else if (attrs.disabled && selectedRowKeys.indexOf(id) > -1) {\n            ret.push(id);\n            records.push(record);\n          } else {\n            var i = ret.indexOf(id);\n            i > -1 && ret.splice(i, 1);\n          }\n        });\n\n        records = unique(records, primaryKey);\n\n        if (typeof rowSelection.onSelectAll === 'function') {\n          rowSelection.onSelectAll(checked, records);\n        }\n\n        _this.triggerSelection(rowSelection, unique(ret), records);\n\n        e.stopPropagation();\n      };\n\n      _this.state = {\n        selectedRowKeys: props.rowSelection && 'selectedRowKeys' in props.rowSelection ? props.rowSelection.selectedRowKeys || [] : []\n      };\n      return _this;\n    }\n\n    SelectionTable.prototype.getChildContext = function getChildContext() {\n      return {\n        rowSelection: this.props.rowSelection,\n        selectedRowKeys: this.state.selectedRowKeys\n      };\n    };\n\n    SelectionTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {\n        var selectedRowKeys = nextProps.rowSelection.selectedRowKeys || [];\n        this.setState({\n          selectedRowKeys: selectedRowKeys\n        });\n      }\n    };\n\n    SelectionTable.prototype.normalizeChildren = function normalizeChildren(children) {\n      var _props = this.props,\n          prefix = _props.prefix,\n          rowSelection = _props.rowSelection;\n\n      if (rowSelection) {\n        children = Children.map(children, function (child, index) {\n          return React.cloneElement(child, {\n            key: index\n          });\n        });\n        children.unshift(React.createElement(Col, {\n          key: 'selection',\n          title: this.renderSelectionHeader.bind(this),\n          cell: this.renderSelectionBody.bind(this),\n          width: 50,\n          className: prefix + 'table-selection',\n          __normalized: true\n        }));\n        return children;\n      }\n\n      return children;\n    };\n\n    SelectionTable.prototype.selectOneRow = function selectOneRow(index, record, checked, e) {\n      var selectedRowKeys = [].concat(this.state.selectedRowKeys),\n          i = void 0;\n      var _props2 = this.props,\n          primaryKey = _props2.primaryKey,\n          rowSelection = _props2.rowSelection,\n          dataSource = _props2.dataSource,\n          mode = rowSelection.mode ? rowSelection.mode : 'multiple',\n          id = record[primaryKey];\n\n      if (!id) {\n        log.warning('Can\\'t get value from record using given ' + primaryKey + ' as primaryKey.');\n      }\n\n      if (mode === 'multiple') {\n        if (checked) {\n          selectedRowKeys.push(id);\n        } else {\n          i = selectedRowKeys.indexOf(id);\n          selectedRowKeys.splice(i, 1);\n        }\n      } else if (checked) {\n        selectedRowKeys = [id];\n      }\n\n      var records = unique(dataSource.filter(function (item) {\n        return selectedRowKeys.indexOf(item[primaryKey]) > -1;\n      }), primaryKey);\n\n      if (typeof rowSelection.onSelect === 'function') {\n        rowSelection.onSelect(checked, record, records);\n      }\n\n      this.triggerSelection(rowSelection, selectedRowKeys, records);\n      e.stopPropagation();\n    };\n\n    SelectionTable.prototype.triggerSelection = function triggerSelection(rowSelection, selectedRowKeys, records) {\n      if (!('selectedRowKeys' in rowSelection)) {\n        this.setState({\n          selectedRowKeys: selectedRowKeys\n        });\n      }\n\n      if (typeof rowSelection.onChange === 'function') {\n        rowSelection.onChange(selectedRowKeys, records);\n      }\n    };\n\n    SelectionTable.prototype.flatDataSource = function flatDataSource(dataSource) {\n      var ret = dataSource;\n      var listHeader = this.context.listHeader;\n\n      if (listHeader) {\n        ret = [];\n        var hasChildrenSelection = listHeader.hasChildrenSelection,\n            hasSelection = listHeader.hasSelection;\n        dataSource.forEach(function (item) {\n          var children = item.children; // 如果需要渲染selection才将这条记录插入到dataSource\n          // 或者没有孩子节点\n\n          if (hasSelection) {\n            ret.push(item);\n          }\n\n          if (children && hasChildrenSelection) {\n            ret = ret.concat(children);\n          }\n        });\n      }\n\n      return ret;\n    };\n\n    SelectionTable.prototype.render = function render() {\n      /* eslint-disable prefer-const */\n      var _props3 = this.props,\n          rowSelection = _props3.rowSelection,\n          components = _props3.components,\n          children = _props3.children,\n          others = _objectWithoutProperties(_props3, ['rowSelection', 'components', 'children']);\n\n      if (rowSelection) {\n        children = this.normalizeChildren(children);\n        components = _extends({}, components);\n        components.Row = components.Row || SelectionRow;\n      }\n\n      return React.createElement(BaseComponent, _extends({}, others, {\n        components: components\n      }), children);\n    };\n\n    return SelectionTable;\n  }(React.Component), _class.SelectionRow = SelectionRow, _class.propTypes = _extends({\n    /**\n    * 是否启用选择模式\n    * @property {Function} getProps `Function(record, index)=>Object` 获取selection的默认属性\n    * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。\n    * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调\n    * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调\n    * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值\n    * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`\n    */\n    rowSelection: PropTypes.object,\n    primaryKey: PropTypes.string,\n    dataSource: PropTypes.array,\n    entireDataSource: PropTypes.array\n  }, BaseComponent.propTypes), _class.defaultProps = _extends({}, BaseComponent.defaultProps, {\n    locale: zhCN.Table,\n    primaryKey: 'id',\n    prefix: 'next-'\n  }), _class.contextTypes = {\n    listHeader: PropTypes.any\n  }, _class.childContextTypes = {\n    rowSelection: PropTypes.object,\n    selectedRowKeys: PropTypes.array\n  }, _temp);\n  SelectionTable.displayName = 'SelectionTable';\n  statics(SelectionTable, BaseComponent);\n  return SelectionTable;\n}","map":null,"metadata":{},"sourceType":"module"}