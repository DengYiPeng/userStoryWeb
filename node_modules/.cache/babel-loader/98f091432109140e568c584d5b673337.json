{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { obj, func } from '../util';\nimport Field from '../field';\n\nfunction pickerDefined(obj) {\n  var newObj = {};\n  Object.keys(obj).forEach(function (i) {\n    if (typeof obj[i] !== 'undefined') {\n      newObj[i] = obj[i];\n    }\n  });\n  return newObj;\n}\n\nfunction preventDefault(e) {\n  e.preventDefault();\n}\n/** Form */\n\n\nvar Form = (_temp = _class = function (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form(props) {\n    _classCallCheck(this, Form);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.onChange = function (name, value) {\n      _this.props.onChange(_this._formField.getValues(), {\n        name: name,\n        value: value,\n        field: _this._formField\n      });\n    };\n\n    var options = _extends({}, props.fieldOptions, {\n      onChange: _this.onChange\n    });\n\n    if (props.field) {\n      _this._formField = props.field;\n      var onChange = _this._formField.options.onChange;\n      options.onChange = func.makeChain(onChange, _this.onChange);\n      _this._formField.setOptions && _this._formField.setOptions(options);\n    } else {\n      if ('value' in props) {\n        options.values = props.value;\n      }\n\n      _this._formField = new Field(_this, options);\n    }\n\n    props.saveField(_this._formField);\n    return _this;\n  }\n\n  Form.prototype.getChildContext = function getChildContext() {\n    return {\n      _formField: this.props.field ? this.props.field : this._formField,\n      _formSize: this.props.size\n    };\n  };\n\n  Form.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      this._formField.setValues(nextProps.value);\n    }\n\n    if ('error' in nextProps) {\n      this._formField.setErrors(nextProps.error);\n    }\n  };\n\n  Form.prototype.render = function render() {\n    var _classNames;\n\n    var _props = this.props,\n        className = _props.className,\n        inline = _props.inline,\n        size = _props.size,\n        labelAlign = _props.labelAlign,\n        labelTextAlign = _props.labelTextAlign,\n        onSubmit = _props.onSubmit,\n        children = _props.children,\n        labelCol = _props.labelCol,\n        wrapperCol = _props.wrapperCol,\n        style = _props.style,\n        prefix = _props.prefix,\n        Tag = _props.component;\n    var formClassName = classNames((_classNames = {}, _classNames[prefix + 'form'] = true, _classNames[prefix + 'inline'] = inline, _classNames['' + prefix + size] = size, _classNames[className] = !!className, _classNames));\n    return React.createElement(Tag, _extends({}, obj.pickOthers(Form.propTypes, this.props), {\n      className: formClassName,\n      style: style,\n      onSubmit: onSubmit\n    }), React.Children.map(children, function (child) {\n      if (child && typeof child.type === 'function' && child.type._typeMark === 'form_item') {\n        var childrenProps = {\n          labelCol: child.props.labelCol ? child.props.labelCol : labelCol,\n          wrapperCol: child.props.wrapperCol ? child.props.wrapperCol : wrapperCol,\n          labelAlign: child.props.labelAlign ? child.props.labelAlign : labelAlign,\n          labelTextAlign: child.props.labelTextAlign ? child.props.labelTextAlign : labelTextAlign,\n          size: child.props.size ? child.props.size : size\n        };\n        return React.cloneElement(child, pickerDefined(childrenProps));\n      }\n\n      return child;\n    }));\n  };\n\n  return Form;\n}(React.Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * 内联表单\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。\n   * @enumdesc 大, 中, 小\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * 标签的位置\n   * @enumdesc 上, 左, 内\n   */\n  labelAlign: PropTypes.oneOf(['top', 'left', 'inset']),\n\n  /**\n   * 标签的左右对齐方式\n   * @enumdesc 左, 右\n   */\n  labelTextAlign: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * 经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项\n   */\n  field: PropTypes.any,\n\n  /**\n   * 保存 Form 自动生成的 field 对象\n   */\n  saveField: PropTypes.func,\n\n  /**\n   * 控制第一级 Item 的 labelCol\n   */\n  labelCol: PropTypes.object,\n\n  /**\n   * 控制第一级 Item 的 wrapperCol\n   */\n  wrapperCol: PropTypes.object,\n\n  /**\n   * form内有 `htmlType=\"submit\"` 的元素的时候会触发\n   */\n  onSubmit: PropTypes.func,\n\n  /**\n   * 子元素\n   */\n  children: PropTypes.any,\n\n  /**\n   * 扩展class\n   */\n  className: PropTypes.string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: PropTypes.object,\n\n  /**\n   * 表单数值\n   */\n  value: PropTypes.object,\n\n  /**\n   * 表单变化回调\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 设置标签类型\n   */\n  component: PropTypes.string,\n  fieldOptions: PropTypes.object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  onSubmit: preventDefault,\n  size: 'medium',\n  labelAlign: 'left',\n  onChange: func.noop,\n  component: 'form',\n  saveField: func.noop\n}, _class.childContextTypes = {\n  _formField: PropTypes.object,\n  _formSize: PropTypes.string\n}, _temp);\nForm.displayName = 'Form';\nexport { Form as default };","map":null,"metadata":{},"sourceType":"module"}