{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Grid from '../grid';\nimport { obj } from '../util';\nimport Error from './error';\nimport { getFieldInitCfg } from './enhance';\nvar Row = Grid.Row,\n    Col = Grid.Col;\n/** Form.Item\n *  @description 手动传递了 wrapCol labelCol 会使用 Grid 辅助布局; labelAlign='top' 会强制禁用 Grid\n *  @order 1\n */\n\nvar Item = (_temp = _class = function (_React$Component) {\n  _inherits(Item, _React$Component);\n\n  function Item() {\n    _classCallCheck(this, Item);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n  /**\n   * 从子元素里面提取表单组件\n   */\n\n\n  Item.prototype.getNames = function getNames() {\n    var children = React.Children.toArray(this.props.children);\n    return children.filter(function (c) {\n      return c.props && ('name' in c.props || 'data-meta' in c.props);\n    }).map(function (c) {\n      return c.props.name || c.props.id;\n    });\n  };\n\n  Item.prototype.getHelper = function getHelper() {\n    var help = this.props.help;\n    var _formField = this.context._formField;\n    return React.createElement(Error, {\n      name: help === undefined ? this.getNames() : undefined,\n      field: _formField\n    }, help);\n  };\n\n  Item.prototype.getState = function getState() {\n    var validateState = this.props.validateState;\n\n    if (validateState) {\n      return validateState;\n    }\n\n    if (this.context._formField) {\n      var getState = this.context._formField.getState;\n      var names = this.getNames();\n\n      if (!names.length) {\n        return '';\n      } // get first name\n\n\n      return getState(names[0]);\n    }\n\n    return undefined;\n  };\n\n  Item.prototype.getSize = function getSize() {\n    return this.props.size || this.context._formSize;\n  };\n\n  Item.prototype.getItemLabel = function getItemLabel() {\n    var _classNames;\n\n    var _props = this.props,\n        id = _props.id,\n        required = _props.required,\n        _props$asterisk = _props.asterisk,\n        asterisk = _props$asterisk === undefined ? required : _props$asterisk,\n        label = _props.label,\n        labelCol = _props.labelCol,\n        wrapperCol = _props.wrapperCol,\n        prefix = _props.prefix,\n        labelAlign = _props.labelAlign,\n        labelTextAlign = _props.labelTextAlign;\n\n    if (!label) {\n      return null;\n    }\n\n    var ele = React.createElement('label', {\n      htmlFor: id || this.getNames()[0],\n      required: asterisk,\n      key: 'label'\n    }, label);\n    var cls = classNames((_classNames = {}, _classNames[prefix + 'form-item-label'] = true, _classNames[prefix + 'left'] = labelTextAlign === 'left', _classNames));\n\n    if ((wrapperCol || labelCol) && labelAlign !== 'top') {\n      return React.createElement(Col, _extends({}, labelCol, {\n        className: cls\n      }), ele);\n    }\n\n    return React.createElement('div', {\n      className: cls\n    }, ele);\n  };\n\n  Item.prototype.getItemWrapper = function getItemWrapper() {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        hasFeedback = _props2.hasFeedback,\n        labelCol = _props2.labelCol,\n        wrapperCol = _props2.wrapperCol,\n        children = _props2.children,\n        extra = _props2.extra,\n        labelAlign = _props2.labelAlign,\n        prefix = _props2.prefix;\n    var state = this.getState();\n    var childrenProps = {\n      size: this.getSize()\n    };\n\n    if (state && (state === 'error' || hasFeedback)) {\n      childrenProps.state = state;\n    }\n\n    if (labelAlign === 'inset') {\n      childrenProps.label = this.getItemLabel();\n    }\n\n    var childrenNode = children;\n\n    if (typeof children === 'function' && this.context._formField) {\n      childrenNode = children(this.context._formField.getValues());\n    }\n\n    var ele = React.Children.map(childrenNode, function (child) {\n      if (child && typeof child.type === 'function' && child.type._typeMark !== 'form_item' && child.type._typeMark !== 'form_error') {\n        var extraProps = childrenProps;\n\n        if (_this2.context._formField && 'name' in child.props && !('data-meta' in child.props)) {\n          extraProps = _this2.context._formField.init(child.props.name, _extends({}, getFieldInitCfg(_this2.props, child.type.displayName), {\n            props: child.props\n          }), childrenProps);\n        } else {\n          extraProps = _extends({}, child.props, extraProps);\n        }\n\n        return React.cloneElement(child, extraProps);\n      }\n\n      return child;\n    });\n    var help = this.getHelper();\n\n    if ((wrapperCol || labelCol) && labelAlign !== 'top') {\n      return React.createElement(Col, _extends({}, wrapperCol, {\n        className: prefix + 'form-item-control',\n        key: 'item'\n      }), ele, ' ', help, ' ', extra);\n    }\n\n    return React.createElement('div', {\n      className: prefix + 'form-item-control'\n    }, ele, ' ', help, ' ', extra);\n  };\n\n  Item.prototype.render = function render() {\n    var _classNames2;\n\n    var _props3 = this.props,\n        className = _props3.className,\n        labelAlign = _props3.labelAlign,\n        style = _props3.style,\n        prefix = _props3.prefix,\n        wrapperCol = _props3.wrapperCol,\n        labelCol = _props3.labelCol;\n    var state = this.getState();\n    var size = this.getSize();\n    var itemClassName = classNames((_classNames2 = {}, _classNames2[prefix + 'form-item'] = true, _classNames2['' + prefix + labelAlign] = labelAlign, _classNames2['has-' + state] = !!state, _classNames2['' + prefix + size] = !!size, _classNames2['' + className] = !!className, _classNames2)); // 垂直模式并且左对齐才用到\n\n    var Tag = (wrapperCol || labelCol) && labelAlign !== 'top' ? Row : 'div';\n    var label = labelAlign === 'inset' ? null : this.getItemLabel();\n    return React.createElement(Tag, _extends({}, obj.pickOthers(Item.propTypes, this.props), {\n      className: itemClassName,\n      style: style\n    }), label, this.getItemWrapper());\n  };\n\n  return Item;\n}(React.Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: PropTypes.string,\n\n  /**\n   * label 标签的文本\n   */\n  label: PropTypes.node,\n\n  /**\n   * label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效\n   */\n  labelCol: PropTypes.object,\n\n  /**\n   * 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol\n   */\n  wrapperCol: PropTypes.object,\n\n  /**\n   * 自定义提示信息，如不设置，则会根据校验规则自动生成.\n   */\n  help: PropTypes.node,\n\n  /**\n   * 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面\n   */\n  extra: PropTypes.node,\n\n  /**\n   * 校验状态，如不设置，则会根据校验规则自动生成\n   * @enumdesc 成功, 失败, 校验中\n   */\n  validateState: PropTypes.oneOf(['error', 'success', 'loading']),\n\n  /**\n   * 配合 validateState 属性使用，是否展示 success/loading 的校验状态图标, 目前只有Input支持\n   */\n  hasFeedback: PropTypes.bool,\n  //TODO: hasFeedback => validateStatus=[error,success,loading]\n\n  /**\n   * 自定义内联样式\n   */\n  style: PropTypes.object,\n  id: PropTypes.string,\n\n  /**\n   * node 或者 function(values)\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。\n   */\n  size: PropTypes.oneOf(['large', 'small', 'medium']),\n\n  /**\n   * 标签的位置\n   * @enumdesc 上, 左, 内\n   */\n  labelAlign: PropTypes.oneOf(['top', 'left', 'inset']),\n\n  /**\n   * 标签的左右对齐方式\n   * @enumdesc 左, 右\n   */\n  labelTextAlign: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * 扩展class\n   */\n  className: PropTypes.string,\n\n  /**\n   * [表单校验] 不能为空\n   */\n  required: PropTypes.bool,\n\n  /**\n   * required 的星号是否显示\n   */\n  asterisk: PropTypes.bool,\n\n  /**\n   * required 自定义错误信息\n   */\n  requiredMessage: PropTypes.string,\n\n  /**\n   * required 自定义触发方式\n   */\n  requiredTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * [表单校验] 最小值\n   */\n  min: PropTypes.number,\n\n  /**\n   * [表单校验] 最大值\n   */\n  max: PropTypes.number,\n\n  /**\n   * min/max 自定义错误信息\n   */\n  minmaxMessage: PropTypes.string,\n\n  /**\n   * min/max 自定义触发方式\n   */\n  minmaxTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * [表单校验] 字符串最小长度 / 数组最小个数\n   */\n  minLength: PropTypes.number,\n\n  /**\n   * [表单校验] 字符串最大长度 / 数组最大个数\n   */\n  maxLength: PropTypes.number,\n\n  /**\n   * minLength/maxLength 自定义错误信息\n   */\n  minmaxLengthMessage: PropTypes.string,\n\n  /**\n   * minLength/maxLength 自定义触发方式\n   */\n  minmaxLengthTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * [表单校验] 字符串精确长度 / 数组精确个数\n   */\n  length: PropTypes.number,\n\n  /**\n   * length 自定义错误信息\n   */\n  lengthMessage: PropTypes.string,\n\n  /**\n   * length 自定义触发方式\n   */\n  lengthTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * 正则校验\n   */\n  pattern: PropTypes.any,\n\n  /**\n   * pattern 自定义错误信息\n   */\n  patternMessage: PropTypes.string,\n\n  /**\n   * pattern 自定义触发方式\n   */\n  patternTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * [表单校验] 四种常用的 pattern\n   */\n  format: PropTypes.oneOf(['number', 'email', 'url', 'tel']),\n\n  /**\n   * format 自定义错误信息\n   */\n  formatMessage: PropTypes.string,\n\n  /**\n   * format 自定义触发方式\n   */\n  formatTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n  /**\n   * [表单校验] 自定义校验函数\n   */\n  validator: PropTypes.func,\n\n  /**\n   * validator 自定义触发方式\n   */\n  validatorTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array])\n}, _class.defaultProps = {\n  prefix: 'next-',\n  hasFeedback: false\n}, _class.contextTypes = {\n  _formField: PropTypes.object,\n  _formSize: PropTypes.oneOf(['large', 'small', 'medium'])\n}, _class._typeMark = 'form_item', _temp);\nItem.displayName = 'Item';\nexport { Item as default };","map":null,"metadata":{},"sourceType":"module"}