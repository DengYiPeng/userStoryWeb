{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup } from 'react-transition-group';\nimport AnimateChild from './child';\n\nvar noop = function noop() {};\n\nvar FirstChild = function FirstChild(props) {\n  var childrenArray = React.Children.toArray(props.children);\n  return childrenArray[0] || null;\n};\n/**\n * Animate\n */\n\n\nvar Animate = (_temp = _class = function (_Component) {\n  _inherits(Animate, _Component);\n\n  function Animate() {\n    _classCallCheck(this, Animate);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Animate.prototype.normalizeNames = function normalizeNames(names) {\n    if (typeof names === 'string') {\n      return {\n        appear: names + '-appear',\n        appearActive: names + '-appear-active',\n        enter: names + '-enter',\n        enterActive: names + '-enter-active',\n        leave: names + '-leave',\n        leaveActive: names + '-leave-active'\n      };\n    }\n\n    if ((typeof names === 'undefined' ? 'undefined' : _typeof(names)) === 'object') {\n      return {\n        appear: names.appear,\n        appearActive: names.appear + '-active',\n        enter: '' + names.enter,\n        enterActive: names.enter + '-active',\n        leave: '' + names.leave,\n        leaveActive: names.leave + '-active'\n      };\n    }\n  };\n\n  Animate.prototype.render = function render() {\n    var _this2 = this;\n    /* eslint-disable no-unused-vars */\n\n\n    var _props = this.props,\n        animation = _props.animation,\n        children = _props.children,\n        animationAppear = _props.animationAppear,\n        singleMode = _props.singleMode,\n        component = _props.component,\n        beforeAppear = _props.beforeAppear,\n        onAppear = _props.onAppear,\n        afterAppear = _props.afterAppear,\n        beforeEnter = _props.beforeEnter,\n        onEnter = _props.onEnter,\n        afterEnter = _props.afterEnter,\n        beforeLeave = _props.beforeLeave,\n        onLeave = _props.onLeave,\n        afterLeave = _props.afterLeave,\n        others = _objectWithoutProperties(_props, ['animation', 'children', 'animationAppear', 'singleMode', 'component', 'beforeAppear', 'onAppear', 'afterAppear', 'beforeEnter', 'onEnter', 'afterEnter', 'beforeLeave', 'onLeave', 'afterLeave']);\n    /* eslint-enable no-unused-vars */\n\n\n    var animateChildren = Children.map(children, function (child) {\n      return React.createElement(AnimateChild, {\n        key: child.key,\n        names: _this2.normalizeNames(animation),\n        onAppear: beforeAppear,\n        onAppearing: onAppear,\n        onAppeared: afterAppear,\n        onEnter: beforeEnter,\n        onEntering: onEnter,\n        onEntered: afterEnter,\n        onExit: beforeLeave,\n        onExiting: onLeave,\n        onExited: afterLeave\n      }, child);\n    });\n    return React.createElement(TransitionGroup, _extends({\n      appear: animationAppear,\n      component: singleMode ? FirstChild : component\n    }, others), animateChildren);\n  };\n\n  return Animate;\n}(Component), _class.propTypes = {\n  /**\n   * 动画 className\n   */\n  animation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /**\n   * 子元素第一次挂载时是否执行动画\n   */\n  animationAppear: PropTypes.bool,\n\n  /**\n   * 包裹子元素的标签\n   */\n  component: PropTypes.any,\n\n  /**\n   * 是否只有单个子元素，如果有多个子元素，请设置为 false\n   */\n  singleMode: PropTypes.bool,\n\n  /**\n   * 子元素\n   */\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n\n  /**\n   * 执行第一次挂载动画前触发的回调函数\n   */\n  beforeAppear: PropTypes.func,\n\n  /**\n   * 执行第一次挂载动画，添加 xxx-appear-active 类名后触发的回调函数\n   *  @param {HTMLElement} node \b执行动画的 dom 元素\n   */\n  onAppear: PropTypes.func,\n\n  /**\n   * 执行完第一次挂载动画后触发的函数\n   * @param {HTMLElement} node \b执行动画的 dom 元素\n   */\n  afterAppear: PropTypes.func,\n\n  /**\n   * 执行进场动画前触发的回调函数\n   * @param {HTMLElement} node \b执行动画的 dom 元素\n   */\n  beforeEnter: PropTypes.func,\n\n  /**\n   * 执行进场动画，添加 xxx-enter-active 类名后触发的回调函数\n   * @param {HTMLElement} node \b执行动画的 dom 元素\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * 执行完进场动画后触发的回调函数\n   * @param {HTMLElement} node \b执行动画的 dom 元素\n   */\n  afterEnter: PropTypes.func,\n\n  /**\n   * 执行离场动画前触发的回调函数\n   * @param {HTMLElement} node \b执行动画的 dom 元素\n   */\n  beforeLeave: PropTypes.func,\n\n  /**\n   * 执行离场动画，添加 xxx-leave-active 类名后触发的回调函数\n   * @param {HTMLElement} node \b执行动画的 dom 元素\n   */\n  onLeave: PropTypes.func,\n\n  /**\n   * 执行完离场动画后触发的回调函数\n   * @param {HTMLElement} node \b执行动画的 dom 元素\n   */\n  afterLeave: PropTypes.func\n}, _class.defaultProps = {\n  animationAppear: true,\n  component: 'div',\n  singleMode: true,\n  beforeAppear: noop,\n  onAppear: noop,\n  afterAppear: noop,\n  beforeEnter: noop,\n  onEnter: noop,\n  afterEnter: noop,\n  beforeLeave: noop,\n  onLeave: noop,\n  afterLeave: noop\n}, _temp);\nAnimate.displayName = 'Animate';\nexport default Animate;","map":null,"metadata":{},"sourceType":"module"}