{"ast":null,"code":"var styleEqual = require('style-equal');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction type(a) {\n  return Array.isArray(a) ? 'array' : typeof a;\n}\n\nfunction elementEquals(a, b) {\n  var typeOfA = type(a);\n  var typeOfB = type(b);\n  if (typeOfA !== typeOfB) return false;\n\n  switch (typeOfA) {\n    case 'array':\n      if (a.length !== b.length) return false;\n\n      for (var i = 0; i < a.length; i++) {\n        if (!elementEquals(a[i], b[i])) return false;\n      }\n\n      return true;\n\n    case 'object':\n      if (!a || !b) return a === b;\n      if (a.type !== b.type) return false;\n      if (a.key !== b.key) return false;\n      if (a.ref !== b.ref) return false;\n      return shallowElementEquals(a.props, b.props);\n      break;\n\n    default:\n      return a === b;\n  }\n}\n\nfunction shallowElementEquals(a, b) {\n  var aCount = 0;\n  var bCount = 0;\n\n  for (var key in a) {\n    if (hasOwnProperty.call(a, key)) {\n      if (key === 'style') {\n        // NOTE(lmr): kind of risky, but i'm assuming that a `style` prop is a React Native style,\n        // and using the `styleEqual` algorithm here.\n        if (!styleEqual(a[key], b[key])) return false;\n      } else if (key === 'children') {// will compare children later\n      } else {\n        if (a[key] !== b[key]) return false;\n      }\n\n      aCount++;\n    }\n  }\n\n  for (var key in b) {\n    if (hasOwnProperty.call(b, key)) {\n      bCount++;\n    }\n  }\n\n  if (aCount !== bCount) return false; // compare children last...\n\n  return elementEquals(a.children, b.children);\n}\n\nmodule.exports = shallowElementEquals;","map":null,"metadata":{},"sourceType":"script"}