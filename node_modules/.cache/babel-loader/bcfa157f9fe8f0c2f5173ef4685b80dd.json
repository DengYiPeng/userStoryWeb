{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { func, support, events, dom, guid } from '../util';\n\nvar noop = function noop() {};\n\nvar on = events.on,\n    off = events.off;\nvar addClass = dom.addClass,\n    removeClass = dom.removeClass;\nvar prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];\n\nfunction getStyleProperty(node, name) {\n  var style = window.getComputedStyle(node);\n  var ret = '';\n\n  for (var i = 0; i < prefixes.length; i++) {\n    ret = style.getPropertyValue(prefixes[i] + name);\n\n    if (ret) {\n      break;\n    }\n  }\n\n  return ret;\n}\n\nvar AnimateChild = (_temp = _class = function (_Component) {\n  _inherits(AnimateChild, _Component);\n\n  function AnimateChild(props) {\n    _classCallCheck(this, AnimateChild);\n\n    var _this2 = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    func.bindCtx(_this2, ['handleEnter', 'handleEntering', 'handleEntered', 'handleExit', 'handleExiting', 'handleExited', 'addEndListener']);\n    _this2.endListeners = {\n      transitionend: [],\n      animationend: []\n    };\n    _this2.timeoutMap = {};\n    return _this2;\n  }\n\n  AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {\n    var _this3 = this;\n\n    Object.keys(this.endListeners).forEach(function (eventName) {\n      _this3.endListeners[eventName].forEach(function (listener) {\n        off(_this3.node, eventName, listener);\n      });\n    });\n    this.endListeners = {\n      transitionend: [],\n      animationend: []\n    };\n  };\n\n  AnimateChild.prototype.generateEndListener = function generateEndListener(node, done, eventName, id) {\n    var _this = this;\n\n    return function endListener(e) {\n      if (e && e.target === node) {\n        if (_this.timeoutMap[id]) {\n          clearTimeout(_this.timeoutMap[id]);\n          delete _this.timeoutMap[id];\n        }\n\n        done();\n        off(node, eventName, endListener);\n        var listeners = _this.endListeners[eventName];\n        var index = listeners.indexOf(endListener);\n        index > -1 && listeners.splice(index, 1);\n      }\n    };\n  };\n\n  AnimateChild.prototype.addEndListener = function addEndListener(node, done) {\n    var _this4 = this;\n\n    if (support.transition || support.animation) {\n      var id = guid();\n      this.node = node;\n\n      if (support.transition) {\n        var transitionEndListener = this.generateEndListener(node, done, 'transitionend', id);\n        on(node, 'transitionend', transitionEndListener);\n        this.endListeners.transitionend.push(transitionEndListener);\n      }\n\n      if (support.animation) {\n        var animationEndListener = this.generateEndListener(node, done, 'animationend', id);\n        on(node, 'animationend', animationEndListener);\n        this.endListeners.animationend.push(animationEndListener);\n      }\n\n      setTimeout(function () {\n        var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;\n        var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;\n        var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;\n        var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;\n        var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);\n\n        if (time) {\n          _this4.timeoutMap[id] = setTimeout(function () {\n            done();\n          }, time * 1000 + 200);\n        }\n      }, 15);\n    } else {\n      done();\n    }\n  };\n\n  AnimateChild.prototype.removeEndtListener = function removeEndtListener() {\n    this.transitionOff && this.transitionOff();\n    this.animationOff && this.animationOff();\n  };\n\n  AnimateChild.prototype.removeClassNames = function removeClassNames(node, names) {\n    Object.keys(names).forEach(function (key) {\n      removeClass(node, names[key]);\n    });\n  };\n\n  AnimateChild.prototype.handleEnter = function handleEnter(node, isAppearing) {\n    var names = this.props.names;\n\n    if (names) {\n      this.removeClassNames(node, names);\n      var className = isAppearing ? 'appear' : 'enter';\n      addClass(node, names[className]);\n    }\n\n    var hook = isAppearing ? this.props.onAppear : this.props.onEnter;\n    hook(node);\n  };\n\n  AnimateChild.prototype.handleEntering = function handleEntering(node, isAppearing) {\n    var _this5 = this;\n\n    setTimeout(function () {\n      var names = _this5.props.names;\n\n      if (names) {\n        var className = isAppearing ? 'appearActive' : 'enterActive';\n        addClass(node, names[className]);\n      }\n\n      var hook = isAppearing ? _this5.props.onAppearing : _this5.props.onEntering;\n      hook(node);\n    }, 10);\n  };\n\n  AnimateChild.prototype.handleEntered = function handleEntered(node, isAppearing) {\n    var names = this.props.names;\n\n    if (names) {\n      var classNames = isAppearing ? [names.appear, names.appearActive] : [names.enter, names.enterActive];\n      classNames.forEach(function (className) {\n        removeClass(node, className);\n      });\n    }\n\n    var hook = isAppearing ? this.props.onAppeared : this.props.onEntered;\n    hook(node);\n  };\n\n  AnimateChild.prototype.handleExit = function handleExit(node) {\n    var names = this.props.names;\n\n    if (names) {\n      this.removeClassNames(node, names);\n      addClass(node, names.leave);\n    }\n\n    this.props.onExit(node);\n  };\n\n  AnimateChild.prototype.handleExiting = function handleExiting(node) {\n    var _this6 = this;\n\n    setTimeout(function () {\n      var names = _this6.props.names;\n\n      if (names) {\n        addClass(node, names.leaveActive);\n      }\n\n      _this6.props.onExiting(node);\n    }, 10);\n  };\n\n  AnimateChild.prototype.handleExited = function handleExited(node) {\n    var names = this.props.names;\n\n    if (names) {\n      [names.leave, names.leaveActive].forEach(function (className) {\n        removeClass(node, className);\n      });\n    }\n\n    this.props.onExited(node);\n  };\n\n  AnimateChild.prototype.render = function render() {\n    /* eslint-disable no-unused-vars */\n    var _props = this.props,\n        names = _props.names,\n        onAppear = _props.onAppear,\n        onAppeared = _props.onAppeared,\n        onAppearing = _props.onAppearing,\n        onEnter = _props.onEnter,\n        onEntering = _props.onEntering,\n        onEntered = _props.onEntered,\n        onExit = _props.onExit,\n        onExiting = _props.onExiting,\n        onExited = _props.onExited,\n        others = _objectWithoutProperties(_props, ['names', 'onAppear', 'onAppeared', 'onAppearing', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited']);\n    /* eslint-enable no-unused-vars */\n\n\n    return React.createElement(Transition, _extends({}, others, {\n      onEnter: this.handleEnter,\n      onEntering: this.handleEntering,\n      onEntered: this.handleEntered,\n      onExit: this.handleExit,\n      onExiting: this.handleExiting,\n      onExited: this.handleExited,\n      addEndListener: this.addEndListener\n    }));\n  };\n\n  return AnimateChild;\n}(Component), _class.propTypes = {\n  names: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  onAppear: PropTypes.func,\n  onAppearing: PropTypes.func,\n  onAppeared: PropTypes.func,\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func\n}, _class.defaultProps = {\n  onAppear: noop,\n  onAppearing: noop,\n  onAppeared: noop,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n}, _temp);\nAnimateChild.displayName = 'AnimateChild';\nexport { AnimateChild as default };","map":null,"metadata":{},"sourceType":"module"}