{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport React from 'react';\nimport ConfigProvider from '../config-provider';\nimport { log } from '../util';\nimport Upload from './upload';\nimport List from './list';\nimport Card from './card';\nimport Dragger from './dragger';\nimport Selecter from './runtime/selecter';\nimport Uploader from './runtime/uploader';\nUpload.Card = ConfigProvider.config(Card, {\n  componentName: 'Upload'\n});\nUpload.Dragger = ConfigProvider.config(Dragger, {\n  componentName: 'Upload'\n});\nUpload.Selecter = Selecter;\nUpload.Uploader = Uploader; // compatible with 0.x version\n\nfunction _transform(props, deprecated) {\n  var listType = props.listType,\n      defaultFileList = props.defaultFileList,\n      fileList = props.fileList,\n      others = _objectWithoutProperties(props, ['listType', 'defaultFileList', 'fileList']);\n\n  var newprops = others;\n\n  if (listType === 'text-image') {\n    deprecated('listType=text-image', 'listType=image', 'Upload');\n    newprops.listType = 'image';\n  } else if (listType === 'picture-card') {\n    deprecated('listType=picture-card', 'listType=card', 'Upload');\n    newprops.listType = 'card';\n  } else {\n    newprops.listType = listType;\n  }\n\n  if ('defaultFileList' in props) {\n    deprecated('defaultFileList', 'defaultValue', 'Upload');\n    newprops.defaultValue = defaultFileList;\n  }\n\n  if ('fileList' in props) {\n    deprecated('fileList', 'value', 'Upload');\n    newprops.value = fileList;\n  }\n\n  return newprops;\n} // compatible with 0.x version\n\n\nUpload.ImageUpload = ConfigProvider.config(Card, {\n  componentName: 'Upload',\n  transform: function transform(props, deprecated) {\n    deprecated('Upload.ImageUpload', 'Upload.Card', 'Upload');\n\n    var newprops = _transform(props, function () {});\n\n    if (newprops.locale && newprops.locale.image) {\n      newprops.locale.card = newprops.locale.image;\n    }\n\n    return newprops;\n  }\n}); // compatible with 0.x version\n\nUpload.DragUpload = ConfigProvider.config(Dragger, {\n  componentName: 'Upload',\n  transform: function transform(props, deprecated) {\n    deprecated('Upload.DragUpload', 'Upload.Dragger', 'Upload');\n\n    var newprops = _transform(props, function () {});\n\n    if (!newprops.listType) {\n      newprops.listType = 'card';\n    }\n\n    return newprops;\n  }\n}); // compatible with 0.x version\n\nUpload.Core = function (_React$Component) {\n  _inherits(Core, _React$Component);\n\n  function Core(props) {\n    _classCallCheck(this, Core); // eslint-disable-next-line\n\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.handleSelect = function (files) {\n      _this.uploader.startUpload(files);\n    };\n\n    var _this$props = _this.props,\n        action = _this$props.action,\n        name = _this$props.name,\n        method = _this$props.method,\n        beforeUpload = _this$props.beforeUpload,\n        onProgress = _this$props.onProgress,\n        onError = _this$props.onError,\n        withCredentials = _this$props.withCredentials,\n        headers = _this$props.headers,\n        data = _this$props.data,\n        onSuccess = _this$props.onSuccess;\n    _this.uploader = new Uploader({\n      action: action,\n      name: name,\n      method: method,\n      beforeUpload: beforeUpload,\n      onProgress: onProgress,\n      onError: onError,\n      withCredentials: withCredentials,\n      headers: headers,\n      data: data,\n      onSuccess: onSuccess\n    });\n    return _this;\n  }\n\n  Core.prototype.abort = function abort() {\n    this.uploader.abort();\n  };\n\n  Core.prototype.render = function render() {\n    log.deprecated('Upload.Core', 'Upload.Selecter and Upload.Uploader', 'Upload'); // eslint-disable-next-line\n\n    var _props = this.props,\n        action = _props.action,\n        name = _props.name,\n        method = _props.method,\n        beforeUpload = _props.beforeUpload,\n        onProgress = _props.onProgress,\n        onError = _props.onError,\n        withCredentials = _props.withCredentials,\n        headers = _props.headers,\n        data = _props.data,\n        onSuccess = _props.onSuccess,\n        others = _objectWithoutProperties(_props, ['action', 'name', 'method', 'beforeUpload', 'onProgress', 'onError', 'withCredentials', 'headers', 'data', 'onSuccess']);\n\n    var props = others;\n    return React.createElement(Selecter, _extends({}, _transform(props, function () {}), {\n      onSelect: this.handleSelect\n    }));\n  };\n\n  return Core;\n}(React.Component); // compatible with 0.x version\n\n\nUpload.List = ConfigProvider.config(List, {\n  componentName: 'Upload',\n  transform: _transform\n}); // compatible with 0.x version\n\nUpload.CropUpload = function () {\n  log.deprecated('Upload.CropUpload', '@alife/bc-next-crop-upload', 'Upload');\n  return null;\n};\n\nexport default ConfigProvider.config(Upload, {\n  transform: _transform\n});","map":null,"metadata":{},"sourceType":"module"}