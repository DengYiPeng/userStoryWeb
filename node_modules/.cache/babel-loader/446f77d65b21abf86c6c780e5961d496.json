{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component, Children, cloneElement } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Animate from '../../animate';\nimport Icon from '../../icon';\nimport { func, obj } from '../../util';\nimport Item from './item';\nimport SelectabelItem from './selectable-item';\nimport PopupItem from './popup-item';\nvar Expand = Animate.Expand;\nvar bindCtx = func.bindCtx;\n/**\n * Menu.SubMenu\n * @order 1\n */\n\nvar SubMenu = (_temp = _class = function (_Component) {\n  _inherits(SubMenu, _Component);\n\n  function SubMenu(props) {\n    _classCallCheck(this, SubMenu);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    bindCtx(_this, ['handleMouseEnter', 'handleMouseLeave', 'handleClick', 'handleOpen', 'afterLeave']);\n    return _this;\n  }\n\n  SubMenu.prototype.componentDidMount = function componentDidMount() {\n    this.itemNode = findDOMNode(this);\n  };\n\n  SubMenu.prototype.afterLeave = function afterLeave() {\n    var _props = this.props,\n        focused = _props.focused,\n        root = _props.root;\n    var focusable = root.props.focusable;\n\n    if (focusable && focused) {\n      this.itemNode.focus();\n    }\n  };\n\n  SubMenu.prototype.getOpen = function getOpen() {\n    var _props2 = this.props,\n        _key = _props2._key,\n        root = _props2.root;\n    var openKeys = root.state.openKeys;\n    return openKeys.indexOf(_key) > -1;\n  };\n\n  SubMenu.prototype.handleMouseEnter = function handleMouseEnter(e) {\n    this.handleOpen(true);\n    this.props.onMouseEnter && this.props.onMouseEnter(e);\n  };\n\n  SubMenu.prototype.handleMouseLeave = function handleMouseLeave(e) {\n    this.handleOpen(false);\n    this.props.onMouseLeave && this.props.onMouseLeave(e);\n  };\n\n  SubMenu.prototype.handleClick = function handleClick(e) {\n    var _props3 = this.props,\n        root = _props3.root,\n        selectable = _props3.selectable;\n    var selectMode = root.props.selectMode;\n\n    if (selectMode && selectable) {\n      e.stopPropagation();\n    }\n\n    var open = this.getOpen();\n    this.handleOpen(!open);\n  };\n\n  SubMenu.prototype.handleOpen = function handleOpen(open, triggerType, e) {\n    var _props4 = this.props,\n        _key = _props4._key,\n        root = _props4.root;\n    root.handleOpen(_key, open, triggerType, e);\n  };\n\n  SubMenu.prototype.passParentToChildren = function passParentToChildren(children) {\n    var _this2 = this;\n\n    var _props5 = this.props,\n        mode = _props5.mode,\n        root = _props5.root;\n    return Children.map(children, function (child) {\n      return cloneElement(child, {\n        parent: _this2,\n        parentMode: mode || root.props.mode\n      });\n    });\n  };\n\n  SubMenu.prototype.renderInline = function renderInline() {\n    var _cx, _cx2, _cx3;\n\n    var _props6 = this.props,\n        _key = _props6._key,\n        level = _props6.level,\n        root = _props6.root,\n        className = _props6.className,\n        selectableFromProps = _props6.selectable,\n        label = _props6.label,\n        children = _props6.children,\n        subMenuContentClassName = _props6.subMenuContentClassName,\n        propsTriggerType = _props6.triggerType,\n        parentMode = _props6.parentMode;\n    var _root$props = root.props,\n        prefix = _root$props.prefix,\n        selectMode = _root$props.selectMode,\n        rootTriggerType = _root$props.triggerType,\n        inlineArrowDirection = _root$props.inlineArrowDirection,\n        expandAnimation = _root$props.expandAnimation,\n        rtl = _root$props.rtl;\n    var triggerType = propsTriggerType || rootTriggerType;\n    var open = this.getOpen();\n    var others = obj.pickOthers(Object.keys(SubMenu.propTypes), this.props);\n    var liProps = {\n      className: cx((_cx = {}, _cx[prefix + 'menu-sub-menu-wrapper'] = true, _cx[className] = !!className, _cx))\n    };\n    var itemProps = {\n      'aria-expanded': open,\n      _key: _key,\n      level: level,\n      root: root,\n      type: 'submenu',\n      component: 'div',\n      parentMode: parentMode\n    };\n    var arrorProps = {\n      type: inlineArrowDirection === 'right' ? 'arrow-right' : 'arrow-down',\n      className: cx((_cx2 = {}, _cx2[prefix + 'menu-icon-arrow'] = true, _cx2[prefix + 'menu-icon-arrow-down'] = inlineArrowDirection === 'down', _cx2[prefix + 'menu-icon-arrow-right'] = inlineArrowDirection === 'right', _cx2[prefix + 'open'] = open, _cx2))\n    };\n    var selectable = !!selectMode && selectableFromProps;\n    var NewItem = selectable ? SelectabelItem : Item;\n\n    if (triggerType === 'hover') {\n      liProps.onMouseEnter = this.handleMouseEnter;\n      liProps.onMouseLeave = this.handleMouseLeave;\n    } else if (selectable) {\n      arrorProps.onClick = this.handleClick;\n    } else {\n      itemProps.onClick = this.handleClick;\n    }\n\n    if (open) {\n      itemProps.className = prefix + 'opened';\n    }\n\n    var newSubMenuContentClassName = cx((_cx3 = {}, _cx3[prefix + 'menu-sub-menu'] = true, _cx3[subMenuContentClassName] = !!subMenuContentClassName, _cx3));\n    var subMenu = open ? React.createElement('ul', {\n      role: 'menu',\n      dir: rtl ? 'rtl' : undefined,\n      ref: 'subMenu',\n      className: newSubMenuContentClassName\n    }, this.passParentToChildren(children)) : null;\n    return React.createElement('li', _extends({}, others, liProps), React.createElement(NewItem, itemProps, React.createElement('span', {\n      className: prefix + 'menu-item-text'\n    }, label), React.createElement(Icon, arrorProps)), expandAnimation ? React.createElement(Expand, {\n      animationAppear: false,\n      afterLeave: this.afterLeave\n    }, subMenu) : subMenu);\n  };\n\n  SubMenu.prototype.renderPopup = function renderPopup() {\n    var _cx4;\n\n    var _props7 = this.props,\n        children = _props7.children,\n        subMenuContentClassName = _props7.subMenuContentClassName,\n        others = _objectWithoutProperties(_props7, ['children', 'subMenuContentClassName']);\n\n    var root = this.props.root;\n    var _root$props2 = root.props,\n        prefix = _root$props2.prefix,\n        popupClassName = _root$props2.popupClassName,\n        popupStyle = _root$props2.popupStyle,\n        rtl = _root$props2.rtl;\n    var newClassName = cx((_cx4 = {}, _cx4[prefix + 'menu'] = true, _cx4[prefix + 'ver'] = true, _cx4[popupClassName] = !!popupClassName, _cx4[subMenuContentClassName] = !!subMenuContentClassName, _cx4));\n    others.rtl = rtl;\n    return React.createElement(PopupItem, _extends({}, others, {\n      hasSubMenu: true\n    }), React.createElement('ul', {\n      role: 'menu',\n      dir: rtl ? 'rtl' : undefined,\n      className: newClassName,\n      style: popupStyle\n    }, this.passParentToChildren(children)));\n  };\n\n  SubMenu.prototype.render = function render() {\n    var _props8 = this.props,\n        mode = _props8.mode,\n        root = _props8.root;\n    var newMode = mode || root.props.mode;\n    return newMode === 'popup' ? this.renderPopup() : this.renderInline();\n  };\n\n  return SubMenu;\n}(Component), _class.menuChildType = 'submenu', _class.propTypes = {\n  _key: PropTypes.string,\n  root: PropTypes.object,\n  level: PropTypes.number,\n  groupIndent: PropTypes.number,\n\n  /**\n   * 标签内容\n   */\n  label: PropTypes.node,\n\n  /**\n   * 是否可选，该属性仅在设置 Menu 组件 selectMode 属性后生效\n   */\n  selectable: PropTypes.bool,\n\n  /**\n   * 子菜单打开方式，如果设置会覆盖 Menu 上的同名属性\n   * @default Menu 的 mode 属性值\n   */\n  mode: PropTypes.oneOf(['inline', 'popup']),\n\n  /**\n   * 菜单项或下一级子菜单\n   */\n  children: PropTypes.node,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  subMenuContentClassName: PropTypes.string,\n  triggerType: PropTypes.oneOf(['click', 'hover']),\n  align: PropTypes.oneOf(['outside', 'follow']),\n  parentMode: PropTypes.oneOf(['inline', 'popup'])\n}, _class.defaultProps = {\n  groupIndent: 0,\n  selectable: false\n}, _temp);\nSubMenu.displayName = 'SubMenu';\nexport { SubMenu as default };","map":null,"metadata":{},"sourceType":"module"}