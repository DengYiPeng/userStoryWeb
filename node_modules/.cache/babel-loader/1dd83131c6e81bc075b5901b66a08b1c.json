{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _initialiseProps;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport moment from 'moment';\nimport Input from '../input';\nimport Overlay from '../overlay';\nimport locale from '../locale/zh-cn';\nimport { func, obj } from '../util';\nimport TimePickerPanel from './panel';\nimport { checkDateValue, formatDateValue } from './utils';\nvar Popup = Overlay.Popup;\nvar noop = func.noop;\nvar timePickerLocale = locale.TimePicker;\n/**\n * TimePicker\n */\n\nvar TimePicker = (_temp = _class = function (_Component) {\n  _inherits(TimePicker, _Component);\n\n  function TimePicker(props, context) {\n    _classCallCheck(this, TimePicker);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _initialiseProps.call(_this);\n\n    var value = formatDateValue(props.value || props.defaultValue, props.format);\n    _this.inputAsString = typeof (props.value || props.defaultValue) === 'string';\n    _this.state = {\n      value: value,\n      inputStr: '',\n      inputing: false,\n      visible: props.visible || props.defaultVisible\n    };\n    return _this;\n  }\n\n  TimePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      var value = formatDateValue(nextProps.value, nextProps.format || this.props.format);\n      this.setState({\n        value: value\n      });\n    }\n\n    if ('visible' in nextProps) {\n      this.setState({\n        visible: nextProps.visible\n      });\n    }\n  };\n\n  TimePicker.prototype.onValueChange = function onValueChange(newValue) {\n    var ret = this.inputAsString && newValue ? newValue.format(this.props.format) : newValue;\n    this.props.onChange(ret);\n  };\n\n  TimePicker.prototype.render = function render() {\n    var _classnames, _classnames2;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        label = _props.label,\n        state = _props.state,\n        placeholder = _props.placeholder,\n        size = _props.size,\n        format = _props.format,\n        hasClear = _props.hasClear,\n        hourStep = _props.hourStep,\n        minuteStep = _props.minuteStep,\n        secondStep = _props.secondStep,\n        disabledHours = _props.disabledHours,\n        disabledMinutes = _props.disabledMinutes,\n        disabledSeconds = _props.disabledSeconds,\n        popupAlign = _props.popupAlign,\n        popupTriggerType = _props.popupTriggerType,\n        popupContainer = _props.popupContainer,\n        popupStyle = _props.popupStyle,\n        popupClassName = _props.popupClassName,\n        popupProps = _props.popupProps,\n        disabled = _props.disabled,\n        className = _props.className,\n        locale = _props.locale,\n        rtl = _props.rtl,\n        others = _objectWithoutProperties(_props, ['prefix', 'label', 'state', 'placeholder', 'size', 'format', 'hasClear', 'hourStep', 'minuteStep', 'secondStep', 'disabledHours', 'disabledMinutes', 'disabledSeconds', 'popupAlign', 'popupTriggerType', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'disabled', 'className', 'locale', 'rtl']);\n\n    var _state = this.state,\n        value = _state.value,\n        inputStr = _state.inputStr,\n        inputing = _state.inputing,\n        visible = _state.visible;\n    var triggerCls = classnames((_classnames = {}, _classnames[prefix + 'time-picker-trigger'] = true, _classnames));\n\n    if (rtl) {\n      others.dir = 'rtl';\n    }\n\n    var inputValue = inputing ? inputStr : value && value.format(format) || '';\n    var sharedInputProps = {\n      size: size,\n      disabled: disabled,\n      value: inputValue,\n      hasClear: value && hasClear,\n      onChange: this.onInputChange,\n      onBlur: this.onInputBlur,\n      onPressEnter: this.onInputBlur,\n      hint: 'clock'\n    };\n    var triggerInput = React.createElement('div', {\n      className: triggerCls\n    }, React.createElement(Input, _extends({}, sharedInputProps, {\n      label: label,\n      state: state,\n      placeholder: placeholder || locale.placeholder,\n      className: prefix + 'time-picker-input'\n    })));\n    var panelProps = {\n      prefix: prefix,\n      locale: locale,\n      value: value,\n      disabled: disabled,\n      showHour: format.indexOf('H') > -1,\n      showSecond: format.indexOf('s') > -1,\n      hourStep: hourStep,\n      minuteStep: minuteStep,\n      secondStep: secondStep,\n      disabledHours: disabledHours,\n      disabledMinutes: disabledMinutes,\n      disabledSeconds: disabledSeconds,\n      onSelect: this.onTimePanelSelect\n    };\n    var classNames = classnames((_classnames2 = {}, _classnames2[prefix + 'time-picker'] = true, _classnames2[prefix + 'time-picker-' + size] = size, _classnames2[prefix + 'disabled'] = disabled, _classnames2), className);\n    return React.createElement('div', _extends({}, obj.pickOthers(TimePicker.propTypes, others), {\n      className: classNames\n    }), React.createElement(Popup, _extends({}, popupProps, {\n      autoFocus: true,\n      visible: visible,\n      onVisibleChange: this.onVisibleChange,\n      trigger: triggerInput,\n      container: popupContainer,\n      disabled: disabled,\n      align: popupAlign,\n      triggerType: popupTriggerType,\n      style: popupStyle,\n      className: popupClassName\n    }), React.createElement('div', {\n      dir: others.dir,\n      className: prefix + 'time-picker-body'\n    }, React.createElement('div', {\n      className: prefix + 'time-picker-panel-header'\n    }, React.createElement(Input, _extends({}, sharedInputProps, {\n      placeholder: format,\n      className: prefix + 'time-picker-panel-input'\n    }))), React.createElement(TimePickerPanel, panelProps))));\n  };\n\n  return TimePicker;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 按钮的文案\n   */\n  label: PropTypes.node,\n\n  /**\n   * 输入框状态\n   */\n  state: PropTypes.oneOf(['error', 'success']),\n\n  /**\n   * 输入框提示\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * 时间值（moment 对象或时间字符串，受控状态使用）\n   */\n  value: checkDateValue,\n\n  /**\n   * 时间初值（moment 对象或时间字符串，非受控状态使用）\n   */\n  defaultValue: checkDateValue,\n\n  /**\n   * 时间选择框的尺寸\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 是否允许清空时间\n   */\n  hasClear: PropTypes.bool,\n\n  /**\n   * 时间的格式\n   * https://momentjs.com/docs/#/parsing/string-format/\n   */\n  format: PropTypes.string,\n\n  /**\n   * 小时选项步长\n   */\n  hourStep: PropTypes.number,\n\n  /**\n   * 分钟选项步长\n   */\n  minuteStep: PropTypes.number,\n\n  /**\n   * 秒钟选项步长\n   */\n  secondStep: PropTypes.number,\n\n  /**\n   * 禁用小时函数\n   * @param {Number} index 时 0 - 23\n   * @return {Boolean} 是否禁用\n   */\n  disabledHours: PropTypes.func,\n\n  /**\n   * 禁用分钟函数\n   * @param {Number} index 分 0 - 59\n   * @return {Boolean} 是否禁用\n   */\n  disabledMinutes: PropTypes.func,\n\n  /**\n   * 禁用秒钟函数\n   * @param {Number} index 秒 0 - 59\n   * @return {Boolean} 是否禁用\n   */\n  disabledSeconds: PropTypes.func,\n\n  /**\n   * 弹层是否显示（受控）\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 弹层默认是否显示（非受控）\n   */\n  defaultVisible: PropTypes.bool,\n\n  /**\n   * 弹层容器\n   * @param {Object} target 目标节点\n   * @return {ReactNode} 容器节点\n   */\n  popupContainer: PropTypes.func,\n\n  /**\n   * 弹层对齐方式, 详情见Overlay 文档\n   */\n  popupAlign: PropTypes.string,\n\n  /**\n   * 弹层触发方式\n   */\n  popupTriggerType: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * 弹层展示状态变化时的回调\n   * @param {Boolean} visible 弹层是否隐藏和显示\n   * @param {String} reason 触发弹层显示和隐藏的来源\n   */\n  onVisibleChange: PropTypes.func,\n\n  /**\n   * 弹层自定义样式\n   */\n  popupStyle: PropTypes.object,\n\n  /**\n   * 弹层自定义样式类\n   */\n  popupClassName: PropTypes.string,\n\n  /**\n   * 弹层属性\n   */\n  popupProps: PropTypes.object,\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 时间值改变时的回调\n   * @param {Object|String} value 时间对象或时间字符串\n   */\n  onChange: PropTypes.func,\n  className: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  rtl: false,\n  locale: timePickerLocale,\n  size: 'medium',\n  format: 'HH:mm:ss',\n  hasClear: true,\n  disabled: false,\n  popupAlign: 'tl tl',\n  popupTriggerType: 'click',\n  onChange: noop,\n  onVisibleChange: noop\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onClearValue = function () {\n    _this2.setState({\n      value: null\n    });\n\n    if (_this2.state.value) {\n      _this2.onValueChange(null);\n    }\n  };\n\n  this.onInputChange = function (inputValue, e, eventType) {\n    if (!('value' in _this2.props)) {\n      if (eventType === 'clear' || !inputValue) {\n        e.stopPropagation();\n\n        _this2.onClearValue();\n      }\n\n      _this2.setState({\n        inputStr: inputValue,\n        inputing: true\n      });\n    } else if (eventType === 'clear') {\n      // 受控状态下用户点击 clear\n      e.stopPropagation();\n\n      _this2.onValueChange(null);\n    }\n  };\n\n  this.onInputBlur = function () {\n    var _state2 = _this2.state,\n        value = _state2.value,\n        inputStr = _state2.inputStr;\n\n    if (!value && inputStr) {\n      var format = _this2.props.format;\n      var parsed = moment(inputStr, format, true);\n\n      if (parsed.isValid()) {\n        _this2.setState({\n          value: parsed,\n          inputStr: ''\n        });\n\n        _this2.onValueChange(parsed);\n      }\n\n      _this2.setState({\n        inputing: false\n      });\n    }\n  };\n\n  this.onTimePanelSelect = function (value) {\n    if (!('value' in _this2.props)) {\n      _this2.setState({\n        value: value,\n        inputing: false\n      });\n    }\n\n    if (!_this2.state.value || value.valueOf() !== _this2.state.value.valueOf()) {\n      _this2.onValueChange(value);\n    }\n  };\n\n  this.onVisibleChange = function (visible, reason) {\n    if (!('visible' in _this2.props)) {\n      _this2.setState({\n        visible: visible\n      });\n    }\n\n    _this2.props.onVisibleChange(visible, reason);\n  };\n}, _temp);\nTimePicker.displayName = 'TimePicker';\nexport { TimePicker as default };","map":null,"metadata":{},"sourceType":"module"}