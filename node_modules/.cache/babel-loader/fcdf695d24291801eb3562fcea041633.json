{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport { obj, log } from '../util';\nimport getContextProps from './get-context-props';\nvar shallowEqual = obj.shallowEqual;\n\nfunction getDisplayName(Component) {\n  return Component.displayName || Component.name || 'Component';\n}\n\nvar globalLocales = void 0;\nvar currentGlobalLanguage = 'zh-cn';\nvar currentGlobalLocale = {};\nvar currentGlobalRtl = false;\nexport function initLocales(locales) {\n  globalLocales = locales;\n\n  if (locales) {\n    currentGlobalLocale = locales[currentGlobalLanguage];\n  }\n}\nexport function setLanguage(language) {\n  if (globalLocales) {\n    currentGlobalLanguage = language;\n    currentGlobalLocale = globalLocales[language];\n  }\n}\nexport function setLocale(locale) {\n  currentGlobalLocale = _extends({}, globalLocales ? globalLocales[currentGlobalLanguage] : {}, locale);\n}\nexport function setDirection(dir) {\n  currentGlobalRtl = dir === 'rtl';\n}\nexport function getLocale() {\n  return currentGlobalLocale;\n}\nexport function getLanguage() {\n  return currentGlobalLanguage;\n}\nexport function getDirection() {\n  return currentGlobalRtl;\n}\nexport function config(Component) {\n  var _class, _temp;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (Component.prototype.shouldComponentUpdate === undefined) {\n    Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      if (this.props.pure) {\n        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n      }\n\n      return true;\n    };\n  }\n\n  var ConfigedComponent = (_temp = _class = function (_React$Component) {\n    _inherits(ConfigedComponent, _React$Component);\n\n    function ConfigedComponent(props, context) {\n      _classCallCheck(this, ConfigedComponent);\n\n      var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n      _this._getInstance = _this._getInstance.bind(_this);\n      _this._deprecated = _this._deprecated.bind(_this);\n      return _this;\n    }\n\n    ConfigedComponent.prototype._getInstance = function _getInstance(ref) {\n      var _this2 = this;\n\n      this._instance = ref;\n\n      if (this._instance && options.exportNames) {\n        options.exportNames.forEach(function (name) {\n          var field = _this2._instance[name];\n\n          if (typeof field === 'function') {\n            _this2[name] = field.bind(_this2._instance);\n          } else {\n            _this2[name] = field;\n          }\n        });\n      }\n    };\n\n    ConfigedComponent.prototype._deprecated = function _deprecated() {\n      if (this.context.nextWarning !== false) {\n        log.deprecated.apply(log, arguments);\n      }\n    };\n\n    ConfigedComponent.prototype.getInstance = function getInstance() {\n      return this._instance;\n    };\n\n    ConfigedComponent.prototype.render = function render() {\n      var _props = this.props,\n          prefix = _props.prefix,\n          locale = _props.locale,\n          pure = _props.pure,\n          rtl = _props.rtl,\n          others = _objectWithoutProperties(_props, ['prefix', 'locale', 'pure', 'rtl']);\n\n      var _context = this.context,\n          nextPrefix = _context.nextPrefix,\n          _context$nextLocale = _context.nextLocale,\n          nextLocale = _context$nextLocale === undefined ? {} : _context$nextLocale,\n          nextPure = _context.nextPure,\n          nextRtl = _context.nextRtl;\n      var displayName = options.componentName || getDisplayName(Component);\n      var contextProps = getContextProps({\n        prefix: prefix,\n        locale: locale,\n        pure: pure,\n        rtl: rtl\n      }, {\n        nextPrefix: nextPrefix,\n        nextLocale: _extends({}, currentGlobalLocale, nextLocale),\n        nextPure: nextPure,\n        nextRtl: typeof nextRtl === 'boolean' ? nextRtl : currentGlobalRtl === true ? true : undefined\n      }, displayName);\n      var newContextProps = ['prefix', 'locale', 'pure', 'rtl'].reduce(function (ret, name) {\n        if (typeof contextProps[name] !== 'undefined') {\n          ret[name] = contextProps[name];\n        }\n\n        return ret;\n      }, {});\n      var newOthers = options.transform ? options.transform(others, this._deprecated) : others;\n      return React.createElement(Component, _extends({}, newOthers, newContextProps, {\n        ref: this._getInstance\n      }));\n    };\n\n    return ConfigedComponent;\n  }(React.Component), _class.propTypes = _extends({}, Component.propTypes || {}, {\n    prefix: PropTypes.string,\n    locale: PropTypes.object,\n    pure: PropTypes.bool,\n    rtl: PropTypes.bool\n  }), _class.contextTypes = _extends({}, Component.contextTypes || {}, {\n    nextPrefix: PropTypes.string,\n    nextLocale: PropTypes.object,\n    nextPure: PropTypes.bool,\n    nextRtl: PropTypes.bool,\n    nextWarning: PropTypes.bool\n  }), _temp);\n  ConfigedComponent.displayName = 'ConfigedComponent';\n  ConfigedComponent.displayName = 'Config(' + getDisplayName(Component) + ')';\n  hoistNonReactStatic(ConfigedComponent, Component);\n  return ConfigedComponent;\n}","map":null,"metadata":{},"sourceType":"module"}