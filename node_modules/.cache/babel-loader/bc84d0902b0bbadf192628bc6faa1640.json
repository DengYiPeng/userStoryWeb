{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { KEYCODE, obj } from '../util';\nimport TabNav from './tabs/nav';\nimport TabContent from './tabs/content';\nimport TabItem from './tabs/tab-item';\nimport { toArray } from './tabs/utils';\n\nvar noop = function noop() {};\n/** Tab */\n\n\nvar Tab = (_temp = _class = function (_Component) {\n  _inherits(Tab, _Component);\n\n  function Tab(props, context) {\n    _classCallCheck(this, Tab);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.handleTriggerEvent = function (eventType, key) {\n      var _this$props = _this.props,\n          triggerType = _this$props.triggerType,\n          onClick = _this$props.onClick,\n          onChange = _this$props.onChange;\n\n      if (triggerType === eventType) {\n        onClick(key);\n\n        _this.setActiveKey(key);\n\n        if (_this.state.activeKey !== key) {\n          onChange(key);\n        }\n      }\n    };\n\n    _this.onNavKeyDown = function (e) {\n      var keyCode = e.keyCode;\n\n      if (keyCode >= KEYCODE.LEFT && keyCode <= KEYCODE.DOWN) {\n        e.preventDefault();\n      }\n\n      var newKey = void 0;\n\n      if (keyCode === KEYCODE.RIGHT || keyCode === KEYCODE.DOWN) {\n        newKey = _this.getNextActiveKey(true);\n\n        _this.handleTriggerEvent(_this.props.triggerType, newKey);\n      } else if (keyCode === KEYCODE.LEFT || keyCode === KEYCODE.UP) {\n        newKey = _this.getNextActiveKey(false);\n\n        _this.handleTriggerEvent(_this.props.triggerType, newKey);\n      }\n    };\n\n    _this.state = {\n      activeKey: _this.getDefaultActiveKey(props)\n    };\n    return _this;\n  }\n\n  Tab.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.activeKey && this.state.activeKey !== nextProps.activeKey) {\n      this.setState({\n        activeKey: nextProps.activeKey\n      });\n    }\n  };\n\n  Tab.prototype.getDefaultActiveKey = function getDefaultActiveKey(props) {\n    var activeKey = props.activeKey || props.defaultActiveKey;\n\n    if (!activeKey) {\n      React.Children.forEach(props.children, function (child, index) {\n        if (React.isValidElement(child)) {\n          /* eslint-disable eqeqeq */\n          if (activeKey == undefined && !child.props.disabled) {\n            activeKey = child.key || index;\n          }\n        }\n      });\n    }\n\n    return activeKey;\n  };\n\n  Tab.prototype.getNextActiveKey = function getNextActiveKey(isNext) {\n    var _this2 = this;\n\n    var children = [];\n    React.Children.forEach(this.props.children, function (child) {\n      if (React.isValidElement(child)) {\n        if (!child.props.disabled) {\n          if (isNext) {\n            children.push(child);\n          } else {\n            children.unshift(child);\n          }\n        }\n      }\n    });\n    var length = children.length;\n    var key = length && children[0].key;\n    children.forEach(function (child, i) {\n      if (child.key === _this2.state.activeKey) {\n        if (i === length - 1) {\n          key = children[0].key;\n        } else {\n          key = children[i + 1].key;\n        }\n      }\n    });\n    return key;\n  };\n\n  Tab.prototype.setActiveKey = function setActiveKey(key) {\n    var activeKey = this.state.activeKey; // 如果 key 没变，或者受控状态下，则跳过\n\n    if (key === activeKey || 'activeKey' in this.props) {\n      return;\n    }\n\n    this.setState({\n      activeKey: key\n    });\n  };\n\n  Tab.prototype.render = function render() {\n    var _classnames;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        animation = _props.animation,\n        shape = _props.shape,\n        size = _props.size,\n        extra = _props.extra,\n        excessMode = _props.excessMode,\n        tabPosition = _props.tabPosition,\n        tabRender = _props.tabRender,\n        triggerType = _props.triggerType,\n        lazyLoad = _props.lazyLoad,\n        unmountInactiveTabs = _props.unmountInactiveTabs,\n        popupProps = _props.popupProps,\n        navStyle = _props.navStyle,\n        navClassName = _props.navClassName,\n        contentStyle = _props.contentStyle,\n        contentClassName = _props.contentClassName,\n        className = _props.className,\n        onClose = _props.onClose,\n        children = _props.children,\n        others = _objectWithoutProperties(_props, ['prefix', 'animation', 'shape', 'size', 'extra', 'excessMode', 'tabPosition', 'tabRender', 'triggerType', 'lazyLoad', 'unmountInactiveTabs', 'popupProps', 'navStyle', 'navClassName', 'contentStyle', 'contentClassName', 'className', 'onClose', 'children']);\n\n    var activeKey = this.state.activeKey;\n    var tabs = toArray(children);\n    var classNames = classnames((_classnames = {}, _classnames[prefix + 'tabs'] = true, _classnames[prefix + 'tabs-' + shape] = shape, _classnames[prefix + 'tabs-vertical'] = shape === 'wrapped' && ['left', 'right'].indexOf(tabPosition) >= 0, _classnames[prefix + 'tabs-' + tabPosition] = shape === 'wrapped', _classnames['' + (prefix + size)] = size, _classnames), className);\n    var navProps = {\n      prefix: prefix,\n      animation: animation,\n      activeKey: activeKey,\n      excessMode: excessMode,\n      extra: extra,\n      tabs: tabs,\n      tabPosition: tabPosition,\n      tabRender: tabRender,\n      triggerType: triggerType,\n      popupProps: popupProps,\n      onClose: onClose,\n      onTriggerEvent: this.handleTriggerEvent,\n      onKeyDown: this.onNavKeyDown,\n      style: navStyle,\n      className: navClassName\n    };\n    var contentProps = {\n      prefix: prefix,\n      activeKey: activeKey,\n      lazyLoad: lazyLoad,\n      unmountInactiveTabs: unmountInactiveTabs,\n      style: contentStyle,\n      className: contentClassName\n    };\n    var tabChildren = [React.createElement(TabNav, _extends({\n      key: 'tab-nav'\n    }, navProps)), React.createElement(TabContent, _extends({\n      key: 'tab-content'\n    }, contentProps), tabs)];\n\n    if (tabPosition === 'bottom') {\n      tabChildren.reverse();\n    }\n\n    return React.createElement('div', _extends({\n      className: classNames\n    }, obj.pickOthers(Tab.propTypes, others)), tabChildren);\n  };\n\n  return Tab;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n\n  /**\n   * 被激活的选项卡的 key, 赋值则tab为受控组件, 用户无法切换\n   */\n  activeKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * 初始化时被激活的选项卡的 key\n   */\n  defaultActiveKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * 外观形态\n   */\n  shape: PropTypes.oneOf(['pure', 'wrapped', 'text', 'capsule']),\n\n  /**\n   * 是否开启动效\n   */\n  animation: PropTypes.bool,\n\n  /**\n   * 选项卡过多时的滑动模式\n   */\n  excessMode: PropTypes.oneOf(['slide', 'dropdown']),\n\n  /**\n   * 导航选项卡的位置，只适用于包裹型（wrapped）选项卡\n   */\n  tabPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n\n  /**\n   * 尺寸\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * 激活选项卡的触发方式\n   */\n  triggerType: PropTypes.oneOf(['hover', 'click']),\n\n  /**\n   * 是否提前渲染好所有 TabPane 的内容\n   */\n  lazyLoad: PropTypes.bool,\n\n  /**\n   * 是否自动卸载未处于激活状态的选项卡\n   */\n  unmountInactiveTabs: PropTypes.bool,\n\n  /**\n   * 导航条的自定义样式\n   */\n  navStyle: PropTypes.object,\n\n  /**\n   * 导航条的自定义样式类\n   */\n  navClassName: PropTypes.string,\n\n  /**\n   * 内容区容器的自定义样式\n   */\n  contentStyle: PropTypes.object,\n\n  /**\n   * 内容区容器的自定义样式类\n   */\n  contentClassName: PropTypes.string,\n\n  /**\n   * 导航栏附加内容\n   */\n  extra: PropTypes.node,\n\n  /**\n   * 点击单个选项卡时触发的回调\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * 选项卡发生切换时的事件回调\n   * @param {String|Number} key 改变后的 key\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 选项卡被关闭时的事件回调\n   * @param {String|Number} key   关闭的选项卡的 key\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * 自定义选项卡模板渲染函数\n   * @param {String} key 当前 Tab.Item 的 key 值\n   * @param {Object} props 传给 Tab.Item 的所有属性键值对\n   * @return {ReactNode} 返回自定义组件\n   */\n  tabRender: PropTypes.func,\n  children: PropTypes.any,\n  className: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  shape: 'pure',\n  size: 'medium',\n  animation: true,\n  tabPosition: 'top',\n  excessMode: 'slide',\n  triggerType: 'click',\n  lazyLoad: true,\n  unmountInactiveTabs: false,\n  onClick: noop,\n  onChange: noop,\n  onClose: noop\n}, _temp);\nTab.displayName = 'Tab';\nexport { Tab as default };\nTab.Item = TabItem;","map":null,"metadata":{},"sourceType":"module"}