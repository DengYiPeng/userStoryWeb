{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _initialiseProps;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport moment from 'moment';\nimport Overlay from '../overlay';\nimport Input from '../input';\nimport Calendar from '../calendar';\nimport nextLocale from '../locale/zh-cn';\nimport { func, obj } from '../util';\nimport { checkDateValue, formatDateValue } from './util';\nvar Popup = Overlay.Popup;\n/**\n * DatePicker.MonthPicker\n */\n\nvar MonthPicker = (_temp = _class = function (_Component) {\n  _inherits(MonthPicker, _Component);\n\n  function MonthPicker(props, context) {\n    _classCallCheck(this, MonthPicker);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _initialiseProps.call(_this);\n\n    var value = formatDateValue(props.value || props.defaultValue, props.format);\n    _this.inputAsString = typeof (props.value || props.defaultValue) === 'string'; // 判断用户输入是否是字符串\n\n    _this.state = {\n      value: value,\n      dateInputStr: '',\n      inputing: false,\n      visible: props.visible || props.defaultVisible\n    };\n    return _this;\n  }\n\n  MonthPicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      var value = formatDateValue(nextProps.value, nextProps.format || this.props.format);\n      this.setState({\n        value: value\n      });\n      this.inputAsString = typeof nextProps.value === 'string';\n    }\n\n    if ('visible' in nextProps) {\n      this.setState({\n        visible: nextProps.visible\n      });\n    }\n  };\n\n  MonthPicker.prototype.render = function render() {\n    var _classnames, _classnames2, _classnames3;\n\n    var _props = this.props,\n        prefix = _props.prefix,\n        rtl = _props.rtl,\n        locale = _props.locale,\n        label = _props.label,\n        state = _props.state,\n        format = _props.format,\n        defaultVisibleYear = _props.defaultVisibleYear,\n        disabledDate = _props.disabledDate,\n        footerRender = _props.footerRender,\n        placeholder = _props.placeholder,\n        size = _props.size,\n        disabled = _props.disabled,\n        hasClear = _props.hasClear,\n        popupTriggerType = _props.popupTriggerType,\n        popupAlign = _props.popupAlign,\n        popupContainer = _props.popupContainer,\n        popupStyle = _props.popupStyle,\n        popupClassName = _props.popupClassName,\n        popupProps = _props.popupProps,\n        className = _props.className,\n        others = _objectWithoutProperties(_props, ['prefix', 'rtl', 'locale', 'label', 'state', 'format', 'defaultVisibleYear', 'disabledDate', 'footerRender', 'placeholder', 'size', 'disabled', 'hasClear', 'popupTriggerType', 'popupAlign', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'className']);\n\n    var _state = this.state,\n        visible = _state.visible,\n        value = _state.value,\n        dateInputStr = _state.dateInputStr,\n        inputing = _state.inputing;\n    var monthPickerCls = classnames((_classnames = {}, _classnames[prefix + 'month-picker'] = true, _classnames), className);\n    var triggerInputCls = classnames((_classnames2 = {}, _classnames2[prefix + 'month-picker-input'] = true, _classnames2[prefix + 'error'] = false, _classnames2));\n    var panelBodyClassName = classnames((_classnames3 = {}, _classnames3[prefix + 'month-picker-body'] = true, _classnames3));\n\n    if (rtl) {\n      others.dir = 'rtl';\n    }\n\n    var panelInputCls = prefix + 'month-picker-panel-input';\n    var sharedInputProps = {\n      size: size,\n      disabled: disabled,\n      onChange: this.onDateInputChange,\n      onBlur: this.onDateInputBlur,\n      onPressEnter: this.onDateInputBlur\n    };\n    var dateInputValue = inputing ? dateInputStr : value && value.format(format) || '';\n    var triggerInputValue = dateInputValue;\n    var dateInput = React.createElement(Input, _extends({}, sharedInputProps, {\n      value: dateInputValue,\n      onFocus: this.onFoucsDateInput,\n      placeholder: format,\n      className: panelInputCls\n    }));\n    var datePanel = React.createElement(Calendar, {\n      shape: 'panel',\n      modes: ['month', 'year'],\n      value: value,\n      onSelect: this.onSelectCalendarPanel,\n      defaultVisibleMonth: defaultVisibleYear,\n      disabledDate: disabledDate\n    });\n    var panelBody = datePanel;\n    var panelFooter = footerRender();\n    var allowClear = value && hasClear;\n    var trigger = React.createElement('div', {\n      className: prefix + 'month-picker-trigger'\n    }, React.createElement(Input, _extends({}, sharedInputProps, {\n      label: label,\n      state: state,\n      value: triggerInputValue,\n      placeholder: placeholder || locale.monthPlaceholder,\n      hint: 'calendar',\n      hasClear: allowClear,\n      className: triggerInputCls\n    })));\n    return React.createElement('div', _extends({}, obj.pickOthers(MonthPicker.propTypes, others), {\n      className: monthPickerCls\n    }), React.createElement(Popup, _extends({}, popupProps, {\n      autoFocus: true,\n      disabled: disabled,\n      visible: visible,\n      onVisibleChange: this.onVisibleChange,\n      align: popupAlign,\n      triggerType: popupTriggerType,\n      container: popupContainer,\n      style: popupStyle,\n      className: popupClassName,\n      trigger: trigger\n    }), React.createElement('div', {\n      className: panelBodyClassName,\n      dir: others.dir\n    }, React.createElement('div', {\n      className: prefix + 'month-picker-panel-header'\n    }, dateInput), panelBody, panelFooter)));\n  };\n\n  return MonthPicker;\n}(Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  rtl: PropTypes.bool,\n\n  /**\n   * 输入框内置标签\n   */\n  label: PropTypes.node,\n\n  /**\n   * 输入框状态\n   */\n  state: PropTypes.oneOf(['success', 'error']),\n\n  /**\n   * 输入提示\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * 默认展现的年\n   * @return {MomentObject} 返回包含指定年份的 moment 对象实例\n   */\n  defaultVisibleYear: PropTypes.func,\n\n  /**\n   * 日期值（受控）moment 对象\n   */\n  value: checkDateValue,\n\n  /**\n   * 初始日期值，moment 对象\n   */\n  defaultValue: checkDateValue,\n\n  /**\n   * 日期值的格式（用于限定用户输入和展示）\n   */\n  format: PropTypes.string,\n\n  /**\n   * 禁用日期函数\n   * @param {MomentObject} 日期值\n   * @return {Boolean} 是否禁用\n   */\n  disabledDate: PropTypes.func,\n\n  /**\n   * 自定义面板页脚\n   * @return {Node} 自定义的面板页脚组件\n   */\n  footerRender: PropTypes.func,\n\n  /**\n   * 日期值改变时的回调\n   * @param {MomentObject|String} value 日期值\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * 输入框尺寸\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 是否禁用\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * 是否显示清空按钮\n   */\n  hasClear: PropTypes.bool,\n\n  /**\n   * 弹层显示状态\n   */\n  visible: PropTypes.bool,\n\n  /**\n   * 弹层默认是否显示\n   */\n  defaultVisible: PropTypes.bool,\n\n  /**\n   * 弹层展示状态变化时的回调\n   * @param {Boolean} visible 弹层是否显示\n   * @param {String} reason 触发弹层显示和隐藏的来源\n   */\n  onVisibleChange: PropTypes.func,\n\n  /**\n   * 弹层触发方式\n   */\n  popupTriggerType: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * 弹层对齐方式, 具体含义见 OverLay文档\n   */\n  popupAlign: PropTypes.string,\n\n  /**\n   * 弹层容器\n   * @param {Element} target 目标元素\n   * @return {Element} 弹层的容器元素\n   */\n  popupContainer: PropTypes.func,\n\n  /**\n   * 弹层自定义样式\n   */\n  popupStyle: PropTypes.object,\n\n  /**\n   * 弹层自定义样式类\n   */\n  popupClassName: PropTypes.string,\n\n  /**\n   * 弹层其他属性\n   */\n  popupProps: PropTypes.object,\n  locale: PropTypes.object,\n  className: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  rtl: false,\n  format: 'YYYY-MM',\n  size: 'medium',\n  disabledDate: function disabledDate() {\n    return false;\n  },\n  footerRender: function footerRender() {\n    return null;\n  },\n  hasClear: true,\n  popupTriggerType: 'click',\n  popupAlign: 'tl tl',\n  locale: nextLocale.DatePicker,\n  onChange: func.noop,\n  onVisibleChange: func.noop\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onValueChange = function (newValue) {\n    var ret = _this2.inputAsString && newValue ? newValue.format(_this2.props.format) : newValue;\n\n    _this2.props.onChange(ret);\n  };\n\n  this.onSelectCalendarPanel = function (value) {\n    // const { format } = this.props;\n    var prevSelectedMonth = _this2.state.value;\n    var selectedMonth = value.clone().date(1).hour(0).minute(0).second(0);\n\n    _this2.handleChange(selectedMonth, prevSelectedMonth, {\n      inputing: false\n    }, function () {\n      _this2.onVisibleChange(false, 'calendarSelect');\n    });\n  };\n\n  this.clearValue = function () {\n    _this2.setState({\n      dateInputStr: ''\n    });\n\n    _this2.handleChange(null, _this2.state.value);\n  };\n\n  this.onDateInputChange = function (inputStr, e, eventType) {\n    if (eventType === 'clear' || !inputStr) {\n      e.stopPropagation();\n\n      _this2.clearValue();\n    } else {\n      _this2.setState({\n        dateInputStr: inputStr,\n        inputing: true\n      });\n    }\n  };\n\n  this.onDateInputBlur = function () {\n    var dateInputStr = _this2.state.dateInputStr;\n\n    if (dateInputStr) {\n      var _props2 = _this2.props,\n          disabledDate = _props2.disabledDate,\n          format = _props2.format;\n      var parsed = moment(dateInputStr, format, true);\n\n      _this2.setState({\n        dateInputStr: '',\n        inputing: false\n      });\n\n      if (parsed.isValid() && !disabledDate(parsed)) {\n        _this2.handleChange(parsed, _this2.state.value);\n      }\n    }\n  };\n\n  this.handleChange = function (newValue, prevValue) {\n    var others = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments[3];\n\n    if (!('value' in _this2.props)) {\n      _this2.setState(_extends({\n        value: newValue\n      }, others));\n    }\n\n    var format = _this2.props.format;\n    var newValueOf = newValue ? newValue.format(format) : null;\n    var preValueOf = prevValue ? prevValue.format(format) : null;\n\n    if (newValueOf !== preValueOf) {\n      _this2.onValueChange(newValue);\n\n      typeof callback === 'function' && callback();\n    }\n  };\n\n  this.onVisibleChange = function (visible, reason) {\n    if (!('visible' in _this2.props)) {\n      _this2.setState({\n        visible: visible\n      });\n    }\n\n    _this2.props.onVisibleChange(visible, reason);\n  };\n}, _temp);\nMonthPicker.displayName = 'MonthPicker';\nexport default MonthPicker;","map":null,"metadata":{},"sourceType":"module"}