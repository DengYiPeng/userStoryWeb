{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { events, func, obj } from '../../util';\nimport EventHandlersMixin from './mixins/event-handlers';\nimport HelpersMixin from './mixins/helpers';\nimport Arrow from './arrow';\nimport Track from './track';\nimport Dots from './dots';\n/**\n * Slider inner\n */\n\nvar noop = func.noop;\nvar InnerSlider = (_temp = _class = function (_React$Component) {\n  _inherits(InnerSlider, _React$Component);\n\n  function InnerSlider(props) {\n    _classCallCheck(this, InnerSlider);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.state = {\n      animating: false,\n      dragging: false,\n      autoPlayTimer: null,\n      currentDirection: 0,\n      currentLeft: null,\n      currentSlide: 'activeIndex' in props ? props.activeIndex : props.defaultActiveIndex,\n      direction: 1,\n      listWidth: null,\n      listHeight: null,\n      slideCount: null,\n      slideWidth: null,\n      slideHeight: null,\n      swipeLeft: null,\n      touchObject: {\n        startX: 0,\n        startY: 0,\n        curX: 0,\n        curY: 0\n      },\n      lazyLoadedList: [],\n      // added for react\n      initialized: false,\n      edgeDragged: false,\n      swiped: false,\n      // used by swipeEvent. differentites between touch and swipe.\n      trackStyle: {},\n      trackWidth: 0\n    }; // this.filterProps = Object.assign({}, sliderPropTypes, InnerSlider.propTypes);\n\n    func.bindCtx(_this, ['onWindowResized', 'selectHandler', 'changeSlide', 'onInnerSliderEnter', 'onInnerSliderLeave', 'swipeStart', 'swipeMove', 'swipeEnd']);\n    return _this;\n  }\n\n  InnerSlider.prototype.componentWillMount = function componentWillMount() {\n    this.hasMounted = true;\n    var _props = this.props,\n        lazyLoad = _props.lazyLoad,\n        children = _props.children,\n        slidesToShow = _props.slidesToShow;\n    var currentSlide = this.state.currentSlide;\n    var lazyLoadedList = [];\n\n    if (lazyLoad) {\n      for (var i = 0, j = React.Children.count(children); i < j; i++) {\n        if (i >= currentSlide && i < currentSlide + slidesToShow) {\n          lazyLoadedList.push(i);\n        }\n      }\n\n      if (this.state.lazyLoadedList.length === 0) {\n        this.setState({\n          lazyLoadedList: lazyLoadedList\n        });\n      }\n    }\n  };\n\n  InnerSlider.prototype.componentDidMount = function componentDidMount() {\n    // TODO Hack for autoplay -- Inspect Later\n    this.initialize(this.props);\n    this.adaptHeight();\n\n    if (this.props.activeIndex) {\n      this.slickGoTo(this.props.activeIndex);\n    }\n    /* istanbul ignore if  */\n\n\n    if (window) {\n      // To support server-side rendering\n      events.on(window, 'resize', this.onWindowResized);\n    }\n  };\n\n  InnerSlider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.defaultActiveIndex !== nextProps.defaultActiveIndex) {\n      this.setState({\n        currentSlide: nextProps.defaultActiveIndex\n      });\n    }\n\n    if (this.props.activeIndex !== nextProps.activeIndex) {\n      this.slickGoTo(nextProps.activeIndex);\n    } else if (this.state.currentSlide >= nextProps.children.length) {\n      this.update(nextProps);\n      this.changeSlide({\n        message: 'index',\n        index: nextProps.children.length - nextProps.slidesToShow,\n        currentSlide: this.state.currentSlide\n      });\n    } else {\n      var others = ['children'];\n      var update = !obj.shallowEqual(obj.pickOthers(others, this.props), obj.pickOthers(others, nextProps));\n\n      if (update) {\n        this.update(nextProps);\n      }\n    }\n  };\n\n  InnerSlider.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.adaptHeight();\n  };\n\n  InnerSlider.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.animationEndCallback) {\n      clearTimeout(this.animationEndCallback);\n    }\n\n    events.off(window, 'resize', this.onWindowResized);\n\n    if (this.state.autoPlayTimer) {\n      clearInterval(this.state.autoPlayTimer);\n    }\n  };\n\n  InnerSlider.prototype.onWindowResized = function onWindowResized() {\n    this.update(this.props); // animating state should be cleared while resizing, otherwise autoplay stops working\n\n    this.setState({\n      animating: false\n    });\n    clearTimeout(this.animationEndCallback);\n    delete this.animationEndCallback;\n  };\n\n  InnerSlider.prototype.slickGoTo = function slickGoTo(slide) {\n    typeof slide === 'number' && this.changeSlide({\n      message: 'index',\n      index: slide,\n      currentSlide: this.state.currentSlide\n    });\n  };\n\n  InnerSlider.prototype.onEnterArrow = function onEnterArrow(msg) {\n    this.arrowHoverHandler(msg);\n  };\n\n  InnerSlider.prototype.onLeaveArrow = function onLeaveArrow() {\n    this.arrowHoverHandler();\n  };\n\n  InnerSlider.prototype._instanceRefHandler = function _instanceRefHandler(attr, ref) {\n    this[attr] = ref;\n  };\n\n  InnerSlider.prototype.render = function render() {\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        animation = _props2.animation,\n        arrows = _props2.arrows,\n        arrowSize = _props2.arrowSize,\n        arrowPosition = _props2.arrowPosition,\n        arrowDirection = _props2.arrowDirection,\n        dots = _props2.dots,\n        dotsClass = _props2.dotsClass,\n        cssEase = _props2.cssEase,\n        speed = _props2.speed,\n        infinite = _props2.infinite,\n        centerMode = _props2.centerMode,\n        centerPadding = _props2.centerPadding,\n        lazyLoad = _props2.lazyLoad,\n        dotsDirection = _props2.dotsDirection,\n        rtl = _props2.rtl,\n        slidesToShow = _props2.slidesToShow,\n        slidesToScroll = _props2.slidesToScroll,\n        variableWidth = _props2.variableWidth,\n        vertical = _props2.vertical,\n        focusOnSelect = _props2.focusOnSelect,\n        children = _props2.children,\n        dotsRender = _props2.dotsRender,\n        triggerType = _props2.triggerType;\n    var _state = this.state,\n        currentSlide = _state.currentSlide,\n        lazyLoadedList = _state.lazyLoadedList,\n        slideCount = _state.slideCount,\n        slideWidth = _state.slideWidth,\n        slideHeight = _state.slideHeight,\n        trackStyle = _state.trackStyle,\n        listHeight = _state.listHeight,\n        dragging = _state.dragging; // TODO 需要精简一下\n\n    var trackProps = {\n      prefix: prefix,\n      animation: animation,\n      cssEase: cssEase,\n      speed: speed,\n      infinite: infinite,\n      centerMode: centerMode,\n      focusOnSelect: focusOnSelect ? this.selectHandler : null,\n      currentSlide: currentSlide,\n      lazyLoad: lazyLoad,\n      lazyLoadedList: lazyLoadedList,\n      rtl: rtl,\n      slideWidth: slideWidth,\n      slideHeight: slideHeight,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      slideCount: slideCount,\n      trackStyle: trackStyle,\n      variableWidth: variableWidth,\n      vertical: vertical,\n      triggerType: triggerType // clickHandler: this.changeSlide, unused\n\n    };\n    var dotsEle = void 0;\n\n    if (dots === true && slideCount > slidesToShow) {\n      var dotProps = {\n        prefix: prefix,\n        rtl: rtl,\n        dotsClass: dotsClass,\n        slideCount: slideCount,\n        slidesToShow: slidesToShow,\n        currentSlide: currentSlide,\n        slidesToScroll: slidesToScroll,\n        dotsDirection: dotsDirection,\n        changeSlide: this.changeSlide,\n        dotsRender: dotsRender,\n        triggerType: triggerType\n      };\n      dotsEle = React.createElement(Dots, dotProps);\n    }\n\n    var prevArrow = void 0,\n        nextArrow = void 0;\n    var arrowProps = {\n      prefix: prefix,\n      rtl: rtl,\n      arrowSize: arrowSize,\n      arrowPosition: arrowPosition,\n      arrowDirection: arrowDirection,\n      infinite: infinite,\n      centerMode: centerMode,\n      currentSlide: currentSlide,\n      slideCount: slideCount,\n      slidesToShow: slidesToShow,\n      clickHandler: this.changeSlide\n    };\n\n    if (arrows) {\n      prevArrow = React.createElement(Arrow, _extends({}, arrowProps, {\n        type: 'prev',\n        ref: this._instanceRefHandler.bind(this, 'pArrow'),\n        onMouseEnter: animation ? this.onEnterArrow.bind(this, 'prev') : noop,\n        onMouseLeave: animation ? this.onLeaveArrow.bind(this, 'prev') : noop\n      }), this.props.prevArrow);\n      nextArrow = React.createElement(Arrow, _extends({}, arrowProps, {\n        type: 'next',\n        ref: this._instanceRefHandler.bind(this, 'nArrow'),\n        onMouseEnter: animation ? this.onEnterArrow.bind(this, 'next') : noop,\n        onMouseLeave: animation ? this.onLeaveArrow.bind(this, 'next') : noop\n      }), this.props.nextArrow);\n    }\n\n    var verticalHeightStyle = vertical ? {\n      height: listHeight\n    } : null;\n    var centerPaddingStyle = void 0;\n\n    if (centerMode) {\n      centerPaddingStyle = vertical ? {\n        padding: centerPadding + ' 0px'\n      } : {\n        padding: '0px ' + centerPadding\n      };\n    }\n\n    return React.createElement('div', {\n      className: prefix + 'slick-container ' + prefix + 'slick-initialized',\n      onMouseEnter: this.onInnerSliderEnter,\n      onMouseLeave: this.onInnerSliderLeave\n    }, React.createElement('div', {\n      ref: this._instanceRefHandler.bind(this, 'list'),\n      className: prefix + 'slick-list',\n      style: _extends({}, verticalHeightStyle, centerPaddingStyle),\n      onMouseDown: this.swipeStart,\n      onMouseUp: this.swipeEnd,\n      onTouchStart: this.swipeStart,\n      onTouchEnd: this.swipeEnd,\n      onMouseMove: dragging ? this.swipeMove : null,\n      onMouseLeave: dragging ? this.swipeEnd : null,\n      onTouchMove: dragging ? this.swipeMove : null,\n      onTouchCancel: dragging ? this.swipeEnd : null\n    }, React.createElement(Track, _extends({\n      ref: this._instanceRefHandler.bind(this, 'track')\n    }, trackProps), children)), prevArrow, nextArrow, dotsEle);\n  };\n\n  return InnerSlider;\n}(React.Component), _class.propTypes = {\n  prefix: PropTypes.string,\n  animation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  arrows: PropTypes.bool,\n  arrowSize: PropTypes.oneOf(['medium', 'large']),\n  arrowPosition: PropTypes.oneOf(['inner', 'outer']),\n  arrowDirection: PropTypes.oneOf(['hoz', 'ver']),\n  centerPadding: PropTypes.any,\n  children: PropTypes.any,\n  centerMode: PropTypes.bool,\n  dots: PropTypes.bool,\n  dotsDirection: PropTypes.oneOf(['hoz', 'ver']),\n  dotsClass: PropTypes.string,\n  focusOnSelect: PropTypes.bool,\n  cssEase: PropTypes.string,\n  speed: PropTypes.number,\n  infinite: PropTypes.bool,\n  defaultActiveIndex: PropTypes.number,\n  rtl: PropTypes.bool,\n  slidesToShow: PropTypes.number,\n  lazyLoad: PropTypes.bool,\n  activeIndex: PropTypes.number,\n  slidesToScroll: PropTypes.number,\n  variableWidth: PropTypes.bool,\n  vertical: PropTypes.bool,\n  prevArrow: PropTypes.element,\n  nextArrow: PropTypes.element,\n  dotsRender: PropTypes.func,\n  triggerType: PropTypes.string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  arrowDirection: 'hoz',\n  triggerType: 'click'\n}, _temp); // extend prototype\n\nInnerSlider.displayName = 'InnerSlider';\n\n_extends(InnerSlider.prototype, HelpersMixin);\n\n_extends(InnerSlider.prototype, EventHandlersMixin);\n\nexport default InnerSlider;","map":null,"metadata":{},"sourceType":"module"}