{"ast":null,"code":"import KEYCODE from './keycode';\nimport { each } from './object';\n/**\n * 用于切换页面元素的焦点\n */\n\n/**\n * 元素是否可见\n * @private\n * @param   {Element}  node\n * @return  {Boolean}\n */\n\nfunction _isVisible(node) {\n  while (node) {\n    if (node === document.body || node === document.documentElement) {\n      break;\n    }\n\n    if (node.style.display === 'none' || node.style.visibility === 'hidden') {\n      return false;\n    }\n\n    node = node.parentNode;\n  }\n\n  return true;\n}\n/**\n * 元素是否可以获取焦点\n * @private\n * @param   {Element}  node\n * @return  {Boolean}\n */\n\n\nfunction _isFocusable(node) {\n  var nodeName = node.nodeName.toLowerCase();\n  var tabIndex = parseInt(node.getAttribute('tabindex'), 10);\n  var hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;\n\n  if (_isVisible(node)) {\n    if (nodeName === 'input') {\n      return !node.disabled && node.type !== 'hidden';\n    } else if (['select', 'textarea', 'button'].indexOf(nodeName) > -1) {\n      return !node.disabled;\n    } else if (nodeName === 'a') {\n      return node.getAttribute('href') || hasTabIndex;\n    } else {\n      return hasTabIndex;\n    }\n  }\n\n  return false;\n}\n/**\n * 列出能获取焦点的子节点\n * @param  {Element} node 容器节点\n * @return {Array<Element>}\n */\n\n\nexport function getFocusNodeList(node) {\n  var res = [];\n  var nodeList = node.querySelectorAll('*');\n  each(nodeList, function (item) {\n    if (_isFocusable(item)) {\n      var method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';\n      res[method](item);\n    }\n  });\n\n  if (_isFocusable(node)) {\n    res.unshift(node);\n  }\n\n  return res;\n} // 用于记录上一次获得焦点的无素\n\nvar lastFocusElement = null;\n/**\n * 保存最近一次获得焦点的无素\n */\n\nexport function saveLastFocusNode() {\n  lastFocusElement = document.activeElement;\n}\n/**\n * 清除焦点记录\n */\n\nexport function clearLastFocusNode() {\n  lastFocusElement = null;\n}\n/**\n * 尝试将焦点切换到上一个元素\n */\n\nexport function backLastFocusNode() {\n  if (lastFocusElement) {\n    try {\n      // 元素可能已经被移动了\n      lastFocusElement.focus();\n    } catch (e) {// ignore ...\n    }\n  }\n}\n/**\n * 在限制的范围内切换焦点\n * @param  {Element} node 容器节点\n * @param  {Event} e      键盘事件\n */\n\nexport function limitTabRange(node, e) {\n  if (e.keyCode === KEYCODE.TAB) {\n    var tabNodeList = getFocusNodeList(node);\n    var maxIndex = tabNodeList.length - 1;\n    var index = tabNodeList.indexOf(document.activeElement);\n\n    if (index > -1) {\n      var targetIndex = index + (e.shiftKey ? -1 : 1);\n      targetIndex < 0 && (targetIndex = maxIndex);\n      targetIndex > maxIndex && (targetIndex = 0);\n      tabNodeList[targetIndex].focus();\n      e.preventDefault();\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}